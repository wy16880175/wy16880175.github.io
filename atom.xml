<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ginket&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ginket.xyz/"/>
  <updated>2018-07-02T15:07:37.153Z</updated>
  <id>http://ginket.xyz/</id>
  
  <author>
    <name>Wooyme</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vert.x后端漫游指南(2)</title>
    <link href="http://ginket.xyz/2018/07/02/Vert-x%E5%90%8E%E7%AB%AF%E6%BC%AB%E6%B8%B8%E6%8C%87%E5%8D%97-2/"/>
    <id>http://ginket.xyz/2018/07/02/Vert-x后端漫游指南-2/</id>
    <published>2018-07-02T09:30:06.000Z</published>
    <updated>2018-07-02T15:07:37.153Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前情提要"><a href="#1-前情提要" class="headerlink" title="1.前情提要"></a><strong>1.前情提要</strong></h2><p>上一篇我们已经学会了怎么实现一个最简单的Http服务端。这一篇我们会介绍怎么写一个用于登录的API。</p><h2 id="2-路由"><a href="#2-路由" class="headerlink" title="2.路由"></a><strong>2.路由</strong></h2><p>或许你们已经看过了HttpServerRequest这个接口，并且发现了这个接口中有一个返回String的方法叫做absoluteURI。稍微想一想就能发现，其实只需要对这个absoluteURI的返回值进行一些正则匹配，我们就能实现路由的功能。在实现了路由之后，我们还可以通过getParam方法获取到请求的参数。所以，如果只是做一个Demo，我们甚至不需要Vert.x的web扩展。<br>但是我们都是要干一番大事业的对吧。所以在这里我们要引入io.vertx.ext.web.Router。这个接口的名称已经够说明问题了，它能让我们建立像express中提供的路由。那么让我们来创建第一个路由吧<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">import</span> io.vertx.ext.web.Router<br><span class="hljs-keyword">import</span> io.vertx.core.Vertx<br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args:<span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span>&#123;<br>  <span class="hljs-keyword">val</span> vertx = Vertx.vertx()<br>  <span class="hljs-comment">///////////////////Add Code here//////////////////////</span><br>  <span class="hljs-keyword">val</span> router = Router.router(vertx)<br>  router.route(<span class="hljs-string">"/login/:username/:password"</span>).handler&#123;<br>    <span class="hljs-keyword">val</span> username = it.request().getParam(<span class="hljs-string">"username"</span>)<br>    <span class="hljs-keyword">val</span> password = it.request().getParam(<span class="hljs-string">"password"</span>)<br>    <span class="hljs-keyword">if</span>(username==<span class="hljs-string">"admin"</span> &amp;&amp; password=<span class="hljs-string">"admin123"</span>)&#123;<br>      it.response().end(<span class="hljs-string">"&#123;status:0&#125;"</span>)<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      it.response().end(<span class="hljs-string">"&#123;status:-1&#125;"</span>)<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">//////////////////////////////////////////////////////</span><br>  vertx.createHttpServer().requestHandler&#123;<br>    router.accept(it)<br>  &#125;.listen(<span class="hljs-number">80</span>)&#123;<br>    <span class="hljs-keyword">if</span>(it.failed())<br>      it.cause.printStackTrace()<br>    <span class="hljs-keyword">else</span><br>      println(<span class="hljs-string">"Listening on 80"</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>这样我们就创建好了一个登录路由。这个路由接受两个参数，分别是username和password，用户在请求的时候大致是这样的<a href="http://example.com/login/admin/admin123" target="_blank" rel="noopener">http://example.com/login/admin/admin123</a> 。如果你对http协议比较熟悉的话，你可能会更加习惯<a href="http://example.com/login?username=admin&amp;password=admin123" target="_blank" rel="noopener">http://example.com/login?username=admin&amp;password=admin123</a> 这样的写法。其实这两者在Vert.x中是一样的。都可以通过<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin">request.getParam(<span class="hljs-string">"param name"</span>)<br></code></pre></td></tr></table></figure></p><p>这样的方式来获取，只不过前者需要在创建路由的时候设定好参数的名称以及位置，而后者的参数名称只在handler中出现。近几年越来越流行使用第一种方式，确实这样的api会更加的简洁，同时也不用把参数名称暴露在url中多少起了点保密的作用。<br>除了创建一个路由之外，我们还修改了requestHandler中的代码。我们将本来的<br><figure class="highlight plain"><figcaption><span>```换成了```router.accept(it)``` 。相信这部分也非常的好理解，我们要让我们的router参与到HttpServer的处理中来，于是Router就提供了accept这个方法，它接收一个HttpServerRequest参数，在经过许多内部处理之后将一个包装好的RoutingContext传给我们的handler。这里其实还有另一种写法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs response().end(" ......")"="">```Kotlin<br>vertx.createHttpServer.requestHandler(router::accept).listen(80)<br></code></pre></td></tr></table></figure></p><p>当然，这只是Kotlin的一点小技巧，似乎在Java8里也有类似的写法。</p><h2 id="3-更完整的登录"><a href="#3-更完整的登录" class="headerlink" title="3.更完整的登录"></a><strong>3.更完整的登录</strong></h2><p>路由在使用的过程中最核心的部分就是它的RoutingContext，这个Context把完全囊括了后端所需要的所有东西。对于用户的请求，我们可以通过request()获取，当我们想响应用户的时候，我们可以调用response()，而对于Cookie和Session，RoutingContext也为他们提供了相应的方法。<br>现在就让我们把这个登录做的更加完善一点。我们都知道，一个正常的登录过程中，服务端应该在用户登录之后保存一个session，并给用户一个Cookie，这两者就是一个键值对的关系。登录成功之后用户发送的每个请求都会带着这个Cookie，而服务端就通过这个Cookie去查询它对应的数据，比如说:用户名，用户id，用户权限等。<br>在使用Session之前，我们需要添加一点代码来初始化一些东西<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">val</span> store = LocalSessionStore.create(vertx)<br>router.route().handler(CookieHandler.create())<br>router.route().handler(SessionHandler.create(store))<br></code></pre></td></tr></table></figure></p><p>Cookie的部分非常简单，没有什么可说的。但是在创建SessionHandler的时候，我们发现它需要一个SessionStore参数。Vert.x提供了两种SessionStore，一种是我们使用的<em>LocalSessionStore</em>而另一种是<em>ClusteredSessionStore</em>。字面来看，一种是本地存储的Session，而另一种是集群存储的Session，两者的区别也就非常明显了。本地存储的Session只存储在一个Vertx实例中，而集群存储则可以在多个实例中共享Session。<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-comment">//创建集群会话存储</span><br><span class="hljs-keyword">val</span> store = ClusteredSessionStore.create(vertx, <span class="hljs-string">"myclusteredapp3.sessionmap"</span>);<br></code></pre></td></tr></table></figure></p><p>本系列中不会涉及到集群有关的内容，尽管分布式集群也是Vert.x一个非常明显的优势，但是由于作者本人也没有参与过这类分布式项目，在这方面经验浅薄，只能等之后有机会接触了再做补充。<br>在创建完SessionStore和SessionHandler之后，我们就可以在自己的handler中处理Session了<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin">router.route(<span class="hljs-string">"/login/:username/:password"</span>).handler&#123;<br>  <span class="hljs-keyword">if</span>(it.session().<span class="hljs-keyword">get</span>&lt;String&gt;(<span class="hljs-string">"username"</span>)==<span class="hljs-string">"admin"</span>)&#123;<br>    it.response().end(<span class="hljs-string">"&#123;status:1,msg:\"You have logged in \"&#125;"</span>)<br>    <span class="hljs-keyword">return</span><span class="hljs-symbol">@handler</span><br>  &#125;<br>  <span class="hljs-keyword">val</span> username = it.request().getParam(<span class="hljs-string">"username"</span>)<br>  <span class="hljs-keyword">val</span> password = it.request().getParam(<span class="hljs-string">"password"</span>)<br>  <span class="hljs-keyword">if</span>(username==<span class="hljs-string">"admin"</span> &amp;&amp; password=<span class="hljs-string">"admin123"</span>)&#123;<br>    it.session().put(<span class="hljs-string">"username"</span>,<span class="hljs-string">"admin"</span>)<br>    it.session().put(<span class="hljs-string">"level"</span>,<span class="hljs-string">"1"</span>)<br>    it.response().end(<span class="hljs-string">"&#123;status:0&#125;"</span>)<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    it.response().end(<span class="hljs-string">"&#123;status:-1&#125;"</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>这样我们的登录api就可以判断用户是否已经登录。每当用户请求的时候，我们就会调用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs it.session().get()```判断用户是否已经登录。而每当用户登录成功的时候，我们就将用户名和等级放入Session中。用于之后的权限控制。"><br>## **4.一个可以投入使用的登录**<br>一个正常的登录不应该是这样的对不对，没有人会把用户名和密码写在代码里。这么说可能不太对，其实也是有一些情况下，我们也会见到把用户名密码写在代码里的情况，比如说什么asp大马，php小马(不知道现在这种东西现在还有没有了)之类的东西或者是不靠谱的外包团队。  <br>那么抛开这些另类的情况，为了实现一个登录功能，我们得有个数据库对不对。假如说我们现在已经有一个注册页面了，那么用户注册后的信息都应该放在数据库里，而登录的过程就是读数据库的过程。  <br>Vert.x提供了很多操作数据库的包。这个系列里我们选择使用**vertx-mysql-postgresql-client**作为我们与数据库交互的客户端，同时呢，我们选择Mysql作为数据库。如果你从来没有接触过数据库的操作，那么你可以把Mysql想象成一个开放着3306端口的Excel表格，它允许连接到这个端口并且登录成功的客户端通过sql语句增删改查表格中的数据。  <br>那么首先，我们要让我**vertx-mysql-client**连接到Mysql上。<br>```Kotlin<br>import io.vertx.ext.asyncsql.AsyncSQLClient<br>import io.vertx.ext.asyncsql.MySQLClient<br>val sqlClient = MySQLClient.createShared(vertx,JsonObject(&quot;host&quot; to &quot;localhost&quot;<br>        ,&quot;username&quot; to &quot;root&quot;<br>        ,&quot;password&quot; to &quot;root&quot;<br>        ,&quot;database&quot; to &quot;example&quot;))<br></code></pre></td></tr></table></figure></p><p>这样我们就创建了一个<em>sqlClient</em>，如果连接成功的话。<br>这是关于MysqlClient的详细配置<br><figure class="highlight Javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Javascript">&#123;<br>  <span class="hljs-string">"host"</span> : &lt;主机地址&gt;,<br>  "port" : &lt;端口&gt;,<br>  "maxPoolSize" : &lt;最大连接数&gt;,<br>  "username" : &lt;用户名&gt;,<br>  "password" : &lt;密码&gt;,<br>  "database" : &lt;数据库名称&gt;,<br>  "charset" : &lt;编码&gt;,<br>  "queryTimeout" : &lt;查询超时时间-毫秒&gt;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>当然我们也可创建一个NonShared的sqlClient，创建方法是一样的，并且在这种只有一个Vert.x实例的工程中，两者的效果也是一样的。<br>现在我们要把这个sqlClient放到我们的RouterHandler中。<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin">router.route(<span class="hljs-string">"/login/:username/:password"</span>).handler&#123;<br>  <span class="hljs-keyword">if</span>(it.session().<span class="hljs-keyword">get</span>&lt;String&gt;(<span class="hljs-string">"username"</span>)==<span class="hljs-string">"admin"</span>)&#123;<br>    it.response().end(<span class="hljs-string">"&#123;status:1,msg:\"You have logged in \"&#125;"</span>)<br>    <span class="hljs-keyword">return</span><span class="hljs-symbol">@handler</span><br>  &#125;<br>  <span class="hljs-keyword">val</span> username = it.request().getParam(<span class="hljs-string">"username"</span>)<br>  <span class="hljs-keyword">val</span> password = it.request().getParam(<span class="hljs-string">"password"</span>)<br>  sqlClient.querySingleWithParams(<span class="hljs-string">"SELECT id,level FROM user WHERE username=? and password=?"</span>,JsonArray(username,password))&#123;<br>    <span class="hljs-keyword">if</span>(it.failed() || it.result()==<span class="hljs-literal">null</span>)&#123;<br>      it.response().end(<span class="hljs-string">"&#123;status:-1&#125;"</span>)<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      it.session().put(<span class="hljs-string">"username"</span>,username)<br>      it.session().put(<span class="hljs-string">"uid"</span>,it.result().getInteger(<span class="hljs-number">0</span>))<br>      it.session().put(<span class="hljs-string">"level"</span>,it.result().getInteger(<span class="hljs-number">1</span>))<br>      it.response().end(<span class="hljs-string">"&#123;status:0&#125;"</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>我们对判断部分做了点修改，使我们能够使用数据库中的数据。当查询到用户名和密码都与用户输入匹配的结果时，我们就将查询结果存入到session中。</p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5.小结"></a><strong>5.小结</strong></h2><p>这一篇算是比较详细的讲了怎么实现一个能够使用的登录API，当然也不是很全面。在Router里还有很多内容可以写，会看情况在之后补充。下一篇应该会继续讲MysqlClient的使用，然后把curd全部写一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-前情提要&quot;&gt;&lt;a href=&quot;#1-前情提要&quot; class=&quot;headerlink&quot; title=&quot;1.前情提要&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.前情提要&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;上一篇我们已经学会了怎么实现一个最简单的Http服务端。这一篇我们会介绍怎
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vert.x后端漫游指南（1）</title>
    <link href="http://ginket.xyz/2018/07/01/Vert-x%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>http://ginket.xyz/2018/07/01/Vert-x搭建服务端应用入门/</id>
    <published>2018-07-01T14:40:34.000Z</published>
    <updated>2018-07-02T09:29:48.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-为什么是Vert-x"><a href="#1-为什么是Vert-x" class="headerlink" title="1.为什么是Vert.x"></a><strong>1.为什么是Vert.x</strong></h2><p>如果你从来没有听说过Vert.x，不要觉得是自己孤陋寡闻或是被时代抛弃了。Vert.x是一个非常小众的服务端框架，我也举不出某个大厂商将Vert.x作为它们后端技术栈的例子，但是这并不能说明Vert.x不够优秀，Vert.x不火很大程度上是因为它没有那些惊世骇俗的噱头，同时它实在是太年轻了。<br>学习这样一个小众的框架往往是要付出许多代价的，无论是大段的报错信息还是连报错信息都没有的错误，小众的东西总是让我们费劲心思。好在Vert.x并不属于这一类的小众，Vert.x的文档非常详细(包括中文文档)，并且它的源码注释也非常符合规范，配合文档以及注释，想要学习这个框架还是非常容易的。<br>那么问题来了，在现在这个框架爆炸的时代，我们为什么还要学习Vert.x呢？是啊，现在的框架是真的多，好像不管是什么样的语言都可以来写后端服务了，js有express，python有django，go、java、ruby就更不用说了。那Vert.x到底有什么优势呢？  </p><h4 id="优势"><a href="#优势" class="headerlink" title="优势:"></a>优势:</h4><ul><li><em>运行在JVM上</em><br>也许你不认为运行在JVM上会是一个框架的优势，毕竟JVM上已经有许多非常成熟的解决方案了，大名鼎鼎的Spring，J2EE，这样一个不出名的框架要怎么与这些老牌强者抗衡，但是Vert.x就是可以，因为它与众不同。运行在JVM上让它可以很轻松的利用Java庞大的生态，各种工具，各种成熟的技术还有现在让许多框架头疼的多线程问题。</li><li><em>事件循环以及异步</em><br>如果你了解Netty的话，你对事件循环和异步一定不会陌生，并且我可以告诉你Vert.x的底层实现就是Netty。如果你从来没有听说过Netty那也没关系，我想你多半听说过nodejs，通俗的来说Vert.x就是运行在JVM上的Nodejs。他们都有一个Eventloop，他们的所有API都是异步的，他们都遵守”Don’t call us,we’ll call you”的原则。只不过Vert.x更加自由，更加安全。异步很大的一个好处是将逻辑与I/O分离，逻辑的部分干逻辑的事，I/O的部分干I/O的事，因为I/O往往是耗时严重的，所以等到I/O完成了自己的工作后再来召唤逻辑，而在I/O工作的时候逻辑就去做其他的事情，这样两方都不会有干等着的时候。</li><li><em>多语言支持</em><br>JVM的优势在这种时候体现的淋漓尽致，除了JVM以外，还有哪个平台能够做到同时运行多种语言呢？.Net吗。Vert.x支持7种语言，Java(个人认为，Java是最不适合的。至少目前是这样，Java10应该会有所改观), JavaScript, Groovy, Ruby, Ceylon, Scala and Kotlin，并且这种支持不是简单的因为大家都能运行在JVM上。Vert.x为这些语言提供了属于他们自己的API。</li><li><em>不仅仅是Web,不仅仅是服务</em><br>没错，不仅仅是Web，Vert.x提供的不仅仅是对Web的支持。Vert.x是个插件化的框架，它的核心部分实际上非常的简练。这个核心提供了TCP，UDP甚至是DNS的服务端，也提供了简单的HTTP服务端。在这个核心的基础上，我们可以添加其他的插件，使这个框架能够胜任Web服务端的工作。如果我们碰巧需要一个客户端的话 —— 想象我们现在要开发一个代理工作，我们就同时需要一个服务端和一个客户端 —— 那Vert.x简直就是不二之选，DNSClient,HttpClient,NetClient,DatagramSocketClient，我们想要的它都能提供。</li></ul><p>那么同样的，任何事物都有好的与坏的，如果有某样东西完美了，那它为什么还会有竞争对手</p><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势:"></a>劣势:</h4><ul><li><em>上手困难</em><br>不是所有人都能轻松的理解异步的，特别是在java里有很多同步代码的情况下，比如JDBC，习惯了同步的人很容易一不小心就忘了自己在一个异步的世界里，然后阻塞了Eventloop,接着有幸看到Vert.x抛出的超时异常。没错，Vert.x是会检测运行时间的，如果某段代码超时了，你会看到一个非常醒目的异常。</li><li>没了  </li></ul><h2 id="2-跨出的一小步"><a href="#2-跨出的一小步" class="headerlink" title="2.跨出的一小步"></a><strong>2.跨出的一小步</strong></h2><p>说了这么多，不如来看一看怎么写一个简单的http服务端吧。这个入门应该会出一个系列，从第一个服务端程序到一个比较完整的后端。可能会涉及到一点后端渲染，但是其实我不太喜欢后端渲染的东西。前端渲染有很多好处，无论是CDN还是利用浏览器的缓存，前端渲染都能减轻服务器负担。<br>首先，我们需要Vert.x。这个可以在Vert.x的官方网站上获取到</p><blockquote><p><a href="https://vertx.io/download/" target="_blank" rel="noopener">https://vertx.io/download/</a></p></blockquote><p>官网甚至提供了一个构建Vert.x工程的工具</p><blockquote><p><a href="http://start.vertx.io/" target="_blank" rel="noopener">http://start.vertx.io/</a></p></blockquote><p>如果你不知道怎么配置的话，可以直接在这里开始。<br>在这个系列里，我可能不常使用Java，而更加倾向于使用Kotlin。因为Kotlin和Vert.x的契合度非常高，Kotlin提供的协程可以很好的解决一些因为异步导致的问题，并且Kotlin完全兼容Java的特点也让Kotlin在许多其他语言中脱颖而出。<br>那让我们来看一个最简单的Http服务端是怎么实现的。<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">import</span> io.vertx.core.Vertx<br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args:<span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span>&#123;<br>  <span class="hljs-keyword">val</span> vertx = Vertx.vertx()<br>  vertx.createHttpServer().requestHandler&#123;<br>    it.response().end(<span class="hljs-string">"Welcome to our first Http Server!"</span>)<br>  &#125;.listen(<span class="hljs-number">80</span>)&#123;<br>    <span class="hljs-keyword">if</span>(it.failed())<br>      it.cause.printStackTrace()<br>    <span class="hljs-keyword">else</span><br>      println(<span class="hljs-string">"Listening on 80"</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>这是用Kotlin实现一个简单HttpServer的版本。如果你从来没有接触过Kotlin的话，你只要记住一点func{}等于func({}),函数的最后一个lambda参数是可以放到小括号外面去的。然后对于只有一个参数的lambda，这个参数默认的名称叫做it。<br>我们可以看看这段代码到底做了什么。首先，我们得到了一个vertx对象，这个vertx是一切的起源。接着我们调用了createHttpServer方法，创建了一个Server。在创建完Server之后我们为它添加了一个handler，可以看到，Vert.x的API大多是流式的，写起来非常漂亮，fp的美感。在Kotlin里，这个handler表现为一个lambda，实际上这个requestHandler所需要的参数是一个Handler<httpserverrequest>接口，所以在Java里，写法就变成了<br><figure class="highlight Java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java">vertx.createHttpServer().requestHandler(<span class="hljs-keyword">new</span> Handler&lt;HttpServerRequest&gt;()&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">handle</span><span class="hljs-params">(HttpServerRequest req)</span></span>&#123;<br>    req.response().end(<span class="hljs-string">"Welcome to our first Http Server!"</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></httpserverrequest></p><p>当然这种写法比较过时，java8已经加入了lambda，但是为了更加清晰一点，这里我把这种原始的版本表示出来。<br>这个handler是在服务端启动后，每当有用户访问我们的服务端，服务端就会返回一个欢迎词，就像nginx的默认页面一样。同样的，listen也是差不多的过程，第一个参数是监听的端口，第二个参数则是用来处理监听结果的handler，这个handler在端口成功打开或是打开失败的时候被调用，所以我们可以知道我们的服务端有没有成功运行。<br>其实这里异步的特点就已经有所体现了，我们没有等待用户访问，也没有等待端口打开，所有的一切都是异步的。当有结果的时候，Vert.x就会来调用我们设定的handler，而当没有结果的时候，Evnetloop就会在那里自己循环，只要我们不写阻塞代码，Eventloop就永远不会停止循环。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><em>小结</em></h2><p>第一篇就大概介绍一下Vert.x的理念，实际上Vert.x的许多特性比介绍的要复杂的多，有兴趣的人可以去看中问文档，里面有讲关于Verticle的，关于分布式的，以及一些类似于热部署的。这里写的一个例子也非常的简单，但是如果你从来没有接触过异步，这对你来说可能是个挑战。你得明白，为什么这段代码不是按照顺序执行的，以及什么是lambda(这个不是非常重要，lambda只是一种表现形式而已，我们实例化一个接口也完全可以实现同样的功能)。<br>下一篇应该是会讲请求的处理，get的和post的，以及Router这个扩展。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-为什么是Vert-x&quot;&gt;&lt;a href=&quot;#1-为什么是Vert-x&quot; class=&quot;headerlink&quot; title=&quot;1.为什么是Vert.x&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.为什么是Vert.x&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;如果你从来没有听说过Ver
      
    
    </summary>
    
    
  </entry>
  
</feed>

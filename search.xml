<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>如何占baidu的便宜</title>
      <link href="/2019/01/03/%E5%A6%82%E4%BD%95%E5%8D%A0baidu%E7%9A%84%E4%BE%BF%E5%AE%9C/"/>
      <url>/2019/01/03/%E5%A6%82%E4%BD%95%E5%8D%A0baidu%E7%9A%84%E4%BE%BF%E5%AE%9C/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>Baidu，中国的Oracle，业界的毒瘤</p></blockquote><p>这篇文章主要是分享一下我的<strong>R18ACG</strong>的一些“技术内幕”。如果抛开其中的一些黑科技的话，这个APP本身其实是非常简单的。只需要一个足够大的云盘，一个普通的App就可以完成了。但如果只是这样的话我也就不会写这篇文章了(笑。  </p><h1 id="存哪？"><a href="#存哪？" class="headerlink" title="存哪？"></a>存哪？</h1><p>作为一个资源型的App，存储是必须要解决的问题。至于我的资源是从哪里来的，这个我可能会考虑写一篇Android+JNI逆向工程的文章，也可能会再水一篇关于scrapy爬虫抓取的，都快忘了自己是做安全出身的。总之在这里我就不提了，现在的问题是我有300G左右的资源(本子)要找个地方存。<br>既然要找个地方存，那就在这里顺便一起了解一下现在市面上的云存储的价格吧。</p><p><strong>国内</strong>  </p><ul><li>腾讯云COS<ul><li>免费额度50G+0.13元/G/月 = 32.5元 (免费请求100万次，所以不考虑额外请求费用)</li></ul></li><li>七牛云<ul><li>免费10G+0.134元/G/月 = 38.86元 (华南机房)</li></ul></li><li>华为EVS<ul><li>0.3元/G/月 = 90 (普通IO，上海机房)</li></ul></li><li>百度BOS<ul><li>0.119元/G/月 = 35.7</li></ul></li></ul><p><strong>海外</strong></p><ul><li>AWS<ul><li>0.021USD/G/月 = 6.3USD</li></ul></li><li>Azure<ul><li>0.018USD/G/月 = 5.4USD</li></ul></li><li>Google Cloud<ul><li>0.020USD/G/月 = 6USD</li></ul></li><li>BackBlaze<ul><li>0.005USD/G/月 = 1.5USD</li></ul></li></ul><p>最便宜的是BackBlaze的B2，换算成人民币也就每月10块左右，而且BackBlaze就算在国内的上传下载速度也是非常可以的。但是非常遗憾的是BackBlaze不支持支付宝，不支持Paypal，只能通过银行卡支付，真是有钱不要赚。至于其他的一年都至少要400+。<br>我可不想为这么一个小App买单，于是就找到了一种非常规的手段。我们知道百度云盘是有免费的1000G空间的，用来存这些资源不是刚刚好。当然，这里有几个问题</p><ul><li>单个文件数量上限</li><li>保护资源</li><li>怎么调用</li></ul><p>虽然我没有试过，但是据说百度网盘里单个文件的存储是有上限的，300G的图，我已经不知道有多少张了，一张一张的存储肯定是不行的，而且由于我要保证这些图片不会因为百度网盘的审查而被删除，所以肯定是没法直接就这么放在云盘里的。<br>对于这两个问题，我的解决方法是把图片打包起来。但是打包之后就要面对下一个问题，“怎么调用”。单个的图片可以直接通过url获取，但是打包后难道要每次下载整个包然后再解包吗，这明显是不现实的，为了减少文件的数量，我的每个包的大小都超过了1G，要完整的下载，至少得十几分钟。</p><h1 id="“虚拟文件系统”"><a href="#“虚拟文件系统”" class="headerlink" title="“虚拟文件系统”"></a>“虚拟文件系统”</h1><p>虚拟文件系统这个概念原本是在Linux上就有的，也就是把某块硬盘空间放在一个文件里，然后就可以通过网络传输文件。我的想法也是这样的，于是我就自己写了一个非常简单的<strong>虚拟文件系统</strong>,原理就是简单的把图片连接起来，并记录每张图片的大小和文件名，组合成一个新的文件头。需要调用其中的图片时，只需要下载整个文件头，然后通过文件名找到图片的偏移和大小，再去偏移的位置读取图片就行了。这部分的代码使用Perl写的，下面就是perl的代码</p><pre><code class="Perl">#!/usr/bin/perluse warnings;use strict;use utf8;use List::Util qw(reduce);use JSON qw/encode_json/;my @head=();open my $o_file,&#39;&gt;:raw&#39;,$ARGV[2];sub read_dir{    my ($dir) = @_;    opendir my $i_dir, $dir or die &quot;Need input directory&quot;;    my @i_files =map {$dir.&#39;/&#39;.$_} grep { $_ ne &#39;..&#39; &amp;&amp; $_ ne &#39;.&#39; } readdir $i_dir;    $|++;    FOR:    for my $i_file_name (@i_files){        if(-d $i_file_name){read_dir($i_file_name);next FOR;        }        my $i_size = -s $i_file_name;        push @head,{&#39;file&#39;=&gt;$i_file_name,&#39;size&#39;=&gt;$i_size};    }}sub middle_handler{    #For future;    return shift;}sub generate_head{    my $head_length = 0;    for my $single(@head){        $head_length = $head_length+8+length $single-&gt;{&#39;file&#39;};    }    print &quot;Head Length:$head_length\n&quot;;    print $o_file pack(&quot;N&quot;,$head_length);    for my $single (@head){        my $filename = $single-&gt;{&#39;file&#39;};        my $size = $single-&gt;{&#39;size&#39;};        print ((length $filename).&#39;,&#39;.$size.&#39;,&#39;.$filename.&quot;\n&quot;);        print $o_file pack(&quot;N N a*&quot;,(length $filename),$size,$filename);    }    open my $header,&quot;&gt;&quot;,$ARGV[2].&quot;.head.json&quot;;    print $header encode_json(\@head);    close $header;    generate_body();}sub generate_body{    for my $single(@head){        my $filename = $single-&gt;{&#39;file&#39;};        my $size = $single-&gt;{&#39;size&#39;};        open my $in_file,&#39;&lt;:raw&#39;,$filename;        read($in_file,my $bytes,$size);        print $o_file middle_handler($bytes);        print &quot;.&quot;;    }}sub unpack_files{    my ($file) = @_;    open my $in_file,&#39;&lt;:raw&#39;,$file;    read($in_file,my $bytes,4);    my $head_length = unpack(&#39;N&#39;,$bytes);    print $head_length;    my $current = 0;    while($current&lt;$head_length){        read($in_file,$bytes,8);        my ($line_length,$size) = unpack(&#39;N N&#39;,$bytes);        print $line_length,$size;        read($in_file,$bytes,$line_length);        my $filename = unpack(&quot;a$line_length&quot;,$bytes);        print $filename,&quot;\n&quot;;        $current = $current + 8 + $line_length;        push @head,{&#39;file&#39;=&gt;$filename,&#39;size&#39;=&gt;$size};    }    for my $single (@head){        read($in_file,$bytes,$single-&gt;{&#39;size&#39;});        my @path = split /\//,$single-&gt;{&#39;file&#39;};        reduce { mkdir($a);$a.&#39;/&#39;.$b } @path;        open my $fh,&#39;&gt;:raw&#39;,$single-&gt;{&#39;file&#39;};        print $fh $bytes;        close $fh;    }}if($ARGV[0] eq &#39;g&#39;){    read_dir($ARGV[1]);    generate_head();}elsif($ARGV[0] eq &#39;u&#39;){    unpack_files($ARGV[1]);}</code></pre><p>因为当时正在学习Perl，就拿来写一下了，其实Perl还是适合<em>One line</em>，这里用Perl不是特别方便。<br>这样总归是有了可以打包存在度盘上的方案。</p><h1 id="怎么获取？"><a href="#怎么获取？" class="headerlink" title="怎么获取？"></a>怎么获取？</h1><blockquote><p>只能存，不能取那不就成貔貅了</p></blockquote><p>百度对大文件的下载只有限制的，正常来说只能通过百度网盘的应用来下载。但是呢，既然是能够下载的，那必然也是能够通过逆向分析，网络流量分析的方式来破解百度的下载流程，工作量有点大就是了。当然，这部分我就没有使用自己的那点黑客水平，我选择直接在Github上找到了一个Go写的百度网盘客户端BaiduPCS</p><blockquote><p><a href="https://github.com/iikira/BaiduPCS-Go" target="_blank" rel="noopener">https://github.com/iikira/BaiduPCS-Go</a><br>这是一个已经有 10K+ Star的开源项目，只能说中国网友牛逼。顺便说一下，这个客户端是真的很强，完整到令人发指，简直就像是百度出了内鬼。  </p></blockquote><p>在这样一个强大的工具加持下，下载功能的实现就非常简单了。不过我还是走了一些弯路。最初我的想法是把BaiduPCS内嵌到Android应用里，毕竟人家是Go写的，嵌到哪里都没问题，然后就涉及了混合App开发的底层问题，改了1个晚上的Java和Go，虽然也把问题解决了，但是整个App就变得非常混乱，耦合度太高。<br>于是最后我决定干脆直接在自己的服务器上运行BaiduPCS，因为BaiduPCS有导出”真实的”下载链接的功能，所以其实只需要让App来请求真正的链接就行了。这部分的技术细节我就不详细写了。获取到链接之后的工作才是核心所在。<br>就算获取到了包的链接，我们得到的还是整个包，那么怎么下载其中的部分文件呢？ 这里就要涉及到平时下载的<strong>断点续传</strong>,<strong>多线程下载</strong>的问题。</p><h1 id="分块下载"><a href="#分块下载" class="headerlink" title="分块下载"></a>分块下载</h1><p>多线程下载是怎么实现的？<br>要回答这个问题，就得看看HTTP协议给我们提供了什么。HTTP协议中有这样一个头<strong>Range</strong></p><blockquote><p>参考资料<br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests</a></p></blockquote><p>首先要判断服务器是否支持Range头，我们可以先发送一个<code>HEAD</code>请求，如果服务端的返回带有<code>Accept-Ranges: bytes</code>那么就说明服务端支持<strong>Range</strong>，比如</p><pre><code>curl -I http://i.imgur.com/z4d4kWk.jpgHTTP/1.1 200 OK...Accept-Ranges: bytesContent-Length: 146515</code></pre><p>当然百度的服务端也是支持Range的，不然百度自家的应用也没法实现多线程加速，在判断可行了之后，就可以通过添加<strong>Range</strong>来获取想要的部分了，比如</p><pre><code>GET /z4d4kWk.jpg HTTP/1.1Host: i.imgur.comRange: bytes=0-1023</code></pre><p>服务端会返回</p><pre><code>HTTP/1.1 206 Partial ContentContent-Range: bytes 0-1023/146515Content-Length: 1024...(binary content)</code></pre><p>不同于200，HTTP规定206表示传输部分文件。<br>结合前面的<strong>虚拟文件系统</strong>，我们首先读取4个字节得到头部的长度，然后再读取整个头部得到所有图片的位置，最后就可以通过位置下载图片了。</p><h1 id="怎么显示？"><a href="#怎么显示？" class="headerlink" title="怎么显示？"></a>怎么显示？</h1><p>这里，问题就出现了，由于我们必须要添加HTTP头，像<code>img</code>这样的标签自然就没法直接使用了。关于这个问题，我最初采用了一种比较底层的方法。Ionic是基于Cordova的，于是我就去看了Cordova的源码，然后发现它可以通过修改<code>shouldInterceptRequest</code>来修改请求。于是我就自己加了点代码，把指向<code>http://my-hub/action/start_location/end_location/img_url/</code>的请求改成真正的请求来实现直接使用<code>img</code>的功能</p><pre><code class="Java">//主要部分代码Pattern pattern = Pattern.compile(&quot;http://my-hub\\.com/([^/]+)/([^/]+)/([^/]+)/([\\S]+)&quot;);Matcher matcher = pattern.matcher(url);if(matcher.find()){    String action = matcher.group(1);    String offset = matcher.group(2);    String end = matcher.group(3);    String real = matcher.group(4);    URL myUrl = new URL(real);    if(action.equals(&quot;data&quot;)) {        HttpURLConnection connection = (HttpURLConnection) myUrl.openConnection();        connection.setRequestMethod(&quot;GET&quot;);        connection.setRequestProperty(&quot;User-Agent&quot;, &quot;netdisk;8.3.1;android-android&quot;);        connection.setRequestProperty(&quot;Range&quot;, &quot;bytes=&quot; + offset + &quot;-&quot; + end);        InputStream in = new BufferedInputStre(connection.getInputStream());        return new WebResourceResponse(&quot;image/jpeg&quot;, &quot;UTF-8&quot;, in);    }}</code></pre><p>这个很成功，只要图片不太大，比如几十兆，就没有任何问题。但是这个带给我的麻烦主要在调试部分，本来Ionic的调试还是很愉快的，可以直接在Chrome里做，一旦修改了Cordova，我就不得不在真机上调试了，每次都要等编译，非常痛苦。</p><h1 id="Blob"><a href="#Blob" class="headerlink" title="Blob"></a>Blob</h1><blockquote><p>参考资料<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Blob</a></p></blockquote><p>在Stackoverflow上看了一圈，终于找到了一个可以通过Ajax来获取图片并展示<br>的方法——<strong>Blob</strong>。通过<strong>Blob</strong>可以把Ajax得到的arrayBuffer转换成可以共给<code>img</code>标签使用的url。</p><pre><code class="Typescript">//核心代码imageBlobRequest(_url: string[], offset: number | string, end: number | string, unit?: any): Promise&lt;any&gt; {    let url = Object.assign([],_url);    //获取图片    let promise = this.http.get(url.shift(), {      responseType: &#39;arraybuffer&#39;,      headers: {&#39;Range&#39;: `bytes=${offset}-${end}`}    }).toPromise();    let handle = (buf: any) =&gt; {      let file = new Blob([buf], {type: &#39;image/jpeg&#39;});      //得到arrayBuffer的URL      let blob = this.sanitizer.bypassSecurityTrustResourceUrl(URL.createObjectURL(file));      return new Promise(resolve =&gt; {        resolve({&#39;blob&#39;: blob, &#39;unit&#39;: unit});      })    };    let err = (reason) =&gt; {      if (reason.status == 403 &amp;&amp; url.length &gt; 0) {        promise = this.http.get(url.shift(), {          responseType: &#39;arraybuffer&#39;,          headers: {&#39;Range&#39;: `bytes=${offset}-${end}`}        }).toPromise();        return promise.then(handle).catch(err);      } else {        return new Promise(resolve =&gt; {          resolve({&#39;blob&#39;: null, &#39;unit&#39;: unit});        })      }    };    return promise.then(handle).catch(err);  }</code></pre><p>通过这样一段代码arrayBuffer就很轻松的被转换成了URL，然后图片就可以愉快的显示出来了。至此，白嫖百度的核心部分也就完成了</p><h1 id="百度的限制"><a href="#百度的限制" class="headerlink" title="百度的限制"></a>百度的限制</h1><p>当然，百度这种毒瘤企业它也不傻。百度对于经过网盘的流量是有限制的，这个限制不只是说限制白嫖，对于正常的下载量它也是有所限制的。但是我们终归还是有方法绕开这样的限制。如果你还用了百度的其他产品，比如说百度输入法，就会发现在网盘目录里还有<code>我的应用数据</code>这样的目录，这个目录是专门为百度的其他产品提供的，也就是说，其他产品的用户数据也是会存在你的百度网盘里的。这个目录有一些特别的权限限制，比如说只能通过特定的AppID才能访问。关于这个可以看BaiduPCS里的某个Issue。<br>一旦我们成功得到了特定的AppID，那么就可以绕过百度的限制，无限量的访问网盘内的资源。而且由于这些应用都属于不同的部分，协调起来肯定没有百度网盘本身那么方便，这种Bug要修复也不是一天两天就能完成的事情，在百度完善自己的安全机制之前，就只能是让我们白嫖了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇文章非常的杂，涉及的技术范围比较广，但是也没有什么深度，只是介绍了如何通过几个奇技淫巧来完成这样一个资源App。下一篇可能会写我如何逆向哔卡，也不一定，毕竟逆向更多的还是靠经验，一定要说有什么绝对的制胜之道我也不太清楚。</p>]]></content>
      
      
        <tags>
            
            <tag> perl </tag>
            
            <tag> Typescript </tag>
            
            <tag> Android </tag>
            
            <tag> Ionic </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kotlin Native求生指南(3)</title>
      <link href="/2018/12/22/Kotlin-Native%E6%B1%82%E7%94%9F%E6%8C%87%E5%8D%97-3/"/>
      <url>/2018/12/22/Kotlin-Native%E6%B1%82%E7%94%9F%E6%8C%87%E5%8D%97-3/</url>
      <content type="html"><![CDATA[<h1 id="上一篇地址"><a href="#上一篇地址" class="headerlink" title="上一篇地址"></a>上一篇地址</h1><blockquote><p><a href="https://wooyme.github.io/2018/12/22/Kotlin-Native%E6%B1%82%E7%94%9F%E6%8C%87%E5%8D%97-2/">https://wooyme.github.io/2018/12/22/Kotlin-Native%E6%B1%82%E7%94%9F%E6%8C%87%E5%8D%97-2/</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一篇意外的花了整篇的篇幅写<em>cinterop</em>,INTEROP的文档比我想的要长太多。那么这一篇就来写一下Kotlin Native的多线程模型。由于Kotlin Native还在频繁更新中，所以多线程API和注解还是有可能出现较大变化的，本篇文章针对的是<strong>Kotlin Native v0.9</strong>,其他版本如有差异，请忽略这篇文章，以官方为准。</p><blockquote><p><a href="https://github.com/JetBrains/kotlin-native/blob/master/CONCURRENCY.md" target="_blank" rel="noopener">https://github.com/JetBrains/kotlin-native/blob/master/CONCURRENCY.md</a></p></blockquote><p>并且这篇文章只讲Kotlin Native的多线程模型，并不涉及协程，想要了解协程的朋友，还是看官方的文档吧。</p><h1 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h1><p>可能说到多线程，我们马上就会想到<code>pthread</code>之类的东西。没错<code>pthread</code>作为<strong>POSIX</strong>提供的跨平台多线程API可以说是非常深入人心了。你问我Kotlin Native支不支持<code>pthread</code>,那肯定是支持的，我们完全可以像在C/C++中做的那样，通过<code>pthread</code>创建新的线程，只是要在线程启动的时候运行一下<code>kotlin.native.initRuntimeIfNeeded()</code>。<br>但是，实际上Kotlin Native给我们提供了一个更好的选择——<strong>Worker</strong>。让我们来看看官方对Worker的介绍</p><blockquote><p>不同于线程的是，Kotlin Native引入了Worker这个概念:能够并行处理请求队列的控制流(concurrently executed control flow streams with an associated request queue)。Workers与Actor模型中的Actor很像，一个Worker可以与其他Worker交换数据。<strong>在任何时候可变的对象只会被一个Worker拥有</strong>。</p></blockquote><p>好像不是很好理解，我们看官方给的例子</p><pre><code class="Kotlin">package sample.workersimport kotlin.native.concurrent.*data class WorkerArgument(val intParam: Int, val stringParam: String)data class WorkerResult(val intResult: Int, val stringResult: String)fun main() {    val COUNT = 5    //创建5个Worker对象    val workers = Array(COUNT, { _ -&gt; Worker.start() })    for (attempt in 1..3) {        val futures = Array(workers.size) { workerIndex -&gt;            workers[workerIndex].execute(TransferMode.SAFE, {                //传入要给Worker处理的参数                WorkerArgument(workerIndex, &quot;attempt $attempt&quot;)            }) { input -&gt;                //Worker处理参数                var sum = 0                for (i in 0..input.intParam * 1000) {                    sum += i                }                WorkerResult(sum, input.stringParam + &quot; result&quot;)            }        }        val futureSet = futures.toSet()        var consumed = 0        while (consumed &lt; futureSet.size) {            //等待运行结束的Workers            val ready = waitForMultipleFutures(futureSet, 10000)            ready.forEach {                //处理Worker的运行结果                it.consume { result -&gt;                    if (result.stringResult != &quot;attempt $attempt result&quot;) throw Error(&quot;Unexpected $result&quot;)                    consumed++                }            }        }    }    workers.forEach {        //终止Worker        it.requestTermination().result    }    println(&quot;Workers: OK&quot;)}</code></pre><p>这就是一个通过创建多个Workers来并行处理数据的例子。可以看到跟Actor模型还挺像的。在<code>Worker.execute</code>的第一个参数里传入生成待处理数据的lambda，然后在第二个参数里传入处理数据的lambda。然后在需要的时候调用<code>future.consume</code>,传入处理结果的lambda。这一切看上去跟Java上的许多异步框架别无二致，但实际上。。。。后面会讲到其中的坑爹之处。  </p><h1 id="全局变量和单例"><a href="#全局变量和单例" class="headerlink" title="全局变量和单例"></a>全局变量和单例</h1><blockquote><p>虽然Worker和线程的实现方式并不相同，但是行为类似，所以后面就不严格区分Worker和线程了</p></blockquote><p>在线程间共享数据最简单的方法就是全局变量了，但同时全局变量也是导致多线程出现各种问题的罪魁祸首。于是Kotlin Native引入了一系列的限制措施来保证全局变量不会影响Worker模型的工作。</p><ul><li>除非添加了特殊的注解，不然全局变量只能在主线程中被访问，如果其他线程试图访问这个变量会报<code>IncorrectDereferenceException</code>异常</li><li>一个添加了<code>@ThreadLocal</code>的全局变量会在每个线程里复制一份，所以每个线程都是独享这个变量的，<strong>某个线程对变量的改动对其他线程不可见</strong></li><li>一个添加了@SharedImmutable的变量是能在线程间共享的，但是<strong>它会被冻结</strong>，后续如果程序尝试修改这个变量也是会抛出异常的。需要注意的是，这个冻结不受<code>var</code>或是<code>val</code>的影响，就算声明的时候是<code>var</code>的只要冻结了就不能再被修改了。同时需要注意的是，<strong>一个被冻结的变量是不能被解冻的</strong></li><li>对于单例(objects)，<strong>除非添加@ThreadLocal注解,不然会被冻结从而可以在线程间共享</strong>。对于其中的属性，lazy是被允许的。</li></ul><p>相信对于从JVM转过来的人来说，我们还是习惯写单例而不是全局变量。就算是保存一个全局变量，也还是习惯于放在一个单例里作为单例的属性。于是坑就出现了。</p><pre><code class="Kotlin">object Foo{    lateinit var A:String    init{        //某些操作....        A = ......    }    fun foo(){        //某些操作.....        A = .....    }}</code></pre><p>根据上面的规则，猜猜看结果会是什么样吧。我想大部分人都会认为<code>init</code>中对A的赋值应该是可以的，至于<code>foo</code>中的赋值则要看是在哪个线程里执行了。但事实是，两个都不行，无论什么情况都不行。即使A是<code>lateinit</code>的，只要Foo被<code>frozen</code>了，里面的属性就不能再被修改。Kotlin Native是真的很严格，就算我们自始至终只有一个主线程也不行。所以<code>object</code>几乎是必须加上<code>@ThreadLocal</code>注解。<br>但是加上<code>@ThreadLocal</code>真的就能解决问题了吗，规则里说，加上<code>@ThreadLocal</code>的变量会在每个线程间复制一份，不知道你们是怎么理解的，反正我最开始看到这端话的时候觉得这个<em>复制</em>应该会在<em>新的线程创建的时候把创建这个线程的线程中的变量复制到新的线程上</em>。举个例子</p><pre><code class="Kotlin">@ThreadLocalobject Foo{    var A:String? = null}fun main(){    Foo.A = &quot;Hello&quot;    Worker.start().execute(Transport.SAFE,{}){        println(Foo.A)    }.consume{}}//我期望的输出Hello//实际上的输出null</code></pre><blockquote><p>这谁顶得住啊</p></blockquote><p>总之就是被Kotlin Native的文档秀了一脸。它说的复制，就是保证其他线程上也有一个叫做<code>Foo</code>的单例。而单例里面是什么则完全取决于它初始化完了是什么。这简直是颠覆了我对多线程的认识。那么正确的做法是什么呢。</p><pre><code class="Kotlin">@ThreadLocalobject Foo{    var A:String? = null}fun main(){    Foo.A = &quot;Hello&quot;    Worker.start().execute(Transport.SAFE,{        Foo.A    }){ str-&gt;        Foo.A = str        println(Foo.A)    }.consume{}}</code></pre><p><code>execute</code>的第一个lambada参数就给我们用来干这个事情的，这是唯一一个能让其他线程与主线程产生联系的地方。我们需要在这里把想要<em>复制</em>的值传到子线程，然后在子线程里做<em>粘贴</em>的工作。  </p><h1 id="共享可变量"><a href="#共享可变量" class="headerlink" title="共享可变量"></a>共享可变量</h1><p>但是这样的<em>复制</em>很明显是不够的，比如说我想在Worker里运行一个Event Loop，我必然要在Worker运行的时候向它传递一些数据。于是这个时候就必须要跳出Kotlin Native的管理，寻求C的帮助了。<br>虽然Kotlin的变量在线程间是独立的，但是通过<code>nativeHeap.alloc</code>分配的内存在线程间依然是共享的。所以我们就可以写出这样的代码</p><pre><code class="Kotlin">fun main(){    val ptr = nativeHeap.allocArray&lt;ByteVar&gt;(10)    memScope{        memcpy(ptr,&quot;A&quot;.cstr.ptr,&quot;A&quot;.cstr.size)    }    val future = Worker.start().execute(Transport.SAFE,{        ptr    }){ _ptr-&gt;        while(true){            println(_ptr.toKString())            sleep(100)        }    }    sleep(100)    memScope{        memcpy(ptr,&quot;B&quot;.cstr,ptr,&quot;B&quot;.cstr.size)    }    future.consume{}}</code></pre><p>通过这种方法就可以在线程间共享可变的变量了。当然这和传统的多线程模型一样，如果设计不当依然会导致各种多线程中常见的问题。<br>这样的共享方式是比较原始的，毕竟我们共享的是最原始的数据，如果想要共享一个对象的话，就需要使用<code>Object subgraph detachment</code></p><blockquote><p>一个没有外部引用的对象子图可以通过<code>DetachedObjectGraph&lt;T&gt;</code>解除连接(disconnected)变成一个<code>COpaquePointer</code>从而存储在C的结构体中，接着可以在任意的线程或Worker中通过<code>DetachedObjectGraph&lt;T&gt;.attach()</code>重新连接得到这个对象子图。</p></blockquote><p>配合前面的方法，就可以在线程间共享对象了。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>Kotlin Native的多线程模型就如Kotlin的空安全机制一样，可以说是为了解决传统多线程中的问题做出了许多设计上的规范，但是为了应对一些特殊的情况，这种规范也是要做出让步的，这种时候还是得我们自己来注意多线程间的问题。<br>那么至此，Kotlin Native的系列就算是结束了。基本上把我在做KN开发时候遇到的一些坑都写在里面了，要说体验如何的话，一是资料太少了，官方的又只有英文，有些是它没说清楚，有些是我理解有差，导致了许多莫名其妙的问题。二是库太少了，整个github上，关于Kotlin Native的库只有两个，一个是只有IOS版本的Ktor，另一个是libui的Kotlin Native Binding，而且好久没有更新了。三是太依赖C语言了，没点C/C++开发基础还真搞不定。<br>总之Kotlin Native作为一个连1.0版本都没到的语言(姑且叫它语言吧)，能用它写出一个还算像样的工具已经是挺不错的。相信只要JetBrains没有放弃KN，KN应该也会成为一门像Go一样大众的语言。</p>]]></content>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Native </tag>
            
            <tag> C </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kotlin Native求生指南(2)</title>
      <link href="/2018/12/22/Kotlin-Native%E6%B1%82%E7%94%9F%E6%8C%87%E5%8D%97-2/"/>
      <url>/2018/12/22/Kotlin-Native%E6%B1%82%E7%94%9F%E6%8C%87%E5%8D%97-2/</url>
      <content type="html"><![CDATA[<h1 id="上一篇地址"><a href="#上一篇地址" class="headerlink" title="上一篇地址"></a>上一篇地址</h1><blockquote><p><a href="https://wooyme.github.io/2018/12/22/Kotlin-Native%E6%B1%82%E7%94%9F%E6%8C%87%E5%8D%97-1/">https://wooyme.github.io/2018/12/22/Kotlin-Native%E6%B1%82%E7%94%9F%E6%8C%87%E5%8D%97-1/</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在<strong>Kotlin Native求生指南1</strong>中我们已经提到了KN的内存模型和GC。那么在本篇中，我们将一起了解一下KN的<em>Cinterop</em>。</p><h1 id="Cinterop"><a href="#Cinterop" class="headerlink" title="Cinterop"></a>Cinterop</h1><p>由于Kotlin Native内置的库实在是太少了，我们不得不大量依赖C的库，于是<em>Cinterop</em>就诞生了。<em>Cinterop</em>的作用就是把C的库翻译成可供Kotlin使用的<em>klib</em>。需要注意的是，现在Cinterop只支持C语言的库。不过实际上只要提供的头文件是C语言的即可，具体实现还是可以使用C++。</p><h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><p>要使用Cinterop需要修改一下Gradle。</p><pre><code class="Groovy">kotlin {    targets {        fromPreset(presets.linuxX64, &#39;linux&#39;)        configure([linux]) {            compilations.main.outputKinds(&#39;EXECUTABLE&#39;)            compilations.main.entryPoint = &#39;main&#39;            //我添加的代码            compilations.main{                cinterops {                    //包名称，需要与.def文件名对应,也可以增加一个参数修改def文件位置，一般不需要                    libui {                        packageName &#39;libui&#39;                    }                }            }        }    }}</code></pre><p>修改好gradle之后，应该就可以看到<code>interop/cinteropLibuiLinux</code>命令</p><h2 id="def"><a href="#def" class="headerlink" title="def"></a>def</h2><p>.def文件需要放在<code>src/nativeInterop/cinterop</code>里，并且要与gradle中的包名相同。比如这里就应该是<code>libui.def</code>。现在让我们来看看.def文件中应该是什么样的</p><pre><code class="bash">#如果涉及到多个文件，都用空格隔开#设置头文件位置headers=/usr/include/ui.h#包名package=libui#静态库文件名staticLibraries = libui.a#静态库路径libraryPaths = /home/wooyme/Projects/libui/build/out</code></pre><p>这样的.def文件是针对静态库使用的，如果要用动态链接库则需要改成下面这样</p><pre><code class="bash">#如果涉及到多个文件，都用空格隔开#设置头文件位置headers=/usr/include/ui.h#包名package=libui//编译选项，供编译器clang使用compilerOpts.linux= -I/usr/include///链接选项，供链接器ldd使用linkerOpts.linux = -L/usr/lib/x86_64-linux-gnu -lui</code></pre><p>动态链接库的使用要比静态库更加复杂一点，其实就是开发C/C++经常会用到的这些参数，在linux上，我们可以使用<strong>pkg-config</strong>来获得这些参数,以libui为例</p><pre><code class="bash">pkg-config --cflags --libs libui</code></pre><p>然后<strong>pkg-config</strong>就会打印相应参数，非常的方便。<br>一切都配置完之后，就只需要运行一下<code>interop/cinteropLibuiLinux</code>就可以了。</p><h2 id="使用Interop"><a href="#使用Interop" class="headerlink" title="使用Interop"></a>使用Interop</h2><p>完成了上面的操作之后，就可以看到IDEA的<code>External libraries</code>里多了<code>xxx-cinterop-libui.klib</code>，里面就是从C语言转换过来的Kotlin Native Library。你可能会去试图打开里面的内容，看看都转换出了什么东西，但事实是你只能看到一堆被注释标记着的，莫名其妙的代码。<br><strong>不要试图去看Cinterop转换后的knm文件</strong>，如果想了解库中提供了哪些函数的话，正确的做法是去看原始的C语言头文件。  </p><p>下面我翻一下 Kotlin Native 在 github 上的 INTEROP.md </p><blockquote><p>原文<br><a href="https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md" target="_blank" rel="noopener">https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md</a></p></blockquote><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><p>所有支持的C类型都会被转换成Kolin 类型</p><ul><li>有符号、无符号整形和浮点型都会被转换到Kotlin上，并且保持相同的长度</li><li>指针和数组会被转换成CPointer<t>?</t></li><li>枚举类型可以根据def文件配置转换成Kotlin的枚举类或是整形</li><li>结构体会被转换成对应的类</li><li>typedef会被转换成typealias</li></ul><p>这里还有一段很难翻译，它引入了一个左值(<code>lvalue</code>),大意是Cinterop会给这些转换过来的类型加一个<code>${type}Var</code>,然后可以通过<code>${type}Var.value</code>调用这个类型本身的值，就像C++的Reference</p><h3 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h3><p>CPointer<t>的T必须是上述左值之一，比如说<code>struct S*</code>对应<code>CPointer&lt;S&gt;</code>,<code>int8_t*</code>对应<code>CPointer&lt;int8_tVar&gt;</code>,<code>char**</code>对应<code>CPointer&lt;CPointerVar&lt;ByteVar&gt;</code><br>C语言的空指针，对应Kotlin的null, <code>CPointer&lt;T&gt;</code>可以使用所有kotlin的空安全操作<code>？:</code>,<code>?.</code>,<code>!!</code>等。比如</t></p><pre><code class="Kotlin">val path = getenv(&quot;PATH&quot;)?.toKString() ?: &quot;&quot;</code></pre><p>由于数组也被转换成<code>CPointer&lt;T&gt;</code>,所以<code>CPointer&lt;T&gt;</code>也支持<code>[]</code>操作,比如</p><pre><code class="Kotlin">fun shift(ptr: CPointer&lt;BytePtr&gt;, length: Int) {    for (index in 0 .. length - 2) {        ptr[index] = ptr[index + 1]    }}</code></pre><p><code>CPointer&lt;T&gt;</code>的<code>.pointed</code>属性返回T,比如说<code>CPointer&lt;ByteVar&gt;</code>就返回<code>ByteVar</code>，而<code>ByteVar</code>就是就是<code>Byte</code>的左值，然后可以通过<code>ByteVar.value</code>得到这个<code>Byte</code>。左值又可以通过<code>.ptr</code>得到对应的<code>CPointer&lt;T&gt;</code><br><code>void*</code>对应<code>COpaquePointer</code>,这是所有其他指针类型的父类，所以如果一个C函数的参数是<code>void*</code>，Kotlin中可以给他传任何<code>CPointer</code><br>指针类型转换可以使用<code>.reinterop&lt;T&gt;</code>,比如</p><pre><code class="Kotlin">val intPtr = bytePtr.reinterpret&lt;IntVar&gt;()//或val intPtr: CPointer&lt;IntVar&gt; = bytePtr.reinterpret()</code></pre><p>这个跟C语言里的强制转换是一样不安全的。<br>同样的，<code>CPointer&lt;T&gt;</code>也可以通过<code>.toLong()</code>和<code>.toCPointer&lt;T&gt;</code>与<code>Long</code>互相转换,当然这也是不安全的。</p><h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><p>内存可以通过使用<code>NativePlacement</code>接口分配,如</p><pre><code class="Kotlin">val byteVar = placement.alloc&lt;ByteVar&gt;()//或val bytePtr = placement.allocArray&lt;ByteVar&gt;(5)</code></pre><p>最常用的是<code>nativeHeap</code>,它就和<code>malloc</code>与<code>free</code>一样</p><pre><code class="Kotlin">val buffer = nativeHeap.allocArray&lt;ByteVar&gt;(size)//use buffer.....nativeHeap.free(buffer)</code></pre><p>除此之外还可以使用<code>memScope</code>，我们在前一篇已经写过，这里就不再赘述。</p><h3 id="传递指针"><a href="#传递指针" class="headerlink" title="传递指针"></a>传递指针</h3><p>虽然C语言的指针对应的是<code>CPointer&lt;T&gt;</code>，但是C语言的函数中的指针参数对应的是<code>CValuesRef&lt;T&gt;</code>。当我们传入的参数是<code>CPointer&lt;T&gt;</code>时，一切都很正常，但是除了<code>CPointer&lt;T&gt;</code>，我们还可以传别的东西。设计<code>CValuesRef&lt;T&gt;</code>就是为了能够让我们在向函数传递数组的时候不需要显式分配一块内存，Kotlin为我们提供了这些方法。</p><ul><li>${type}Array.toCValues(), type是Kotlin的基本类型</li><li>Array&lt;CPointer&lt; T &gt;?&gt;.toCValues(), List&lt;CPointer&lt; T &gt;?&gt;.toCValues()</li><li>cValuesOf(vararg elements: ${type}), type是基本类型或者指针</li></ul><p>比如可以这么写</p><pre><code class="C">//C语言void foo(int* elements, int count);...int elements[] = {1, 2, 3};foo(elements, 3);</code></pre><pre><code class="Kotlin">//Kotlinfoo(cValuesOf(1, 2, 3), 3)</code></pre><h3 id="关于字符串"><a href="#关于字符串" class="headerlink" title="关于字符串"></a>关于字符串</h3><p>不同于其他的指针，<code>const char*</code>被转换成Kotlin的String。除此之外，还有其他的一些工具可以让Kotlin的String与C语言的<code>const char*</code>进行转换</p><ul><li>fun CPointer&lt; ByteVar &gt;.toKString(): String</li><li>val String.cstr: CValuesRef&lt; ByteVar &gt;<br>要得到<code>.cstr</code>的指针，需要给<code>cstr</code>分配内存,比如<pre><code class="Kotlin">//官方这里是这么写的，但是不知道为什么我这里不行，我只能在memScope里调用.cstr.ptrval cString = kotlinString.cstr.getPointer(nativeHeap)//我的版本memScope{    val cString = kotlinString.cstr.ptr}</code></pre>在所有情况下，C语言的string都可以使用UTF-8编码<br>如果不想要使用<code>const char*</code>到<code>String</code>的自动转换，可以在def文件里设置<pre><code>noStringConversion = LoadCursorA LoadCursorW</code></pre>调用LoadCursorA，LoadCursorW就变成了这样<pre><code class="Kotlin">memScoped {  LoadCursorA(null, &quot;cursor.bmp&quot;.cstr.ptr)   // for ASCII version  LoadCursorW(null, &quot;cursor.bmp&quot;.wcstr.ptr)  // for Unicode version}</code></pre><h3 id="传递、接收结构体"><a href="#传递、接收结构体" class="headerlink" title="传递、接收结构体"></a>传递、接收结构体</h3><em>这个其实不是很重要，因为大部分成熟一点的C的库都不会直接把结构体本身作为参数或是返回值,所以我就直接跳过了，关于这一段的原文也不长</em></li></ul><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>要把Kotlin的函数变成C语言的函数指针需要使用<code>staticCFunction(::kotlinFunction)</code>,<code>staticCFunction</code>也接受<strong>lambda</strong>作为参数，顺便一提，<code>staticCFunction</code>依然继承了Kotlin的暴力美学，就像最初的40+参数的lambda一样。这里要注意的是，这个lambda必须是<em>静态</em>的，也就是不能用闭包，不能用<em>class</em>内的值，而且现在<code>staticCFunction</code>有个bug，不能直接使用<code>object</code>内的方法</p><pre><code class="Kotlin">object A{    fun foo(){}}//这样不行staticCFunction(A::foo)//这样OKstaticCFunction{    A.foo()}</code></pre><p>如果callback没有运行在主线程里，那么就需要在callback开头加上<code>kotlin.native.initRuntimeIfNeeded()</code>,初始化Kotlin Native环境，这一点和Kotlin Native的多线程模型有关系。</p><h4 id="向callback传递数据"><a href="#向callback传递数据" class="headerlink" title="向callback传递数据"></a>向callback传递数据</h4><p>由于callback不能使用闭包这类的操作，传递参数就很重要了。大多数的C API都允许用户向callback传递一些指针，但是Kotlin的类并不能直接传递给C，所以就需要一些操作把类转换成指针。</p><pre><code class="Kotlin">val stableRef = StableRef.create(kotlinReference)val voidPtr = stableRef.asCPointer()</code></pre><p>把指针转换成Kotlin类</p><pre><code class="Kotlin">val stableRef = voidPtr.asStableRef&lt;KotlinClass&gt;()val kotlinReference = stableRef.get()</code></pre><p>这样两者的转换就完成了，要注意的是,创建的<code>stableRef</code>需要用<code>.dispose()</code>手动释放，以防止内存泄露。</p><h3 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h3><p>大意就是提供了一个<code>.convert&lt;T&gt;()</code>方法，能把基本类型转换成C函数需要的类型，跟<code>.toShort()</code>,<code>toUInt()</code>等方法有相同的作用。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>我实在是没想到一个<em>Cinterop</em>可以写这么长，本来还想在这一篇里把KN的<em>多线程模型</em>给写了，这么看来还是再写第三篇好了。这里稍微说一下我的<em>Cinterop</em>使用体验，总的来说就是功能实现的很完善了，但是用户体验真的很烂。其实最大的问题就是Kotlin是一门OOP的语言，但是C语言不是。其实很多C语言的库都有OOP的影子，无论是命名方式还是那些函数与Kotlin扩展函数别无二致的第一个参数，如果KN的<em>Cinterop</em>能够更加智能一点的话应该会有更好的体验。<br>这一点，我也在Kotlin Native的github上提了issue，官方表示会考虑通过在def中增加一些选项的方式来修改<em>Cinterop</em>的行为</p><blockquote><p><a href="https://github.com/JetBrains/kotlin-native/issues/2486" target="_blank" rel="noopener">https://github.com/JetBrains/kotlin-native/issues/2486</a></p></blockquote><p>Kotlin Native，路途还很漫长</p>]]></content>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Native </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kotlin Native求生指南(1)</title>
      <link href="/2018/12/22/Kotlin-Native%E6%B1%82%E7%94%9F%E6%8C%87%E5%8D%97-1/"/>
      <url>/2018/12/22/Kotlin-Native%E6%B1%82%E7%94%9F%E6%8C%87%E5%8D%97-1/</url>
      <content type="html"><![CDATA[<h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><blockquote><p><a href="https://github.com/Wooyme/Wsocks-Naitve-Client" target="_blank" rel="noopener">https://github.com/Wooyme/Wsocks-Naitve-Client</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>C++是一门好语言，Go也是一门好语言，Kotlin Native不是。</p></blockquote><p>首先确定一个观点，写Kotlin-JVM不一定要很懂Java，比如我自己。但是写Kotlin-Native要是不懂C，那就等着吃屎吧。Kotlin Native不是一个让我们跳过C语言走上Native开发道路的神器，至少现在不是。如果你想要Native又不想学C有关的东西的话，选Go吧，我能在这里列举1000个Go的优点和0个缺点。如果一定要说Go有什么缺点的话，那就只能是程序崩溃的时候Go打印的栈信息不能像Java那样漂亮。<br>当然Kotlin Native也不是一无是处，至少它可以督促我再复习一遍C语言的知识。 </p><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><p>现在IDEA和CLION都可以支持Kotlin Native的开发。这个项目我用的是IDEA和Gradle，在开发这个项目之前我也用过CLION和Cmake的组合，要做个比较的话，还是Gradle更加适合我们这些从Kotlin-JVM转过来的玩家，毕竟对于不熟悉Cmake的人来说，看看别人写的CmakeList就已经够头疼的了，更何况要自己写。<br>顺便一提，我是在Ubuntu18.04上开发的。Windows和Linux上开发可能会有比较大的差异，还是推荐Windows上装一下Cygwin，能一定程度上减小这个差异。</p><h1 id="第一个工-小-程-坑"><a href="#第一个工-小-程-坑" class="headerlink" title="第一个工(小)程(坑)"></a>第一个工(小)程(坑)</h1><p>从IDEA里创建一个工程是很容易的。不过我遇到了一个小坑，IDEA创完工程之后会出现kt文件打不开的情况，应对的办法是<code>File-&gt;Invalidate Cache/Restart...</code><br>从这第一个坑开始，我们就踏上了Kotlin Native的漫漫坑爹路。工程创建之后会有一个默认的文件，里面是个hello world，我们编译运行一下。编译这个过程只能从Gradle里执行，在<code>other</code>里<code>runProgram</code>，顺利的话Hello World就就会成功打印出来。这里应该不会遇到什么问题，Gradle会智能的下载KN的编译器，只是可能会有点慢。</p><h2 id="我能干什么"><a href="#我能干什么" class="headerlink" title="我能干什么"></a>我能干什么</h2><p>爬过第一个坑之后，你可能迫不及待的想写点什么，比如来一个文件IO，你可能会习惯性的写一个<code>File</code>然后等待IDEA的语法提示，但是令人失望的是，IDEA除了把你的<code>File</code>标记为红色以外什么都不会做。然后你也许还会试一试其他你在JVM里经常用的类，但是它们多半没有，除了<code>StringBuilder</code>这个SB，它还是依然坚挺。<br>这个时候你可能才意识到，大清亡了，世界变了，原来的那些小伙伴都不在了。剩下的只有少的可怜的<em>Kotlin标准库</em>和陌生的<em>stdlib</em>、<em>posix</em>、<em>win32</em>或者<em>linux</em>、<em>darwin</em>以及我至今不能理解为什么要放在默认支持库里的<em>zlib</em>(我觉得唯一的可能就是JetBrains的人想试试cinterop好不好用)。</p><h2 id="认清现实"><a href="#认清现实" class="headerlink" title="认清现实"></a>认清现实</h2><p>好了，既然之前的都用不了了，那就不得不重新开始。让我们来看一看Kotlin Native的文件操作应该是什么样的。</p><pre><code class="Kotlin">//读取一个完整的文件，保存到String中fun main(){    val fp = fopen(myHome+&quot;save.json&quot;, &quot;r&quot;) ?: return println(&quot;Cannot open&quot;)    val fileStat = nativeHeap.alloc&lt;stat&gt;()    stat(myHome+&quot;save.json&quot;,fileStat.ptr)    val size = fileStat.st_size.toInt()+1    val bytes = nativeHeap.allocArray&lt;ByteVar&gt;(size)    fread(bytes,size.toULong(),size.toULong(),fp)    val text = bytes.toKString()    nativeHeap.free(fileStat.ptr)    fclose(fp)}</code></pre><p>OK,先说明一下，官方的例程里很少使用nativeHeap，它们比较喜欢用memScope{}，这两个的区别我会在之后说明。现在先让我们看完这段代码。相信如果你还记得C语言的东西的话，你肯定会说:”这tm不就是C吗”。没错，这tm就是Kotlin版C语言。Old fashion的<code>fopen</code>，<code>stat</code>，<code>fread</code>，当然这一切都无可厚非，毕竟Native的世界和Java的世界本来就大相径庭。我们也可以自己动手封装一个File类出来，我也相信Jetbrains会在某一个版本把这些基本的工具加入到Kotlin Native的标准库中去的。<br>除开C的部分，还是有些东西值得我们关注的，比如刚刚说的<code>nativeHeap</code>，以及一个有趣的方法——<code>toKString()</code>。这个方法真的可以说是Kotlin Native最后的仁慈了。我们知道Kotlin的String和C的const char<em> 是两个完全不同的体系。String类里有记录String长度的部分，好让我们知道String在什么位置结束，但是const char</em> 不同，它依赖结尾处的<code>0x00</code>来判断字符串是否结束。于是这里Kotlin Native很<strong>贴心</strong>的为我们加入了<code>toKString()</code>和<code>String.cstr</code>来保证两者间的转换。</p><h1 id="nativeHeap和memScope？"><a href="#nativeHeap和memScope？" class="headerlink" title="nativeHeap和memScope？"></a>nativeHeap和memScope？</h1><blockquote><p>参考资料 <a href="https://resources.jetbrains.com/storage/products/kotlinconf2018/slides/5_Kotlin-Native%20concurrency%20and%20memory%20model%20(1).pdf" target="_blank" rel="noopener">https://resources.jetbrains.com/storage/products/kotlinconf2018/slides/5_Kotlin-Native%20concurrency%20and%20memory%20model%20(1).pdf</a></p></blockquote><p>有一点是我们必须要知道的，那就是Kotlin Native是有GC的。在Kotlin自己的世界里，GC是隐藏在代码之下的，就像java一样，它们用引用计数法(<em>Simple local reference-counter based algorithm</em>)、”试图删除法”(<em>Cycle collector based on the trial deletion</em>)等算法保证GC的工作。但是由于Kotlin Native提供的东西实在是太少了，我们不得不依赖很多<em>C library</em>,于是手动分配内存就成了不可避免的事情。<br>手动内存管理是场噩梦，这个道理让最顽固的C++也被迫妥协，从析构到现在的智能指针，C++可以说是做了许多让步了。毫无疑问，Kotlin也是懂这个道理的。于是JetBrains推出了memScope这个东西。</p><h2 id="memScope"><a href="#memScope" class="headerlink" title="memScope"></a>memScope</h2><p>memScope的作用是当memScope的作用域结束的时候，自动释放在里面分配的所有内存，以刚才的例子来说</p><pre><code class="Kotlin">val bytes = nativeHeap.allocArray&lt;ByteVar&gt;(size)</code></pre><p>应该写成</p><pre><code class="Kotlin">val text = memScope{    val bytes = nativeHeap.allocArray&lt;ByteVar&gt;(size)    fread(bytes,size.toULong(),size.toULong(),fp)    bytes.toKString()}</code></pre><p>这样当memScope结束的时候，bytes就被自动释放了，而text则是通过<code>toKString()</code>方法实例化的一个String类，可以被KN自己的GC机制回收。所以这段代码不会导致任何内存泄露。除此之外还有很多方法是需要在memScope中才能执行的，比如说<code>CValues&lt;T&gt;.ptr</code>这是用来获取CValues的指针，关于这个稍微说一下我的看法,ptr的getter应该是<em>重新分配</em>了一块内存，然后把CValues中的值<em>复制</em>了进去，因此才需要在memScope中执行，以保证内存不会泄露，不过这又导致了一个新的坑，我在之后会提到。</p><h2 id="nativeHeap"><a href="#nativeHeap" class="headerlink" title="nativeHeap"></a>nativeHeap</h2><p>那为什么我们还需要nativeHeap这样的方式来分配内存呢。还是举个例子吧。</p><pre><code class="Kotlin">fun foo() {    val mgr = nativeHeap.alloc&lt;mg_mgr&gt;().ptr    mg_mgr_init(mgr, null)    while (flag) {        mg_mgr_poll(_mgr, 100)    }    mg_mgr_free(mgr)}</code></pre><p>mg是一个C的网络库，我们启动了一个事件循环来处理各种网络请求。可以看到，这个库自带了一个释放函数<code>mg_mgr_free</code>,被<code>mg_mgr_init</code>初始化过的内存应该由这个库本身来释放。如果我们把代码写成下面这样</p><pre><code class="Kotlin">fun foo() {    memScope{        val mgr = alloc&lt;mg_mgr&gt;().ptr        mg_mgr_init(mgr, null)        while (flag) {            mg_mgr_poll(_mgr, 100)        }        mg_mgr_free(mgr)    }}</code></pre><p>那么在循环终止，程序运行完<code>mg_mgr_free</code>之后很有可能就会因为<code>double free</code>而<em>崩溃</em>。其实我也不是很理解为什么一块内存不能释放两次，或者应该说free为什么不能对同一块内存执行两次，就算已经释放了，给我返回个false也好，何必搞个崩溃呢。总之这也算是刚开始写KN时很容易遇到的一个坑。</p><h2 id="内存管理导致的坑"><a href="#内存管理导致的坑" class="headerlink" title="内存管理导致的坑"></a>内存管理导致的坑</h2><p>在我的工程里，遇到了这么个情况。我有一个系统托盘的功能，里面有一些菜单元素也就是Item，这些Item都是要显示一些字，图标之类的，当然还有回调，每次菜单变化的时候都需要调用一个<code>update</code>函数，这个函数的执行过程实际上就是重新初始化一个整个菜单。<br>最初我的代码是这样的</p><pre><code class="Kotlin">val tray = nativeHeap.alloc&lt;tray&gt;()fun init(){    //设成2是因为tray的C实现需要以空为结尾    val menus = nativeHeap.allocArray&lt;tray_menu&gt;(2)    memScope{        menus[0].text = &quot;设置&quot;.cstr.ptr        //staticCFunction看名字就能知道是为了提供C语言中的&quot;函数指针&quot;        menus[0].cb = staticCFunction { _ -&gt;            //balabalabalabala            tray_update(tray.ptr)        }        tray.menu = menus        tray_init(tray.ptr)    }}</code></pre><p>代码看上去没什么问题，启动的时候也没什么问题，但是当运行<code>menus[0]</code>的<code>callback</code>执行的时候问题就来了。update之后”设置“这两个字变成了乱码，而罪魁祸首就是memScope。memScope在作用域结束的时候释放掉了<code>&quot;设置&quot;.cstr.ptr</code>这个指针(ptr)对应的内存，也就是说在<code>tray_init</code>之后<code>menus[0].text</code>已经是个野指针了。于是当我们执行<code>tray_update</code>的时候，这块内存会是什么样子已经不是我们能够控制的了。于是，我被迫写出了这样的代码</p><pre><code class="Kotlin">val tray = nativeHeap.alloc&lt;tray&gt;()fun init(){    //设成2是因为tray的C实现需要以空为结尾    val menus = nativeHeap.allocArray&lt;tray_menu&gt;(2)    val text = &quot;设置&quot;.cstr    val textPtr = nativeHeap.allocArray&lt;ByteVar&gt;(text.size)    memScope{        //把内存复制到不会被自动释放的地方        memcpy(textPtr,text.ptr,text.size.toULong())    }    menus[0].text = textPtr    menus[0].cb = staticCFunction { _ -&gt;            //balabalabalabala            tray_update(tray.ptr)        }        tray.menu = menus        tray_init(tray.ptr)}</code></pre><p>这只能说是很傻逼了,可能KN提供了一些更加优雅的方式只是我不知道。但总之Kotlin Native的<code>memScope</code>在某些情况下是会与C产生冲突的，而且这种问题往往很隐蔽，这也就是为什么野指针会成为困扰C/C++这么久的问题。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>OK，去掉代码大概有3000个字了。<br>第一篇就先到此为止，大概写了一下我对Kotlin Native的看法和对它内存模型的认识以及使用中遇到的几个坑。下一篇会应该会写一下Cinterop，和Kotlin Native的多线程模型。KN的多线程对于初学者来说也是个神坑，就没见过这样的线程模型，而且文档也比较含糊，不过毕竟还在频繁更新，很多东西变的太快了，文档也确实比较难写。</p>]]></content>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Native </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自己动手写Ss</title>
      <link href="/2018/12/16/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99Ss/"/>
      <url>/2018/12/16/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99Ss/</url>
      <content type="html"><![CDATA[<h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><blockquote><p><a href="https://github.com/Wooyme/Wsocks" target="_blank" rel="noopener">https://github.com/Wooyme/Wsocks</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近VPN不太太平，无论是商业的还是自己租服务器私建的，都或多或少有些遭众。据说是GFW进行了一波升级，但是我个人还是觉得，它只是又更新了一轮黑名单。总之不管怎么样，最近的科学上网是不太稳当了。<br>一周前，我用了一年的服务器遭到了封禁。一时间大有一种大难临头的感觉，再加上各种流言蜚语，于是决定自己来做一个代理工具。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>用过SS的应该都知道SS由两个部分组成——<strong>客户端</strong>与<strong>服务端</strong>。<strong>客户端</strong>往往运行着一个Socks5代理，能够从浏览器之类的程序获取请求，然后<em>加密</em>发送到<strong>服务端</strong>，<strong>服务端</strong>收到请求后，<em>解密</em>再发送给真正的<strong>目标服务器</strong>并监听<strong>目标服务器</strong>的返回，得到返回后再<em>加密</em>发送给<strong>客户端</strong>，<strong>客户端</strong>再<em>解密</em>后发送给浏览器。  </p><blockquote><p>浏览器 –(明文)–&gt; 客户端 –(密文)–&gt; 服务端 –(明文)–&gt; 目标服务器<br>目标服务器 –(明文)–&gt; 服务端 –(密文)–&gt; 客户端 –(明文)–&gt; 浏览器</p></blockquote><p>整体流程其实非常简单，只是因为有加解密的过程，显得有些繁琐。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>要实现这样一个代理，核心是解决客户端与服务端之间的交互。实现这个交互的方式有很多种，无论是直接基于UDP，UTP，TCP这样的底层协议开发，还是使用HTTP，WebSocket这样应用层的协议都是可行的。<strong>这里我们使用WebSoket协议作为客户端与服务端之间的交互协议</strong></p><h2 id="1-Why-websocket"><a href="#1-Why-websocket" class="headerlink" title="1.Why websocket ?"></a>1.Why websocket ?</h2><ul><li>第一，基于WebSocket的开发实在是太简单了。Websocket作为一个被各大浏览器，以及服务端框架支持的协议，其封装实在是太完善了。使用这些封装好的库，我们就不用考虑TCP协议中会遇到的粘包，UDP中的丢包问题。</li><li>第二，Websocket可以把我们的代理程序伪装成一个站点，因为这是网页与后端间常用的协议，已经被许多社交网站，视频网站，页游使用，所以显得更加正常。</li><li>第三，相较于HTTP这样的应用层协议，websocket占用的资源还是要更小一些的，毕竟我们自己用来跑代理的服务器往往配置不会那么高，资源能省则省。</li></ul><h2 id="2-How-to-do"><a href="#2-How-to-do" class="headerlink" title="2.How to do ?"></a>2.How to do ?</h2><p>基于Websocket的开发是非常简单的，当然前提是得有个够给劲的框架。按照我的博客的惯例，这篇文章，不出意外的会使用Vert.x和Kotlin作为技术栈(笑。顺便说一下，在GC，Cache等参数设置得当的情况下，是可以很大程度上降低JVM的内存占用量的。JVM的许多默认设置都是拿内存换CPU，所以会显得java程序很占内存。<br>那么先贴一段Demo</p><pre><code class="Kotlin">class ServerWebSocket:AbstractVerticle() {    private val logger = LoggerFactory.getLogger(ServerWebSocket::class.java)    private lateinit var netClient: NetClient    private lateinit var httpServer:HttpServer    override fun start(startFuture: Future&lt;Void&gt;){        //初始化一个TCP客户端，后面要用        netClient = vertx.createNetClient()        //初始化HTTP服务端        httpServer = vertx.createHttpServer()        //设置websocket处理器,用于处理所有与websocket相关的功能        httpServer.websocketHandler(this::socketHandler)        httpServer.listen(port,it.completer()){            logger.info(&quot;Proxy server listen at $port&quot;)            startFuture.complete()        }    }    private fun socketHandler(sock: ServerWebSocket){        sock.binaryMessageHandler { buffer -&gt;            GlobalScope.launch(vertx.dispatcher()) {                when (buffer.getIntLE(0)) {                    //处理连接请求                    Flag.CONNECT.ordinal -&gt; clientConnectHandler(sock, ClientConnect(buffer))                    //处理数据请求                    Flag.RAW.ordinal -&gt; clientRawHandler(sock, RawData(buffer))                }            }        }        //接受连接，可以在这之前做一些鉴权的工作        sock.accept()    }}</code></pre><p>服务端的整体结构就如Demo所示，在服务端接受了客户端的websocket握手之后，就会处理客户端发送的两种请求。下面是两种请求处理的实现</p><pre><code class="Kotlin">//处理连接请求private suspend fun clientConnectHandler(sock: ServerWebSocket, data:ClientConnect){    try {        //TCP Client尝试连接到目标服务器        val net = netClient.connectAwait(data.port, data.host)        //连接成功则设置handler        net.handler { buffer-&gt;        //把目标服务器返回的数据加密发送给客户端            sock.writeBinaryMessage(RawData.create(data.uuid,buffer).toBuffer())        }.closeHandler {            localMap.remove(data.uuid)        }        localMap[data.uuid] = net    }catch (e:Throwable){      logger.warn(e.message)      //连接失败则告诉客户端连接失败      sock.writeBinaryMessage(Exception.create(data.uuid,e.localizedMessage).toBuffer())      return    }    //告诉客户端连接成功    sock.writeBinaryMessage(ConnectSuccess.create(data.uuid).toBuffer())}//处理数据请求private fun clientRawHandler(sock: ServerWebSocket, data: RawData){    val net = localMap[data.uuid]    //把客户端的数据解密发送目标服务器    net?.write(data.data)?:let{        sock.writeBinaryMessage(Exception.create(data.uuid,&quot;Remote socket has closed&quot;).toBuffer())    }}</code></pre><p>其中uuid是为了保证数据在传输过程中能够找到请求发起者，不然客户端收到了返回的数据，会出现不知道是谁发起的问题。当然这个问题也可以用其他方式实现，理论上说，封装的再完善一点的话，是能够只靠闭包解决。<br>以下是RawData类，展示数据加密过程,加密方式是<code>AES/CBC/PKCS5Padding</code>，javax库中提供的加密方式</p><pre><code class="Kotlin">class RawData(private val buffer:Buffer) {    private val decryptedBuffer = Buffer.buffer(Aes.decrypt(buffer.getBytes(Int.SIZE_BYTES,buffer.length())))    private val uuidLength = decryptedBuffer.getIntLE(0)    val uuid = decryptedBuffer.getString(Int.SIZE_BYTES,Int.SIZE_BYTES+uuidLength)    val data = decryptedBuffer.getBuffer(Int.SIZE_BYTES+uuidLength,decryptedBuffer.length())    fun toBuffer() = buffer    companion object {        fun create(uuid:String,data:Buffer):RawData {        val encryptedBuffer = Aes.encrypt(Buffer.buffer()            .appendIntLE(uuid.length)            .appendString(uuid)            .appendBuffer(data).bytes)        return RawData(Buffer.buffer()            .appendIntLE(Flag.RAW.ordinal)            .appendBytes(encryptedBuffer))        }    }}</code></pre><p>到此，服务端的功能就实现了。接下来就是如何实现客户端</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>客户端与浏览器交互的部分，我们选择Socks5协议，这个Vert.x库不带支持，所以需要自己实现以下。实现代码可以看Wsocks的ClientSocks5类，这里只展示客户端与服务端的交互。</p><pre><code class="Kotlin">//核心部分httpClient.websocket(remotePort,remoteIp,&quot;/proxy&quot;){ webSocket -&gt;      webSocket.binaryMessageHandler {buffer-&gt;        if (buffer.length() &lt; 4) {          return@binaryMessageHandler        }        when (buffer.getIntLE(0)) {          //连接成功          Flag.CONNECT_SUCCESS.ordinal -&gt; wsConnectedHandler(ConnectSuccess(buffer).uuid)          //出现异常          Flag.EXCEPTION.ordinal -&gt; wsExceptionHandler(Exception(buffer))          //目标服务器返回数据          Flag.RAW.ordinal -&gt; wsReceivedRawHandler(RawData(buffer))          else -&gt; logger.warn(buffer.getIntLE(0))        }      }    }</code></pre><pre><code class="Kotlin">//处理器部分private fun wsConnectedHandler(uuid:String){    val netSocket = connectMap[uuid]?:return    netSocket.handler {      //将浏览器的数据，加密发送到服务端      ws.writeBinaryMessage(offset,RawData.create(uuid,it).toBuffer())    }    //告诉浏览器连接成功    val buffer = Buffer.buffer()      .appendByte(0x05.toByte())      .appendByte(0x00.toByte())      .appendByte(0x00.toByte())      .appendByte(0x01.toByte())      .appendBytes(ByteArray(6){0x0})    netSocket.write(buffer)}private fun wsReceivedRawHandler(data: RawData){    val netSocket = connectMap[data.uuid]?:return    bufferSizeHistory+=data.data.length()    //把解密后的数据发送给浏览器    netSocket.write(data.data)}private fun wsExceptionHandler(e:Exception){    //出现异常，断开浏览器本次连接    connectMap.remove(e.uuid)?.close()}</code></pre><p>至此，浏览器和客户端，客户端和服务端，服务端和目标服务器之间的数据交互就完成了。</p><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>由于我只是个普通写后台的，并不是专业的密码学研究者，所以对于加密这块内容，也不敢做过多的分析。但是结合GFW所处的实际情况，我觉得自己还是可以稍微评论一下的。实际上Github上也还有一些类Shadowsocks的产品，比如说<code>Lightsocks</code>，star数也挺高。它们有些产品采用了自己开发的加密算法，而不是<code>Aes</code>，<code>Rc4</code>，之类的主流加密。按照作者的意思是，采用自己开发的加密能够更加有效的方式GFW解密。<br>这么说当然也是有一定道理的，但是实际上这些自研的算法往往比较脆弱，更容易遭到像词频分析之类的方法解密。但是其实我们还要考虑一个问题，GFW只是一个部署在主干网络上的计算机集群，它不是神，它的模型、运算量都是有限的， 每秒都有大量的流量经过它，要通过分析流量<em>解密</em>数据很明显是不可能的事情，就算我们总说Aes128过时了，Aes128有漏洞，但是针对Aes128的攻击依然条件苛刻。<br>在这里还可以举个例子，SSL我们都认为它是安全的，但是针对SSL或者说HTTPS的<em>中间人</em>攻击是存在的，只是这种攻击实现的原理绝对不是分析加密后的数据，而是通过分析<strong>握手环节</strong>的数据拿到秘钥来解密后续的数据。同样的，GFW也是这么做的，而对于这种情况，只要秘钥不出现在流量中，GFW就很难有操作的空间了。<br>还可以再举另一个例子，杀毒软件判断一个程序是否是病毒、木马，靠的是<strong>特征码</strong>和<strong>行为分析</strong>，<strong>特征码</strong>就是病毒为了执行某一系列操作而必定存在的代码，而<strong>行为分析</strong>则是把病毒放在沙箱环境内，观察病毒做了哪些操作。GFW也是如此，在流量中查找特征码比解密流量要容易的多，像Shadowsocks这样的程序产生的流量特征是很明显的，除此之外，GFW还拥有主动探测的能力，在发现特征后，它会尝试构造特殊的报文发送给目标，并根据目标的行为判断是否为Shadowsocks服务端。这种嗅探的成本也是非常低的。 </p><h2 id="完善"><a href="#完善" class="headerlink" title="完善"></a>完善</h2><p>就如我在前面写的，使用Websocket这样的协议能够把我们的流量伪装成正常的网站流量。当然这并不完善，因为这样的程序一旦多起来，GFW也一定会开发出针对Websocket的特征分析。这个时候就需要一种更加灵活的方式，比如在数据头部填充，在报文的某几个位置插入字节。这些都可以破坏报文的特征，就像我们给病毒修改入口点、加壳、加花，来起到免杀的效果一样。<br>针对GFW的主动嗅探，则可以考虑动态白名单之类的机制，想要发送请求，就要到另一台服务器上登录，登录过程可以经过国内一台服务器做跳板，这样对于GFW来说，整个过程就是两组不相干的流量。如果要将这样的流量放在一起建立模型的话，也许要到2050年吧。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>国内普遍言论还是把GFW神化了，这东西确实很强，也不知道是哪些研究所在负责维护，但是毕竟算法再强，模型再完美也要受硬件所限。这方面，Google没有解决的问题，中国政府也尚且没有这样的实力。很多时候，解决问题还是不要硬刚，换个角度想一下，可能效果更好。</p>]]></content>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Vert.x </tag>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx配置fastcgi-perl</title>
      <link href="/2018/09/08/Nginx%E9%85%8D%E7%BD%AEfastcgi-perl/"/>
      <url>/2018/09/08/Nginx%E9%85%8D%E7%BD%AEfastcgi-perl/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>廉价VPS的小内存实在是供不起JVM，所以只好找别的出路了。php呢不是很喜欢，python又不是很想用，于是选了个硬核一点的Perl作为后端语言。反正前后分离，没了渲染压力后端想怎么玩怎么玩。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a><strong>正文</strong></h2><pre><code class="Shell">apt-get install nginx libfcgi-perl wget</code></pre><p>改nginx配置</p><pre><code>server {  listen   80;  root   /var/www/example.com;  location / {      index  index.html index.htm index.pl;  }    location ~ \.pl|cgi$ {      try_files $uri =404;      gzip off;      fastcgi_pass  127.0.0.1:8999;      fastcgi_index index.pl;      fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;      include fastcgi_params;      }}</code></pre><p>创建目录,给权限</p><pre><code class="Shell">mkdir /var/www/example.comchown -R www-data:www-data /var/www/example.com</code></pre><p>下载配置FastCGI</p><pre><code class="Shell">wget http://nginxlibrary.com/downloads/perl-fcgi/fastcgi-wrapper -O /usr/bin/fastcgi-wrapper.plwget http://nginxlibrary.com/downloads/perl-fcgi/perl-fcgi -O /etc/init.d/perl-fcgichmod +x /usr/bin/fastcgi-wrapper.plchmod +x /etc/init.d/perl-fcgiupdate-rc.d perl-fcgi defaults/usr/lib/insserv/insserv perl-fcgi</code></pre><p>启动!</p><pre><code class="Shell">service nginx startservice perl-fcgi start</code></pre><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a><strong>坑</strong></h2><p>顺利的话，就启动了。不顺利的话，启动perl-fastcgi的时候会失败，报错说<code>this account is currently not available</code>。Google了一圈好像没人在配置cgi的时候遇到这样的问题，比较多的是有些脑洞大开的人想从ssh登录到www-data这个用户上。<br>顺便说一下www-data这个用户，如果看Nginx的进程的话</p><pre><code class="Shell">ps -ef | grep nginx</code></pre><p>会看到nginx的几个worker-process所属的用户都是www-data，这个就是专门给web应用提供的用户。<br>看了一下这些登录不了的解决方案，发现cgi的问题应该也可以用同样的方法解决。</p><p>在<code>/etc/passwd</code>里，我们可以找到www-data的那行，然后就会发现它的结尾是<code>/usr/sbin/nologin</code>，我们要改成<code>/bin/bash</code>。这样这个用户就有运行perl脚本的能力了。重新启动一下服务，就OK了。</p>]]></content>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> perl </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>See what&#39;s comming in Kotlin 1.3-M1 译文</title>
      <link href="/2018/08/11/See-what-s-comming-in-Kotlin-1-3-M1/"/>
      <url>/2018/08/11/See-what-s-comming-in-Kotlin-1-3-M1/</url>
      <content type="html"><![CDATA[<blockquote><p>原文在:<br><a href="https://blog.jetbrains.com/kotlin/2018/07/see-whats-coming-in-kotlin-1-3-m1/" target="_blank" rel="noopener">https://blog.jetbrains.com/kotlin/2018/07/see-whats-coming-in-kotlin-1-3-m1/</a>   </p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天，在一长串的关于Kotlin 1.2.x的更新之后，是时候看看Kotlin 1.3会带来什么。我们很高兴的宣布Kotlin 1.3的尝鲜体验版Kotlin 1.3-M1正式发布。<br>Kotlin 1.3相比之前版本有许多的进步，其中包括 <em>完全体的协程</em>，<em>实验版的无符号类型</em>(Java至今没有的东西),<em>inline class</em> 以及其他更多特性。<br>这里要感谢为我们的新版本贡献代码的社区群众:Raluca Sauciuc, Toshiaki Kameyama, Leonardo Lopes, Jake Wharton, Jeff Wright, Lucas Smaira, Mon_chi, Nico Mandery, Oskar Drozda.  </p><blockquote><p>完整的ChangeLog<br><a href="https://github.com/JetBrains/kotlin/blob/1.3-M1/ChangeLog.md" target="_blank" rel="noopener">https://github.com/JetBrains/kotlin/blob/1.3-M1/ChangeLog.md</a></p></blockquote><h1 id="稳定版的协程-1-3之前一直是实验版"><a href="#稳定版的协程-1-3之前一直是实验版" class="headerlink" title="稳定版的协程(1.3之前一直是实验版)"></a>稳定版的协程(1.3之前一直是实验版)</h1><p>终于，在1.3中协程不再是实验性的。无论是语法糖还是标准库都将趋于稳定并且保持向后兼容。自从1.1版本加入协程之后，协程这一特性一直保持着显著的提高。</p><blockquote><p>几个重要的特性<br>KT-16908 Support callable references to suspending functions<br>KT-18559 Serializability of all coroutine-related classes</p></blockquote><p>现在，我们简化了协程的核心API，并且去掉了<code>experimental</code>包。同时，我们还在协程的跨平台性中做了许多工作，包括对基于Kotlin/Native（Kotlin的LLVM版本)的IOS支持</p><h3 id="转战新协程"><a href="#转战新协程" class="headerlink" title="转战新协程"></a>转战新协程</h3><p>就像我们之前说的一样，所有与协程有关的函数都都已经丢掉了<code>experimental</code>的包名。同时，<code>buildSequence</code>和<code>buildIterator</code>函数也放到了他们在<code>kotlin.sequences</code>包中常驻的地方。<br>在语言的层面上，我们仍然使用<code>suspend</code>关键字来支持协程并且所有的规则几乎与实验版中的规则一致。<br>我们简化了稳定版中的<code>Continuation&lt;T&gt;</code>接口。现在它只保留了 <code>resumeWith(result: SuccessOrFailure&lt;T&gt;)</code>这一个成员函数。原先的<code>resume(value: T)</code>和<code>resumeWithException(exception: Throwable)</code>现在以扩展的形式出现。这个改动只影响了那些少数自己定义协程构造器，那些将回调函数包装成挂起函数(suspending functions)的代码大多数不会发生改变。比如说，为类<code>CompletableFuture&lt;T&gt;</code>定义挂起函数<code>await()</code>还是会像之前一样。</p><pre><code class="Kotlin">suspend fun &lt;T&gt; CompletableFuture&lt;T&gt;.await(): T = suspendCoroutine { cont -&gt;    whenComplete { value, exception -&gt;        when {            exception != null -&gt; cont.resumeWithException(exception)            else -&gt; cont.resume(value)        }    }}</code></pre><p>稳定版的协程采用了不同的二进制接口，它们并不能与实验版的协程二进制兼容。为了确保代码能够平稳的转移，我们将在1.3中增加一个兼容层，并且实验版中的类都将保留在标准库中。在Kotlin/JVM中使用Kotlin 1.1-1.2的已经编译好的代码都能在Kotlin 1.3中运行。<br>但是Kotlin 1.3中不提供任何调用1.2(原文中写了1.3，应该是写错了)版本中编译好的实验性协程的支持。如果想要在1.3稳定版协程中使用旧版本协程的库，你需要在1.3版本下重新编译它们。这只是一个暂时的问题，我们会尽快处理。(JetBrains团队的尽快，往往是真的很快)<br>我们还将提供<code>kotlinx.coroutines</code>库的<code>x.x.x-eap13</code>版本。<br>IDE将提示你转移到新的协程上去。我们会在1.3正式版发布前进一步扩大协程的使用范围。</p><h1 id="一些新特性"><a href="#一些新特性" class="headerlink" title="一些新特性"></a>一些新特性</h1><p>更重要的特性会出现在实验性部分，这里只提一些为大家带来便利的小特性</p><h3 id="捕获when中的参数"><a href="#捕获when中的参数" class="headerlink" title="捕获when中的参数"></a>捕获when中的参数</h3><p>这段懒得翻译了，就看一下代码吧。已经非常明了了</p><pre><code class="Kotlin">fun Request.getBody() =    when (val response = executeRequest()) {        is Success -&gt; response.body        is HttpError -&gt; throw HttpException(response.status)    }</code></pre><h3 id="伴生接口中的-JvmStatic和-JvmField"><a href="#伴生接口中的-JvmStatic和-JvmField" class="headerlink" title="伴生接口中的@JvmStatic和@JvmField"></a>伴生接口中的@JvmStatic和@JvmField</h3><pre><code class="Kotlin">interface Service {    companion object {        @JvmField        val ID = 0xF0EF        @JvmStatic        fun create(): Service = ...    }}</code></pre><p>Kotlin中的接口现在可以把静态成员暴露给Java(捞你Java一手)。</p><h3 id="可嵌套的注解声明"><a href="#可嵌套的注解声明" class="headerlink" title="可嵌套的注解声明"></a>可嵌套的注解声明</h3><p>在Kotlin 1.3之前，注解类不能拥有类体(bodies)。1.3版本放宽了这一限制，现在我们允许注解类拥有嵌套类，接口和伴生对象</p><pre><code class="Kotlin">annotation class Outer(val param: Inner) {    annotation class Inner(val value: String)}annotation class Annotation {    companion object {        @JvmField        val timestamp = System.currentTimeMillis()    }}</code></pre><h3 id="函数类型可以有更多参数"><a href="#函数类型可以有更多参数" class="headerlink" title="函数类型可以有更多参数"></a>函数类型可以有更多参数</h3><p>现在一个函数类型，可以拥有超过22个参数了！(Kotlin的一个梗，程序员的暴力美学)。我们现在将上限提高到了JVM的极限——255。如果你想知道我们是怎么做到在不定义额外233个类的情况下实现这个功能的话，请看这里</p><blockquote><p><a href="https://github.com/Kotlin/KEEP/blob/master/proposals/functional-types-with-big-arity-on-jvm.md" target="_blank" rel="noopener">https://github.com/Kotlin/KEEP/blob/master/proposals/functional-types-with-big-arity-on-jvm.md</a></p></blockquote><h1 id="实验性特性"><a href="#实验性特性" class="headerlink" title="实验性特性"></a>实验性特性</h1><p>就像协程已经证明了的一样，通过把EAP的重要特性设为实验性能帮助我们从社区中收集到可贵的反馈。我们将继续使用这个技术，让Kotlin的所有特性都经过实战的检验。Kotlin 1.3将带来三个激动人心的实验性特性。你需要明确选择使用这些特性，不然编译器会提示警告或者错误。</p><h3 id="内联类"><a href="#内联类" class="headerlink" title="内联类"></a>内联类</h3><p>内联类能让你在不用真正创建一个类的情况下包装某个类型。</p><pre><code class="Kotlin">inline class Name(internal val value: String)</code></pre><p>当使用这样一个类的时候，编译器会内联它的内容，并且所有操作会直接作用在被包装的类本身。于是，就像下面这样</p><pre><code class="Kotlin">val name: Name = Name(&quot;Mike&quot;)fun capitalize(name: Name): Name = Name(name.value.capitalize())</code></pre><p>编译结果会与下面的代码一样</p><pre><code class="Kotlin">val name: String = &quot;Mike&quot;fun capitalize(name: String): String = name.capitalize()</code></pre><p>内联类与类型别名有些相似，但它们不是赋值兼容的。所以你不能把<code>String</code>赋值给<code>Name</code>,反之亦然。<br>由于内联类实际并不存在，所以不能对它们使用<code>===</code>操作符。<br>还有其他内联类产生包装器的地方，就像<code>Int</code>的装箱一样</p><pre><code class="Kotlin">val key: Any = Name(&quot;Mike&quot;) // boxing to actual Name wrapperval pair = Name(&quot;Mike&quot;) to 27 // Pair is a generic type, so Name is boxed here too</code></pre><p>这个特性可以通过添加编译选项<code>-XXLanguage:+InlineClasses</code>来开启</p><h3 id="无符号数字类型"><a href="#无符号数字类型" class="headerlink" title="无符号数字类型"></a>无符号数字类型</h3><p>内联类最明显的应用就是无符号类型。现在标准库已经加入了<code>UInt</code>，<code>ULong</code>，<code>UByte</code>和<code>UShort</code>。通过内联类，这些类型定义了自己的运算符，可以将存储的数值转化为无符号类型。</p><pre><code class="Kotlin">val operand1 = 42val operand2 = 1000 * 100_000val signed: Int = operand1 * operand2val unsigned: UInt = operand1.toUInt() * operand2.toUInt()</code></pre><p>除了新的类型，我们还添加了一些新的语言特性来让它们变得特殊</p><ul><li><p>允许在变长参数中使用无符号类型，这与其他内联类不用</p><pre><code class="Kotlin">fun maxOf(vararg values: UInt): UInt { ... }</code></pre></li><li><p>无符号类型的关键字</p><pre><code class="Kotlin">val uintMask = 0xFFFF_FFFFuval ulongUpperPartMask = 0xFFFF_FFFF_0000_0000uL</code></pre></li><li><p>无符号常量</p><pre><code class="Kotlin">const val MAX_SIZE = 32768u//Koltin 1.3-M1暂不支持无符号常量的复杂表达式const val MAX_SIZE_BITS = MAX_SIZE * 8u // Error in 1.3-M1</code></pre></li></ul><p>为了使用无符号类型，你需要选择启动它们</p><ul><li>either annotate the code element that uses unsigned types with the @UseExperimental(ExperimentalUnsignedTypes::class) annotation</li><li>or specify the -Xuse-experimental=kotlin.ExperimentalUnsignedTypes compiler option.</li></ul><h1 id="新的标准库API"><a href="#新的标准库API" class="headerlink" title="新的标准库API"></a>新的标准库API</h1><p>现在让我们看看1.3中的新API</p><h3 id="SuccessOrFailure"><a href="#SuccessOrFailure" class="headerlink" title="SuccessOrFailure"></a>SuccessOrFailure</h3><p>内联类<code>SuccessOrFailure</code>是一个有效的判别函数执行成功或失败<code>Success T | Failure Throwable</code>的集合。它被用来捕获函数的执行结果无论成功或失败，以便于我们在之后的代码中处理它们。</p><pre><code class="Kotlin">val files = listOf(File(&quot;a.txt&quot;), File(&quot;b.txt&quot;), File(&quot;42.txt&quot;))val contents: List&lt;SuccessOrFailure&lt;String&gt;&gt; = files.map { runCatching { readFileData(it) } }println(&quot;map successful items:&quot;)val upperCaseContents: List&lt;SuccessOrFailure&lt;String&gt;&gt; =    contents.map { r -&gt; r.map { it.toUpperCase() } }upperCaseContents.printResults()println()println(&quot;map successful items catching error from transform operation:&quot;)val intContents: List&lt;SuccessOrFailure&lt;Int&gt;&gt; =    contents.map { r -&gt; r.mapCatching { it.toInt() } }intContents.printResults()</code></pre><p>引入这个类最主要的原因是我们想要在新的协程接口中使用<code>resumeWith(result: SuccessOrFailure&lt;T&gt;)</code>而不是<code>resume(T)</code>和<code>resumeWithException(Throwable)</code></p><h3 id="多平台随机数生成器"><a href="#多平台随机数生成器" class="headerlink" title="多平台随机数生成器"></a>多平台随机数生成器</h3><p>没啥好说的，原本Kotlin/JVM的东西现在支持Kotlin的所有平台了</p><h3 id="Boolean类型的伴生对象"><a href="#Boolean类型的伴生对象" class="headerlink" title="Boolean类型的伴生对象"></a>Boolean类型的伴生对象</h3><p>为Boolean加了个内容为空的伴生对象。今后可能有用，像各种类型比较，转换之类的地方。</p><h3 id="基本类型伴生对象的常亮"><a href="#基本类型伴生对象的常亮" class="headerlink" title="基本类型伴生对象的常亮"></a>基本类型伴生对象的常亮</h3><ul><li><p>为Byte, Short, Int, Long, Char几个类型加入了SIZE_BITS和SIZE_BYTES</p></li><li><p>为Char增加了MAX_VALUE(‘\u0000’)和MIN_VALUE(‘\uFFFF’)</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JetBrains的效率是真的挺高。2018年6月发布Kotlin 1.2.50，转眼1个月之后又发布了1.3-M1。1.3版本比较重要的就是协程不再带有实验性标志。同时最有趣的就是内联类了。</p>]]></content>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SQL简单调优(1)</title>
      <link href="/2018/07/30/SQL%E7%AE%80%E5%8D%95%E8%B0%83%E4%BC%98-1/"/>
      <url>/2018/07/30/SQL%E7%AE%80%E5%8D%95%E8%B0%83%E4%BC%98-1/</url>
      <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a><strong>1.前言</strong></h2><p>先说一下背景，这几天在公司里接触了几个比较大的表，数据量在10万条到400万条之间，公司用的数据库是Oracle。所以如果这篇博客中描述的情况与你所遇到的情况不符的话，很有可能是数据量和数据库的问题。</p><h2 id="2-联表与子查"><a href="#2-联表与子查" class="headerlink" title="2.联表与子查"></a><strong>2.联表与子查</strong></h2><p>首先说一下业务的需求:<em>输入一个时间段，找到这个时间段里流失的客户。客户流失的逻辑:如果这个客户从最后一次下单到下单后的45天内没有下单则认为这个客户流失了</em>  数据库里有一张表(sap_vbak)维护着所有的订单，其中有订单号（vbeln),对应客户(kunnr),创建日期(erdat)。<br>一开始拿到这个需求的时候想的很简单，大致分为两步:1.取出时间段内所有的订单 2.得到所有订单时间后计算出45天的时间段再取出这个时间段内所有的订单，如果不存在则认为客户流失，于是SQL语句就变成这样</p><pre><code class="SQL">SELECT vbeln,kunnr,erdat FROM (  SELECT k.vbeln,k.kunnr,k.erdat,(SELECT temp.vbeln FROM sap_vbak temp WHERE temp.erdat &lt; k.erdat and temp.erdat &gt;= k.erdat - 45 and temp.kunnr = k.kunnr and rownum = 1) tmp FROM sap_vbak k  WHERE k.erdat &gt;= to_date(&#39;2018-01-01&#39;,&#39;yyyy-MM-dd&#39;) and k.erdat &lt;= to_date(&#39;2018-01-05&#39;,&#39;yyyy-MM-dd&#39;) group by k.vbeln,k.kunnr,k.erdat) WHERE tmp is null;</code></pre><p>三层的查询，逻辑非常清楚。但是这里问题就来了，由于数据量太大了，这个SQL要想跑出结果得花15分钟。其中对于速度影响最大的就是这里的 <em>标量子查询</em> 了。<br>于是在公司前辈的指点下，把子查询改成了联表</p><pre><code class="SQL">SELECT k.vbeln,k.kunnr,k.erdat FROM sap_vbak kLEFT JOIN sap_vbak temp ON temp.erdat &lt; k.erdat and temp.erdat &gt;= k.erdat - 45 and temp.kunnr = k.kunnrWHERE k.erdat &gt;= to_date(&#39;2018-01-01&#39;,&#39;yyyy-MM-dd&#39;) and k.erdat &lt;= to_date(&#39;2018-01-15&#39;,&#39;yyyy-MM-dd&#39;) and temp.vbeln is null;</code></pre><p>这段SQL的效果非常好，跑出结果大概只要40秒。思路其实也很简单，把原先子查询的部分换成LEFT JOIN，得到一张临时表这张表记录着每个订单与它45天内同一个客户的所有订单，然后只要在这张表中选出tmp字段(即同一客户的订单)是null的结果即可。</p><p>后来发现另一种不通过联表的方法也可以提高查询效率</p><pre><code class="SQL">SELECT k.vbeln,k.kunnr,k.erdat FROM sap_vbak kWHERE k.erdat &gt;= to_date(&#39;2018-01-01&#39;,&#39;yyyy-MM-dd&#39;) and k.erdat &lt;= to_date(&#39;2018-01-05&#39;,&#39;yyyy-MM-dd&#39;)and not exists (SELECT temp.vbeln FROM sap_vbak temp WHERE temp.erdat &lt; k.erdat and temp.erdat &gt;= k.erdat - 45 and temp.kunnr = k.kunnr);</code></pre><p>把原先的标量子查询改成了WHERE后面的 <em>not exists</em> ，查询时间也从原本的15分钟，变到了5分钟以内。</p>]]></content>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu求生指南(1)</title>
      <link href="/2018/07/16/Ubuntu%E6%B1%82%E7%94%9F%E6%8C%87%E5%8D%97-1/"/>
      <url>/2018/07/16/Ubuntu%E6%B1%82%E7%94%9F%E6%8C%87%E5%8D%97-1/</url>
      <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a><strong>1.前言</strong></h2><p>先抱怨两句，Linux对于各种A卡的支持实在是太烂了。Radeon的驱动下，A卡的跑分还不到Intel的一半。换用AMD自家的amdgpu-pro直接就进不了桌面系统了。搞了好几天还是搞不定，最后还是决定算了，毕竟核显跑Minecraft还是有40-60帧。不用独显说不定还能省点电。<br>如果你不幸也是A卡用户，这篇文章了应该能给你点帮助。如果你N卡用户，这篇文章也还是有点用的，说不定哪天就能救人一命。<br>如果你想看看自己的显卡/各种设备的情况的话，用<code>lspci</code>这个命令,参数<code>-k</code>的使用率比较高。</p><h2 id="2-AMDGPU-PRO"><a href="#2-AMDGPU-PRO" class="headerlink" title="2.AMDGPU-PRO"></a><strong>2.AMDGPU-PRO</strong></h2><blockquote><p>Ubuntu 18.04对应下载地址<br><a href="https://support.amd.com/en-us/kb-articles/Pages/Radeon-Software-for-Linux-18.20-Early-Preview-Release-Notes.aspx" target="_blank" rel="noopener">https://support.amd.com/en-us/kb-articles/Pages/Radeon-Software-for-Linux-18.20-Early-Preview-Release-Notes.aspx</a></p></blockquote><blockquote><p>Ubuntu 16.04对应下载地址<br><a href="https://support.amd.com/en-us/kb-articles/Pages/AMDGPU-PRO-Driver-for-Linux-Release-Notes.aspx" target="_blank" rel="noopener">https://support.amd.com/en-us/kb-articles/Pages/AMDGPU-PRO-Driver-for-Linux-Release-Notes.aspx</a></p></blockquote><p>相信看看链接大家也就懂了。18.04还是EPR，能不能用就看造化了。16.04应该能用，但是我不确定，因为我是ubuntu gnome16.04。<code>稍微科普一下，ubuntu17.10前的桌面系统是Unity，然后因为大家喜好有差，就出现了Ubuntu Gnome和KUbuntu(Ubuntu Kde)这两个发行版</code>然后amdgpu-pro在我的电脑上似乎不太行，如果你是官方的Ubuntu发行版，说不定可以试试。<br>安装完之后不要忘了修改grub</p><blockquote><pre><code>   Edit /etc/default/grub as root and modify GRUB_CMDLINE_LINUX_DEFAULT in order to add &quot;amdgpu.vm_fragment_size=9&quot; (without the quotes). The line may look something like this after the change:    GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash amdgpu.vm_fragment_size=9&quot;    Update grub and reboot as root:    update-grub;reboot</code></pre></blockquote><p>官方丧心病狂的把这段话写在网页的后半部分，可能很多人都没有注意。</p><p>接下来就是非常关键的部分了。如果你安装完之后成功的进入了桌面系统，你可能会在gnome的 <em>设置-&gt;详细信息-&gt;图形</em> 里看到LLVM的字样(顺便说一句，看到LLVM的时候我就总觉得这玩意不太靠谱)，当然根据显卡型号不同，你可能会看到不一样的结果。只要你没看到Intel之类的东西，你多半是成功了。  </p><p>对于成功者来说，这部分就到此结束了。但是如果你安装了amdgpu-pro之后，出现开机只能进bash或者登录界面循环的情况，你可能就不得不浪费一些时间了。<strong>Ubuntu Ask</strong> 论坛上有许多关于这种问题的帖子，里面说不定有些解决方案。而这里，我只给一种最简单的方案。<br>在amdgpu-pro安装之后，系统会多一个<code>amdgpu-pro-uninstall</code>的命令。我们要在boot的时候选择<code>recovery mode</code>。进入recovery mode之后，可以先选择一下clean，这样他会自动挂载分区。clean结束之后，就进入root然后运行<code>amdgpu-pro-uninstall</code>就可以了，同时不要忘了把grub改回来。</p><h2 id="2-某不靠谱PPA"><a href="#2-某不靠谱PPA" class="headerlink" title="2.某不靠谱PPA"></a><strong>2.某不靠谱PPA</strong></h2><p>可能在尝试amdgpu-pro之前，你还试过很多操作。毕竟那些年代久远的文章总是会介绍一些奇奇怪怪的方法。。。然后，我就遭众了。<br>这里的方法不只是对安装驱动的时候遇到的问题有效，所有因为安装了某ppa的应用而导致问题的情况都可以用这个方法解决。<br><em>PPA回滚</em></p><blockquote><p>sudo apt-get install ppa-purge<br>sudo ppa-purge ppa:你要删除的ppa</p></blockquote><p>跟上面一样，进了<code>recovery mode</code>之后就可以运行这两行命令，把刚刚安装的程序删掉就可以了。</p><h2 id="3-我并不知道我刚刚装了什么东西"><a href="#3-我并不知道我刚刚装了什么东西" class="headerlink" title="3.我并不知道我刚刚装了什么东西"></a><strong>3.我并不知道我刚刚装了什么东西</strong></h2><p>这是最难受的。但是只要我们安装的东西全都是通过apt安装的，那么这个问题就还可以解决。首先apt的安装都是有日志的，我的位置在<code>/var/log/apt/history.log</code>,我们只要找到最近一段时间里安装的包并且把他们删掉就行了。<br>我们可以在<code>recovery mode</code>里用vim打开这个log，找到文件尾处的安装信息。有时候会出现一次安装的包太多的情况，这个时候就需要用一些命令处理一下。</p><blockquote><p>这里给一个范例<br><code>grep -A 3 &#39;Start-Date: 2018-07-16  22:56:10&#39; /var/log/apt/history.log |sudo tail -1 &gt; tmp.log</code><br>再用Vim删除一些不用的信息<br><code>tr &#39; &#39; &#39;\n&#39; &lt;tmp.log | sed &#39;/,$/d&#39; &gt; tmp0.log</code><br>再删除最后一行</p></blockquote><p>最终就可以得到一个完整的安装列表。<br>写一个脚本</p><pre><code class="Shell"># Run as root# Store packages name in $pp=&quot;$(&lt;/tmp/final.packages.txt)&quot;# Nuke itapt-get --purge remove $p#clears out the local repository of retrieved package filesapt-get clean# Just in case ...apt-get autoremove</code></pre><p>运行一下，大功告成。</p>]]></content>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何快速学习一门语言</title>
      <link href="/2018/07/07/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E4%B8%80%E9%97%A8%E8%AF%AD%E8%A8%80/"/>
      <url>/2018/07/07/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E4%B8%80%E9%97%A8%E8%AF%AD%E8%A8%80/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>这不是一篇英语或是某个小语种学习教程</strong><br>这篇文章还是给那些已经入了程序的门的人看的，对于那些还没有了解过任何一种程序语言的人来说，可能看的意义不大。当然对于前者可能意义也不大:)</p><h2 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h2><p>如果我还没太脱离时代的话，大多数人学的第一门语言应该是C。要我个人说的话，初学者学C真是一件要命的事。许多人抱着对程序的好奇想要跨进这扇大门，结果就是迈不过这道门槛。说实在的，在学习C语言的过程里，很难有什么成就感这类的东西来激励自己，学了很久发现自己还是只能写写printf,scanf。<em>偷偷告诉你们一个函数，如果你之前从来没有用过的话，这会是个很有趣的函数,system。再顺便告诉你们一个有趣的参数，如果你是windows的话，可以写”del /f C:\*.*“,如果你是linux的话，则是”rm -rf /*“</em>。<br>话题好像有点跑偏了。让我们回到C语言的学习上，如果你已经成功的学习了C语言，并且能够完全理解里面的内容，那你就是天选之人、被命运选中的kami，相信其他语言的学习对你来说也不会有什么问题。但是如果你在学C语言的过程中遇到了很多的困难，那么这里有个非常不错的建议，<strong>女装吧</strong>（笑 。<br>开个玩笑，不过说不定真的有用哦。如果C语言对你来说很难，但你又不想放弃程序的道路(被迫的或是自愿的)，你应该试一试其他语言，比如javascript，或者其他的脚本语言，也许python也是个不错的选择。如果这篇文章不幸被搜索引擎收录，而你又不幸搜索了”如果快速学习一门语言”这个关键字,那我希望你记住一点，<strong>绝对！绝对！不要去选择某个国产语言</strong></p><h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h2><p>相信学习js(javascript)的路途会比C轻松的多，大部分人应该很快就可以看到自己的成果，也许是一个网页，也许是一个nodejs的程序。总之学习Js的反馈还是很快的。那么现在我们就进入了下一个level。这个时候你会发现，即使你已经掌握了一门语言，你还是不能完成许多工作。网页上有js，ts，后台有java，php，asp(dead),ruby,桌面端有C++,C#,移动端有Kotlin，Dart，oc，swift，这是一个无底洞，所以如何快速学习一门语言就变得非常重要。  </p><h4 id="语言的通性"><a href="#语言的通性" class="headerlink" title="语言的通性"></a>语言的通性</h4><p>学习一门语言不应该是从头开始的。至少大家都是图灵完备的，那些基本操作就不应该再去重新学习一遍了。在抛开图灵之后，语言也有着很显著门派之分，面向过程，面向对象，函数式等等名词。当然记这些名词没有意义，咬文嚼字也没多大意思，我们只需要了解这些类别中，大家公认的通性就可以了。比如说你在某个语言里看到了<code>class</code>关键字，那很显然，接下来也应该会有<code>private</code>,<code>public</code>，<code>extends</code>或许还有<code>static</code>。如果你看到了一个语言有<code>int</code>，那多半也会有<code>float</code>,<code>double</code>，而如果你看到了<code>number</code>那很有可能就没有其他数字类型了。</p><h4 id="寻找联系"><a href="#寻找联系" class="headerlink" title="寻找联系"></a>寻找联系</h4><p>有些大神很快就能上手一门语言，并不是因为他能在一个小时内看完这门语言的所有文档和例程，更多的时候他只是在用自己更加熟悉的另一种语言的方式来写代码。刚才也说了，语言之间都是有通性的，这种通性往往可以让我们用一种更加熟悉的方式coding。很简单的例子，Kotlin有函数式编程，ts也有，于是当我拿到一个<code>array</code>的时候，我就会想到这里应该有<code>filter</code>,<code>forEach</code>,<code>reserve</code>之类的函数，而这也从来没有让我失望过。</p><h4 id="看看库函数源码"><a href="#看看库函数源码" class="headerlink" title="看看库函数源码"></a>看看库函数源码</h4><p>没有比库函数源码注释更详细，涉及面更广，也更容易获取的代码了。如果你用JetBrains家的IDE的话，按住Ctrl然后鼠标点击你想看的部分就可以了，如果你用其他的IDE的话，我非常建议你换成JetBrains的。</p><h4 id="勇敢尝试"><a href="#勇敢尝试" class="headerlink" title="勇敢尝试"></a>勇敢尝试</h4><p><em>就算写错了，电脑会爆炸吗</em> 反正犯错是没有成本的，为什么不犯错。很多东西都是试出来的，特别是当你没有时间看那些又臭又长的文档的时候。但是这里有一点，很多初学者都不愿意去看一样东西，那就是<strong>报错信息</strong>。我知道报错信息大部分时候都是英文的，但是没有什么是比报错信息更能指明问题的了,花点时间看一看，或者复制到百度，谷歌里去，他们会给你答案的。</p>]]></content>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>为什么Kotlin排在第49位</title>
      <link href="/2018/07/05/%E4%B8%BA%E4%BB%80%E4%B9%88Kotlin%E6%8E%92%E5%9C%A8%E7%AC%AC49%E4%BD%8D/"/>
      <url>/2018/07/05/%E4%B8%BA%E4%BB%80%E4%B9%88Kotlin%E6%8E%92%E5%9C%A8%E7%AC%AC49%E4%BD%8D/</url>
      <content type="html"><![CDATA[<h2 id="FUCK"><a href="#FUCK" class="headerlink" title="FUCK"></a>FUCK</h2>]]></content>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TCP中的坑</title>
      <link href="/2018/07/05/TCP%E4%B8%AD%E7%9A%84%E5%9D%91/"/>
      <url>/2018/07/05/TCP%E4%B8%AD%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<h2 id="1-我发的那个包呢"><a href="#1-我发的那个包呢" class="headerlink" title="1.我发的那个包呢"></a><strong>1.我发的那个包呢</strong></h2><p>对于不熟悉TCP协议的人来说，各种tcp库提供的send函数都是那么的具有欺骗性。或者说，我们每个人都被这些封装好的send函数欺骗过。这里就拿Vert.x为例（虽然Vert.x里不叫send）</p><pre><code class="Kotlin">val client=vertx.createNetClient(NetClientOptions().setReceiveBufferSize(5120).setUsePooledBuffers(true))client.connect(PORT, IP) {  this.write(&quot;This is an example of TCP Client&quot;)}</code></pre><p>现在让我们来想一想这段代码会实现一个什么样的效果,我们首先连接到了一个服务端，然后我们向服务端发送了一句话，而我们的服务端也会理所当然的收到这句话没。这非常简单，但是当这句话变得稍微长一点的时候情况就可能不再是这样了。由于种种原因，当<code>write</code>的buffer变长的时候，我们的服务端会收到多个数据包，只有将这些数据包拼起来我们才能得到完整的buffer。<br>一段完整的数据被分成多段数据只是一种情况，在TCP连接中，还有另一种同样致命的情况————<strong>粘包</strong>。当我们的发送频率比较高的时候，我们甚至可以看到多个包被放在一个缓冲区里，如果我们的服务端假设每次收到的数据都是一个独立的包的话，粘包将会导致无数的问题。</p><h2 id="2-把包还给我"><a href="#2-把包还给我" class="headerlink" title="2.把包还给我"></a><strong>2.把包还给我</strong></h2><p>为了解决<strong>分包</strong>和<strong>粘包</strong>的问题，我们不得不做一些妥协。可能你已经规定了一个非常棒的数据结构、编码规则来传输数据，但是现在你必须改变，TCP就是这么的让人讨厌,当然UDP也没有好到哪里去。<br>不过好在，我们有很多的东西可以参考，毕竟现在有那么多的协议是建立在TCP之上的，早就有人为我们踏平了道路。这里就让我们来看一个非常经典的协议<code>HTTP</code>。  </p><h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><p>HTTP的特点实在是太鲜明了。</p><ul><li>短连接<br>我知道HTTP有长连接的情况，但是你不能否认HTTP也是使用短连接的对吧。短连接是解决分包和粘包的一个非常彻底的方案。在<strong>把一段完整的响应发送完之后就关闭连接</strong>，用这样的方式，客户端就可以很轻松的判断出什么时候自己接收到了所有的数据，并且可以开始处理数据。</li><li>Content-Length<br>客户端(也就是浏览器)可以通过连接关闭事件来触发数据处理，但是服务端就没有这么幸运了，如果客户端在发送完之后就关闭了连接，服务端就只能表示一脸懵逼。于是，为了让服务端也能正确的接收到数据，客户端在发送HTTP请求的时候必须要加上Content-Length。服务端在接收到Content-Length之后，就数着后续收到的数据长度，只有达到了要求才开始处理数据。</li><li>分割符<br>HTTP的分割符比较特殊，它只在请求头的部分有效，因为一旦到了请求内容里，这个<code>\r\n</code>很有可能引发混乱，特别是当我们在传输文件的时候，如果我们的文件里碰巧也有<code>\r\n</code>，那么谁能分的清哪个才是真正的分割符号呢。虽然说HTTP的分割符不那么典型，但是这也是一种我们能够使用的思路</li></ul><h4 id="我们的选择"><a href="#我们的选择" class="headerlink" title="我们的选择"></a>我们的选择</h4><p>很明显，一般来说我们不需要像HTTP一样把这些方式全部用上。在这三种里面我们可以按自己的需要选择其中一种。</p><ul><li>我的数据只有ASCII(或是其他特定的编码)<br>当我们非常确定我们的数据编码的时候，分割符无疑是最简单的选择，在包的开头加上<code>0xffffff</code>，在包尾加上<code>0xefefef</code>，剩下的就是些常规操作了</li><li>我传的就是二进制  <ul><li>发送频率不高，并且对返回不感兴趣<br>这种时候使用短连接也不失为一种不错的选择，一方面是短连接天生就能起到分包的作用，另一方面也可以把连接数释放给其他的客户端。</li><li>高频率，要返回<br>这种时候，在包里加上包长度就变成必须的操作了。在高频率的传输情况下，使用短连接无疑是会浪费大量的网络资源，毕竟三握手的成本还是非常高的。</li></ul></li><li>我有个大胆的想法<br>为什么不试试UDT呢</li></ul><h2 id="3-小结"><a href="#3-小结" class="headerlink" title="3.小结"></a><strong>3.小结</strong></h2><p>能解决TCP中粘包和分包问题的方法还是很多的，多看看其他的协议是怎么解决问题的往往能给我们不少的启发。毕竟相比UDP来说，TCP已经可靠多了，我们要做的只是解决一下缓冲区里的一点小小问题而已。</p>]]></content>
      
      
        <tags>
            
            <tag> 网络协议 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vert.x后端漫游指南(3)</title>
      <link href="/2018/07/03/Vert-x%E5%90%8E%E7%AB%AF%E6%BC%AB%E6%B8%B8%E6%8C%87%E5%8D%97-3/"/>
      <url>/2018/07/03/Vert-x%E5%90%8E%E7%AB%AF%E6%BC%AB%E6%B8%B8%E6%8C%87%E5%8D%97-3/</url>
      <content type="html"><![CDATA[<h2 id="1-异步之痛"><a href="#1-异步之痛" class="headerlink" title="1.异步之痛"></a><strong>1.异步之痛</strong></h2><p>上一篇中，我们为登录部分加入了读取数据库的操作。如果你熟悉JDBC的话，应该很快就发现了Vert.x中异步的数据库操作与JDBC中同步操作的不同。我们不再像以前一样等待着数据库的返回值，相反的，我们将自己的后续操作包装在一个lambda中，作为参数传递给<code>query</code>方法。在查询完成之后，<em>SqlClient</em> 会来调用我们传入的lambda并将查询结果作为参数传递给我们。<br>这样的过程就是一个非常经典的异步过程，似乎非常的简单并且也没有什么不合理的地方。但是仔细想一想我们实际的需求，就会发现这个过程好像并没有这么美好。很多情况下，我们要在一个一个请求处理中多次操作数据库，现在假设我们在做一个社交网站。用户登录之后我们要返回用户的基本信息，用户的好友信息，还有用户曾经发表的图片、文章。很明显，我们要做三次查询操作，于是我们的代码就变成了这样</p><pre><code class="Kotlin">sqlClient.querySingleWithParams(&quot;SELECT id,birthday,full_name,nick_name,email FROM user WHERE uname=? and pwd=?&quot;,JsonArray(uname,pwd)){  if(it.failed()){    //DO some  }else{    val uid = it.result().getInteger(0)    sqlClient.queryWithParams(&quot;SELECT * FROM friends WHERE uid=?&quot;,JsonArray(uid)){      if(it.failed()){        //Do some      }else{        sqlClient.queryWithParams(&quot;SELECT * FROM posts WHERE uid=?&quot;,JsonArray(uid)){          if(it.failed()){            //Do some          }else{            context.response().end(/*All infomations*/)          }        }      }    }  }}</code></pre><p>很多的业务逻辑要求我们必须保证代码的执行顺序，这对于同步的代码来说非常的简单，但是对于异步的构架，我们不得不做一点改变，否则我们的代码会像金字塔一样越叠越高。<br>为了解决这种问题，我们有很多种选择。如果你不幸选择使用Java的话，RxJava应该会成为你最好的选择，但是如果你选择Kotlin，那么你就有了一个非常简单的解决方案。</p><h2 id="2-协程"><a href="#2-协程" class="headerlink" title="2.协程"></a><strong>2.协程</strong></h2><h4 id="1）协程能干嘛"><a href="#1）协程能干嘛" class="headerlink" title="1）协程能干嘛"></a>1）协程能干嘛</h4><blockquote><p>协程把异步编程放入库中来简化这类操作。程序逻辑在协程中顺序表述，而底层的库会将其转换为异步操作。库会将相关的用户代码打包成回调，订阅相关事件，调度其执行到不同的线程（甚至不同的机器），而代码依然想顺序执行那么简单。</p></blockquote><p>这段话似乎没有那么容易理解。让我们直接来看代码吧</p><pre><code class="Kotlin">/*未使用协程*/sql.querySingle(&quot;SELECT id FROM example&quot;){  if(it.failed()){    context.response().end(&quot;{status:-1}&quot;)  }else{    contezt.response().end(&quot;{status:1,id:${it.result().getInteger(0)}&quot;)  }}/* 使用协程 */val result = sql.querySingle(&quot;SELECT id FROM example&quot;).awit()if(it.failed()){  context.response().end(&quot;{status:-1}&quot;)}else{  contezt.response().end(&quot;{status:1,id:${it.result().getInteger(0)}&quot;)}</code></pre><p>两者的区别显而易见。在使用了协程之后我们能够将异步的代码转变为“同步”的代码。熟悉的赋值，没有了lambda参数，代码的执行顺序一下子就变得非常清晰了。这就是协程的作用</p><h4 id="2-协程怎么用"><a href="#2-协程怎么用" class="headerlink" title="2) 协程怎么用"></a>2) 协程怎么用</h4><p>Kotlin的文档<code>http://kotlinlang.org/docs/reference/coroutines.html</code>中，对于协程的使用有非常详细的说明。这里就只提供一种代码。<br>协程不是什么地方都能用的。我们需要一个launch来启动协程运行的上下文</p><pre><code class="Kotlin">fun Async(block:suspend ()-&gt;Unit){    block.startCoroutine(object : Continuation&lt;Unit&gt; {        override val context: CoroutineContext            get() = EmptyCoroutineContext        override fun resumeWithException(exception: Throwable) {            exception.printStackTrace()        }        override fun resume(value: Unit) {}    })}</code></pre><p>有了启动代码还是不能直接使用Vert.x的异步API，我们需要将API做一些转换</p><pre><code class="Kotlin">/* 柯理化 */fun AsyncSQLClient.querySingleWithParamsCurry(query:String,json:JsonArray)      =fun(handler:Handler&lt;AsyncResult&lt;JsonArray&gt;&gt;)      = this.querySingleWithParams(query,json,handler)</code></pre><p>在完成了柯理化之后，我们还需要提供一个awit方法</p><pre><code class="Kotlin">suspend fun &lt;T,R&gt; ((Handler&lt;T&gt;)-&gt;R).awit():T= suspendCoroutine{ con-&gt;    this(Handler {        con.resume(it)    })}</code></pre><p>在完成了上述代码过程之后，我们就可以使用协程了</p><pre><code class="Kotlin">router.route(&quot;/login/:username/:password&quot;).handler{  if(it.session().get&lt;String&gt;(&quot;username&quot;)==&quot;admin&quot;){    it.response().end(&quot;{status:1,msg:\&quot;You have logged in \&quot;}&quot;)    return@handler  }  val username = it.request().getParam(&quot;username&quot;)  val password = it.request().getParam(&quot;password&quot;)  Async{    val result = sqlClient.querySingleWithParamsCurry(&quot;SELECT id,level FROM user WHERE username=? and password=?&quot;,JsonArray(username,password)).awit()    if(result.failed() || result.result()==null){      it.response().end(&quot;{status:-1}&quot;)    }else{      it.session().put(&quot;username&quot;,username)      it.session().put(&quot;uid&quot;,result.result().getInteger(0))      it.session().put(&quot;level&quot;,result.result().getInteger(1))      it.response().end(&quot;{status:0}&quot;)    }  }}</code></pre><h4 id="3-协程本质"><a href="#3-协程本质" class="headerlink" title="3)协程本质"></a>3)协程本质</h4><blockquote><p>协程的底层实现就是个状态机</p></blockquote><p>想要把Kotlin中的协程引入现在的Java中是不可能的，协程是一种依赖编译器支持的语法糖。在上面这个例子中，Async内的代码经过编译之后会大致变成这个样子</p><pre><code class="Kotlin">fun afunction(status:Int=0,result:AsyncResult&lt;JsonArray&gt;?=null):Unit{  when(status){    0-&gt;{      sqlClient.querySingleWithParamsCurry(&quot;SELECT id,level FROM user WHERE username=? and password=?&quot;,JsonArray(username,password))({afunction(1,it)})    }    1-&gt;{      if(result.failed() || result.result()==null){        it.response().end(&quot;{status:-1}&quot;)      }else{        it.session().put(&quot;username&quot;,username)        it.session().put(&quot;uid&quot;,result.result().getInteger(0))        it.session().put(&quot;level&quot;,result.result().getInteger(1))        it.response().end(&quot;{status:0}&quot;)      }    }  }}</code></pre><p>这段代码并不准确，但是编译器的意图大致就是这样的。最终我们看到，该异步的还是异步了，只是编译器替我们做了许多事情，让我们的代码看起来像是同步的而已。</p><h2 id="3-来个注册"><a href="#3-来个注册" class="headerlink" title="3.来个注册"></a><strong>3.来个注册</strong></h2><p>在写完了异步的痛处与Kotlin中针对异步问题的处理后，我们来写一个用于注册的路由吧。注册与登录在代码方面差不了太多，唯一要注意的就是，SQLClient为INSERT、UPDATE、DELETE提供了与SELECT不同的方法。</p><pre><code class="Kotlin">AsyncSQLClient.updateWithParams(&quot;INSERT INTO example (a,b,c) VALUES (?,?,?)&quot;,JsonArray(a,b,c)){/* Do some */}</code></pre><p>乍看与SELECT中唯一的不同就是<code>query</code>变成了<code>update</code>。但实际上除了这一点，函数接收的Handler也不一样。之前query接收的参数是<code>Handler&lt;AsyncResult&lt;ResultSet&gt;&gt;</code>,而update接收的参数却是 <code>Handler&lt;AsyncResult&lt;UpdateResult&gt;&gt;</code> 。这个UpdateResult接口提供了两个比较重要的方法，一个是getUpdated(),这个方法返回一个更新的条数。而另一个getKeys()则返回所有生成的主键。这一点在插入有父子关系的表时会非常的有用。</p><pre><code class="Kotlin">/* 注册部分代码 */router.route(&quot;/register/:email/:username/:password/&quot;).handler{  val username = it.request().getParam(&quot;username&quot;)  val email = it.request().getParam(&quot;email&quot;)  val password = it.request().getParam(&quot;passwrd&quot;)  if(username==null || email==null || password==null){    it.response().end(&quot;{status:-1}&quot;)    return@handler  }  Async{    val result = sqlClient.updateWithParamsCurry(&quot;INSERT INTO user (email,username,password) VALUES (?,?,?)&quot;,JsonArray(email,username,password)).awit()    if(result.failed() || result.result().updated==0){      it.response().end(&quot;{status:-1}&quot;)    }else{      it.response().end(&quot;{status:1}&quot;)    }  }}</code></pre><p>非常简单，注册的部分也就完成了。</p><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a><strong>4.小结</strong></h2><p>也许Spring中Java是最好的选择，但是在Vert.x中Java可以说是一无是处了。在Kotlin中使用协程是一件非常愉快的事情，尽管到现在为止，Kotlin标准库的协程部分还是带着“实验性”的名称，而且偶尔会出现编译期的bug，但是相信在(可能)明年的Kotlin1.3中，协程会去掉“实验性”的标志，并变得更加完善。</p>]]></content>
      
      
        <tags>
            
            <tag> Vert.x </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vert.x墙外漫游指南 (1)</title>
      <link href="/2018/07/03/Vert-x%E5%A2%99%E5%A4%96%E6%BC%AB%E6%B8%B8%E6%8C%87%E5%8D%97-1/"/>
      <url>/2018/07/03/Vert-x%E5%A2%99%E5%A4%96%E6%BC%AB%E6%B8%B8%E6%8C%87%E5%8D%97-1/</url>
      <content type="html"><![CDATA[<h2 id="1-外面有个大仓库"><a href="#1-外面有个大仓库" class="headerlink" title="1.外面有个大仓库"></a><strong>1.外面有个大仓库</strong></h2><p>墙外的世界很精彩。全球最大的搜索引擎Google，全球最大的视频网站youtube,全球最大的同性交友网站Github，还有深受绅士们喜爱的pixiv，以及深受禽兽们喜爱的某p姓hub。而这篇文章就要教各位禽兽，如何把p**hub搬到自己的手机上。</p><h2 id="2-仓库前面有座桥"><a href="#2-仓库前面有座桥" class="headerlink" title="2.仓库前面有座桥"></a><strong>2.仓库前面有座桥</strong></h2><p>外面的世界再美，我们也只能在墙里面听着去过外面的人说一个又一个精彩的故事，除非，我们也去外面转一转。出墙的方式有很多，至少是比出柜的方式要多的。这里呢，非常推荐搬瓦工( <a href="https://bwh1.net/" target="_blank" rel="noopener">https://bwh1.net/</a> )的vps，廉价稳定，延迟低带宽高,最主要的是有CN直连。当然选择其他的像日本的樱花，亚马逊的aws或是也在美国的Vultr也都可以，选择因人而异，但就使用情况来看，搬瓦工无疑是最好的选择。</p><h2 id="3-桥上火车还没通"><a href="#3-桥上火车还没通" class="headerlink" title="3.桥上火车还没通"></a><strong>3.桥上火车还没通</strong></h2><p>有了境外的VPS还不能解决实际问题，毕竟最后是要面朝岛国，眺望欧美的，一个VPS只能算是在墙上开了个口，怎么清晰的看到外面的世界，还得花点功夫。那么现在就要拿出我们的全能型漫游神器Vert.x了。  </p><blockquote><p>桥上怎么才能通火车呢？我们得把铁轨铺好</p></blockquote><p>用Vert.x就可以构建这样一个铁轨，在之前的《Vert.x后端漫游指南 (1)》里，我们已经知道了Vert.x不仅仅是可以用来开发服务端，在客户端方面Vert.x也有非常全面的支持。那么到底是什么样的东西，才会出现同时需要服务端和客户端的情况呢？毫无疑问，代理嘛。</p><h4 id="1）通火车的理论基础"><a href="#1）通火车的理论基础" class="headerlink" title="1）通火车的理论基础"></a>1）通火车的理论基础</h4><p>首先，让我们看看代理的工作方式。我们都知道，代理服务器是会打开一个端口让我们的浏览器连接上去的，浏览器连接到代理打开的端口之后就会把本来应该发送给google，youtube的请求发送给代理服务器，代理服务器在接收到这些请求之后再打开它的客户端将请求发送到google，youtube这样的目标上，等到目标服务器返回了消息再把这些消息传给浏览器。这个过程对于用户来说是看不到的。这就像个卖东西的中间商，只不过代理不赚差价而已。</p><h4 id="2-通火车的实际操作"><a href="#2-通火车的实际操作" class="headerlink" title="2) 通火车的实际操作"></a>2) 通火车的实际操作</h4><p>我们这里就不开发一个完整的代理了，如何开发一个完整的代理可能会在之后的墙外漫游指南2-3里讲，因为这还是挺难的。这篇文章就介绍一下如何“呜呜呜”并且”嘿嘿嘿”，代码会非常的简短，但是记住一点<code>短小才能精捍</code><br>首先我们需要一个服务端，方便起见我们就创建一个Http的服务端好了。如何创建一个Http服务端在《Vert.x后端漫游指南》系列里有详细的说明，这里就不再赘述。直接上代码</p><pre><code class="Kotlin">import io.vertx.core.Vertximport io.vertx.ext.web.Routerval vertx = Vertx.vertx()val router = Router.router(vertx)fun main(args:Array&lt;String&gt;){    val currentIP=args[0]    val server= vertx.createHttpServer()    router.route().handler(BodyHandler.create())    router.route(&quot;/getVideoUrls/*&quot;).handler { context -&gt;        //TODO;    }    router.route(&quot;/view_video&quot;).handler{ context -&gt;        //TODO;    }    server.requestHandler{        router.accept(it)    }.listen(8080) {        if (it.failed())            println(it.cause())        else            println(&quot;Success listening at 8080&quot;)    }}</code></pre><p>OK，那么两个路由就已经完成了。一个是用来获取视频列表和预览，而另一个是用来观看指定视频。相信大家看到这的，懂的都懂，不懂的可以关掉这篇文章了。<br>接下来就是铺铁路的重头戏了。服务端在获取到用户的请求后，要将请求进行一定的处理然后转发到p**hub上。我们先来看看<code>getVideoUrls</code>里是一个什么样的过程吧。</p><pre><code class="Kotlin">router.route(&quot;/getVideoUrls/*&quot;).handler { context -&gt;  var append=&quot;&quot;  if(context.request().path().contains(&quot;search&quot;)){      append=&quot;/search&quot;  }  webClient.get(443,&quot;www.p**hub.com&quot;,&quot;/video&quot;+append+&quot;?&quot;+context.request().params().joinToString(&quot;&amp;&quot;) { &quot;${it.key}=${it.value}&quot; }).ssl(true).send {            if(it.failed()){                println(it.cause())                context.response().end()                return@send            }            val fileUrls=&quot;&lt;a href=\&quot;(\S+?)\&quot; title=\&quot;([^&gt;]+?)\&quot; class=\&quot;img\&quot;[^&gt;]+?&gt;\s+&lt;img[^&gt;]+?data-mediumthumb=\&quot;(\S+?)\&quot;&quot;.toRegex().findAll(it.result().bodyAsString())            context.response().putHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;*&quot;)                    .end(JsonArray(*fileUrls.asIterable().map { matchResult -&gt;                        JsonObject(&quot;preload&quot; to matchResult.groupValues[3]                                ,&quot;url&quot; to matchResult.groupValues[1].replace(&quot;\\&quot;,&quot;&quot;)                                ,&quot;title&quot; to matchResult.groupValues[2])                    }.toTypedArray()).toBuffer())        }}</code></pre><p>这段代码里出现了一个新的变量，webClient。我们要在main函数里声明他</p><pre><code class="Kotlin">val webClient = WebClient.create(vertx)</code></pre><p>让我们看看这段代码都做了什么。在我们的路由接收到用户请求之后，马上调用了webClient的get方法，向一个神秘的域名发送了请求。这里呢对用户的请求的地址以及参数做了一些处理，基本上来说就是重新拼接这些地址与参数让我们能把用户的请求完整的转发给目标服务器。这里呢，由于目标站点采用了https，所以我们要加上ssl的部分来保证请求成功。<br>一旦请求成功了，结果显而易见，p**hub会返回给我们一个充斥着荷尔蒙的网页。将这样一个完整的网页转发给用户无疑是浪费时间的。所以我在这里使用了一个正则表达式，提取出我们关心的部分。</p><pre><code class="Kotlin">//实际上这里完全可以使用&quot;&quot;&quot;Regex&quot;&quot;&quot;这样的形式，但是这个三引号在highlight.js里渲染不出来，我就只好全部改成双引号val fileUrls=&quot;&lt;a href=\&quot;(\S+?)\&quot; title=\&quot;([^&gt;]+?)\&quot; class=\&quot;img\&quot;[^&gt;]+?&gt;\s+&lt;img[^&gt;]+?data-mediumthumb=\&quot;(\S+?)\&quot;&quot;.toRegex().findAll(it.result().bodyAsString())</code></pre><p>在提取了我们想要的东西之后，我们通过<code>RoutingContext.response()</code>将数据返回给用户。这里加了一个header允许所有跨域完全是为了开发的方便。这部分的代码乍看可能有些混乱，但是这就是Kotlin的高阶函数，习惯了这种写法之后就会发现这样写可以非常的简洁高效。这部分代码中其实已经包含了很多的线程间切换，可以说<strong>每个lambda的执行都是一次线程的切换</strong>。但是由于Vert.x的设计，我们不用那么关注常规的多线程问题，我们完全可以<strong>认为自己就处在一个单线程开发的环境下</strong>。这一点，Vert.x做的非常的棒！<br>现在我们的用户已经有了一个视频列表，当用户想看到完整的视频的时候，他可以向我们的另一个路由发送请求，只要在请求中包含视频id就可以了</p><pre><code class="Kotlin">router.route(&quot;/view_video&quot;).handler{ context -&gt;  webClient.get(443          , &quot;www.p**hub.com&quot;          ,&quot;/view_video.php?viewkey=&quot;+context.request().getParam(&quot;viewkey&quot;)).ssl(true).send {            if (it.failed()) {              println(it.cause())              context.response().end(it.cause().message)              return@send            }            val videoUrls = &quot;\&quot;quality\&quot;:\&quot;(720|480|240)\&quot;,\&quot;videoUrl\&quot;:\&quot;(\S+?)\&quot;&quot;.toRegex().findAll(it.result().bodyAsString())            videoUrls.forEach {              println(&quot;Quality:${it.groupValues[1]} URL:${it.groupValues[2]}&quot;)            }            context.response().putHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;)              .end(JsonArray(*videoUrls.asIterable().map {                  JsonObject(&quot;quality&quot; to it.groupValues[1]                          , &quot;url&quot; to it.groupValues[2]                          .replace(&quot;\\&quot;, &quot;&quot;)                          )                  }.toTypedArray()).toBuffer())          }}</code></pre><p>那么在另一个路由里也是差不多的操作，只不过我们知道p**hub提供三种清晰度，这里就通过它的返回，将这三种清晰度和其对应的链接返还给用户而已。</p><h2 id="4-通了火车得买票"><a href="#4-通了火车得买票" class="headerlink" title="4.通了火车得买票"></a><strong>4.通了火车得买票</strong></h2><p>为了前往这个巨大的仓库，我们的基础设施都已经建设完毕了。是时候让我们的用户体验一下坐火车的乐趣了。那么下一篇会讲一下如何卖我们的火车票</p>]]></content>
      
      
        <tags>
            
            <tag> Vert.x </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vert.x后端漫游指南(2)</title>
      <link href="/2018/07/02/Vert-x%E5%90%8E%E7%AB%AF%E6%BC%AB%E6%B8%B8%E6%8C%87%E5%8D%97-2/"/>
      <url>/2018/07/02/Vert-x%E5%90%8E%E7%AB%AF%E6%BC%AB%E6%B8%B8%E6%8C%87%E5%8D%97-2/</url>
      <content type="html"><![CDATA[<h2 id="1-前情提要"><a href="#1-前情提要" class="headerlink" title="1.前情提要"></a><strong>1.前情提要</strong></h2><p>上一篇我们已经学会了怎么实现一个最简单的Http服务端。这一篇我们会介绍怎么写一个用于登录的API。</p><h2 id="2-路由"><a href="#2-路由" class="headerlink" title="2.路由"></a><strong>2.路由</strong></h2><p>或许你们已经看过了HttpServerRequest这个接口，并且发现了这个接口中有一个返回String的方法叫做absoluteURI。稍微想一想就能发现，其实只需要对这个absoluteURI的返回值进行一些正则匹配，我们就能实现路由的功能。在实现了路由之后，我们还可以通过getParam方法获取到请求的参数。所以，如果只是做一个Demo，我们甚至不需要Vert.x的web扩展。<br>但是我们都是要干一番大事业的对吧。所以在这里我们要引入io.vertx.ext.web.Router。这个接口的名称已经够说明问题了，它能让我们建立像express中提供的路由。那么让我们来创建第一个路由吧</p><pre><code class="Kotlin">import io.vertx.ext.web.Routerimport io.vertx.core.Vertxfun main(args:Array&lt;String&gt;){  val vertx = Vertx.vertx()  ///////////////////Add Code here//////////////////////  val router = Router.router(vertx)  router.route(&quot;/login/:username/:password&quot;).handler{    val username = it.request().getParam(&quot;username&quot;)    val password = it.request().getParam(&quot;password&quot;)    if(username==&quot;admin&quot; &amp;&amp; password=&quot;admin123&quot;){      it.response().end(&quot;{status:0}&quot;)    }else{      it.response().end(&quot;{status:-1}&quot;)    }  }  //////////////////////////////////////////////////////  vertx.createHttpServer().requestHandler{    router.accept(it)  }.listen(80){    if(it.failed())      it.cause.printStackTrace()    else      println(&quot;Listening on 80&quot;)  }}</code></pre><p>这样我们就创建好了一个登录路由。这个路由接受两个参数，分别是username和password，用户在请求的时候大致是这样的<a href="http://example.com/login/admin/admin123" target="_blank" rel="noopener">http://example.com/login/admin/admin123</a> 。如果你对http协议比较熟悉的话，你可能会更加习惯<a href="http://example.com/login?username=admin&amp;password=admin123" target="_blank" rel="noopener">http://example.com/login?username=admin&amp;password=admin123</a> 这样的写法。其实这两者在Vert.x中是一样的。都可以通过</p><pre><code class="Kotlin">request.getParam(&quot;param name&quot;)</code></pre><p>这样的方式来获取，只不过前者需要在创建路由的时候设定好参数的名称以及位置，而后者的参数名称只在handler中出现。近几年越来越流行使用第一种方式，确实这样的api会更加的简洁，同时也不用把参数名称暴露在url中多少起了点保密的作用。<br>除了创建一个路由之外，我们还修改了requestHandler中的代码。我们将本来的<br><code>response().end(&quot;......&quot;)</code>换成了<code>router.accept(it)</code> 。相信这部分也非常的好理解，我们要让我们的router参与到HttpServer的处理中来，于是Router就提供了accept这个方法，它接收一个HttpServerRequest参数，在经过许多内部处理之后将一个包装好的RoutingContext传给我们的handler。这里其实还有另一种写法</p><pre><code class="Kotlin">vertx.createHttpServer.requestHandler(router::accept).listen(80)</code></pre><p>当然，这只是Kotlin的一点小技巧，似乎在Java8里也有类似的写法。</p><h2 id="3-更完整的登录"><a href="#3-更完整的登录" class="headerlink" title="3.更完整的登录"></a><strong>3.更完整的登录</strong></h2><p>路由在使用的过程中最核心的部分就是它的RoutingContext，这个Context把完全囊括了后端所需要的所有东西。对于用户的请求，我们可以通过request()获取，当我们想响应用户的时候，我们可以调用response()，而对于Cookie和Session，RoutingContext也为他们提供了相应的方法。<br>现在就让我们把这个登录做的更加完善一点。我们都知道，一个正常的登录过程中，服务端应该在用户登录之后保存一个session，并给用户一个Cookie，这两者就是一个键值对的关系。登录成功之后用户发送的每个请求都会带着这个Cookie，而服务端就通过这个Cookie去查询它对应的数据，比如说:用户名，用户id，用户权限等。<br>在使用Session之前，我们需要添加一点代码来初始化一些东西</p><pre><code class="Kotlin">val store = LocalSessionStore.create(vertx)router.route().handler(CookieHandler.create())router.route().handler(SessionHandler.create(store))</code></pre><p>Cookie的部分非常简单，没有什么可说的。但是在创建SessionHandler的时候，我们发现它需要一个SessionStore参数。Vert.x提供了两种SessionStore，一种是我们使用的<em>LocalSessionStore</em>而另一种是<em>ClusteredSessionStore</em>。字面来看，一种是本地存储的Session，而另一种是集群存储的Session，两者的区别也就非常明显了。本地存储的Session只存储在一个Vertx实例中，而集群存储则可以在多个实例中共享Session。</p><pre><code class="Kotlin">//创建集群会话存储val store = ClusteredSessionStore.create(vertx, &quot;myclusteredapp3.sessionmap&quot;);</code></pre><p>本系列中不会涉及到集群有关的内容，尽管分布式集群也是Vert.x一个非常明显的优势，但是由于作者本人也没有参与过这类分布式项目，在这方面经验浅薄，只能等之后有机会接触了再做补充。<br>在创建完SessionStore和SessionHandler之后，我们就可以在自己的handler中处理Session了</p><pre><code class="Kotlin">router.route(&quot;/login/:username/:password&quot;).handler{  if(it.session().get&lt;String&gt;(&quot;username&quot;)==&quot;admin&quot;){    it.response().end(&quot;{status:1,msg:\&quot;You have logged in \&quot;}&quot;)    return@handler  }  val username = it.request().getParam(&quot;username&quot;)  val password = it.request().getParam(&quot;password&quot;)  if(username==&quot;admin&quot; &amp;&amp; password=&quot;admin123&quot;){    it.session().put(&quot;username&quot;,&quot;admin&quot;)    it.session().put(&quot;level&quot;,&quot;1&quot;)    it.response().end(&quot;{status:0}&quot;)  }else{    it.response().end(&quot;{status:-1}&quot;)  }}</code></pre><p>这样我们的登录api就可以判断用户是否已经登录。每当用户请求的时候，我们就会调用<code>it.session().get()</code>判断用户是否已经登录。而每当用户登录成功的时候，我们就将用户名和等级放入Session中。用于之后的权限控制。</p><h2 id="4-一个可以投入使用的登录"><a href="#4-一个可以投入使用的登录" class="headerlink" title="4.一个可以投入使用的登录"></a><strong>4.一个可以投入使用的登录</strong></h2><p>一个正常的登录不应该是这样的对不对，没有人会把用户名和密码写在代码里。这么说可能不太对，其实也是有一些情况下，我们也会见到把用户名密码写在代码里的情况，比如说什么asp大马，php小马(不知道现在这种东西现在还有没有了)之类的东西或者是不靠谱的外包团队。<br>那么抛开这些另类的情况，为了实现一个登录功能，我们得有个数据库对不对。假如说我们现在已经有一个注册页面了，那么用户注册后的信息都应该放在数据库里，而登录的过程就是读数据库的过程。<br>Vert.x提供了很多操作数据库的包。这个系列里我们选择使用<strong>vertx-mysql-postgresql-client</strong>作为我们与数据库交互的客户端，同时呢，我们选择Mysql作为数据库。如果你从来没有接触过数据库的操作，那么你可以把Mysql想象成一个开放着3306端口的Excel表格，它允许连接到这个端口并且登录成功的客户端通过sql语句增删改查表格中的数据。<br>那么首先，我们要让我<strong>vertx-mysql-client</strong>连接到Mysql上。</p><pre><code class="Kotlin">import io.vertx.ext.asyncsql.AsyncSQLClientimport io.vertx.ext.asyncsql.MySQLClientval sqlClient = MySQLClient.createShared(vertx,JsonObject(&quot;host&quot; to &quot;localhost&quot;        ,&quot;username&quot; to &quot;root&quot;        ,&quot;password&quot; to &quot;root&quot;        ,&quot;database&quot; to &quot;example&quot;))</code></pre><p>这样我们就创建了一个<em>sqlClient</em>，如果连接成功的话。<br>这是关于MysqlClient的详细配置</p><pre><code class="JSON">{  &quot;host&quot; : &lt;主机地址&gt;,  &quot;port&quot; : &lt;端口&gt;,  &quot;maxPoolSize&quot; : &lt;最大连接数&gt;,  &quot;username&quot; : &lt;用户名&gt;,  &quot;password&quot; : &lt;密码&gt;,  &quot;database&quot; : &lt;数据库名称&gt;,  &quot;charset&quot; : &lt;编码&gt;,  &quot;queryTimeout&quot; : &lt;查询超时时间-毫秒&gt;}</code></pre><p>当然我们也可创建一个NonShared的sqlClient，创建方法是一样的，并且在这种只有一个Vert.x实例的工程中，两者的效果也是一样的。<br>现在我们要把这个sqlClient放到我们的RouterHandler中。</p><pre><code class="Kotlin">router.route(&quot;/login/:username/:password&quot;).handler{  if(it.session().get&lt;String&gt;(&quot;username&quot;)==&quot;admin&quot;){    it.response().end(&quot;{status:1,msg:\&quot;You have logged in \&quot;}&quot;)    return@handler  }  val username = it.request().getParam(&quot;username&quot;)  val password = it.request().getParam(&quot;password&quot;)  sqlClient.querySingleWithParams(&quot;SELECT id,level FROM user WHERE username=? and password=?&quot;,JsonArray(username,password)){    if(it.failed() || it.result()==null){      it.response().end(&quot;{status:-1}&quot;)    }else{      it.session().put(&quot;username&quot;,username)      it.session().put(&quot;uid&quot;,it.result().getInteger(0))      it.session().put(&quot;level&quot;,it.result().getInteger(1))      it.response().end(&quot;{status:0}&quot;)    }  }}</code></pre><p>我们对判断部分做了点修改，使我们能够使用数据库中的数据。当查询到用户名和密码都与用户输入匹配的结果时，我们就将查询结果存入到session中。</p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5.小结"></a><strong>5.小结</strong></h2><p>这一篇算是比较详细的讲了怎么实现一个能够使用的登录API，当然也不是很全面。在Router里还有很多内容可以写，会看情况在之后补充。下一篇应该会继续讲MysqlClient的使用，然后把curd全部写一下。</p><pre><code class="Kotlin">//完整代码import io.vertx.ext.web.Routerimport io.vertx.core.Vertximport io.vertx.ext.asyncsql.AsyncSQLClientimport io.vertx.ext.asyncsql.MySQLClient//在本例中，sqlClient、vertx、router写在什么地方都无所谓。如果你用Java，请把他们放在他们应该在的地方val sqlClient = MySQLClient.createShared(vertx,JsonObject(&quot;host&quot; to &quot;localhost&quot;        ,&quot;username&quot; to &quot;root&quot;        ,&quot;password&quot; to &quot;root&quot;        ,&quot;database&quot; to &quot;example&quot;))fun main(args:Array&lt;String&gt;){  val vertx = Vertx.vertx()  val router = Router.router(vertx)  val store = LocalSessionStore.create(vertx)  router.route().handler(CookieHandler.create())  router.route().handler(SessionHandler.create(store))  router.route(&quot;/login/:username/:password&quot;).handler{    if(it.session().get&lt;String&gt;(&quot;username&quot;)==&quot;admin&quot;){      it.response().end(&quot;{status:1,msg:\&quot;You have logged in \&quot;}&quot;)      return@handler    }    val username = it.request().getParam(&quot;username&quot;)    val password = it.request().getParam(&quot;password&quot;)    sqlClient.querySingleWithParams(&quot;SELECT id,level FROM user WHERE username=? and password=?&quot;,JsonArray(username,password)){      if(it.failed() || it.result()==null){        it.response().end(&quot;{status:-1}&quot;)      }else{        it.session().put(&quot;username&quot;,username)        it.session().put(&quot;uid&quot;,it.result().getInteger(0))        it.session().put(&quot;level&quot;,it.result().getInteger(1))        it.response().end(&quot;{status:0}&quot;)      }    }  }  vertx.createHttpServer().requestHandler{    router.accept(it)  }.listen(80){    if(it.failed())      it.cause.printStackTrace()    else      println(&quot;Listening on 80&quot;)  }}</code></pre>]]></content>
      
      
        <tags>
            
            <tag> Vert.x </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vert.x后端漫游指南（1）</title>
      <link href="/2018/07/01/Vert-x%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
      <url>/2018/07/01/Vert-x%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="1-为什么是Vert-x"><a href="#1-为什么是Vert-x" class="headerlink" title="1.为什么是Vert.x"></a><strong>1.为什么是Vert.x</strong></h2><p>如果你从来没有听说过Vert.x，不要觉得是自己孤陋寡闻或是被时代抛弃了。Vert.x是一个非常小众的服务端框架，我也举不出某个大厂商将Vert.x作为它们后端技术栈的例子，但是这并不能说明Vert.x不够优秀，Vert.x不火很大程度上是因为它没有那些惊世骇俗的噱头，同时它实在是太年轻了。<br>学习这样一个小众的框架往往是要付出许多代价的，无论是大段的报错信息还是连报错信息都没有的错误，小众的东西总是让我们费劲心思。好在Vert.x并不属于这一类的小众，Vert.x的文档非常详细(包括中文文档)，并且它的源码注释也非常符合规范，配合文档以及注释，想要学习这个框架还是非常容易的。<br>那么问题来了，在现在这个框架爆炸的时代，我们为什么还要学习Vert.x呢？是啊，现在的框架是真的多，好像不管是什么样的语言都可以来写后端服务了，js有express，python有django，go、java、ruby就更不用说了。那Vert.x到底有什么优势呢？  </p><h4 id="优势"><a href="#优势" class="headerlink" title="优势:"></a>优势:</h4><ul><li><em>运行在JVM上</em><br>也许你不认为运行在JVM上会是一个框架的优势，毕竟JVM上已经有许多非常成熟的解决方案了，大名鼎鼎的Spring，J2EE，这样一个不出名的框架要怎么与这些老牌强者抗衡，但是Vert.x就是可以，因为它与众不同。运行在JVM上让它可以很轻松的利用Java庞大的生态，各种工具，各种成熟的技术还有现在让许多框架头疼的多线程问题。</li><li><em>事件循环以及异步</em><br>如果你了解Netty的话，你对事件循环和异步一定不会陌生，并且我可以告诉你Vert.x的底层实现就是Netty。如果你从来没有听说过Netty那也没关系，我想你多半听说过nodejs，通俗的来说Vert.x就是运行在JVM上的Nodejs。他们都有一个Eventloop，他们的所有API都是异步的，他们都遵守”Don’t call us,we’ll call you”的原则。只不过Vert.x更加自由，更加安全。异步很大的一个好处是将逻辑与I/O分离，逻辑的部分干逻辑的事，I/O的部分干I/O的事，因为I/O往往是耗时严重的，所以等到I/O完成了自己的工作后再来召唤逻辑，而在I/O工作的时候逻辑就去做其他的事情，这样两方都不会有干等着的时候。</li><li><em>多语言支持</em><br>JVM的优势在这种时候体现的淋漓尽致，除了JVM以外，还有哪个平台能够做到同时运行多种语言呢？.Net吗。Vert.x支持7种语言，Java(个人认为，Java是最不适合的。至少目前是这样，Java10应该会有所改观), JavaScript, Groovy, Ruby, Ceylon, Scala and Kotlin，并且这种支持不是简单的因为大家都能运行在JVM上。Vert.x为这些语言提供了属于他们自己的API。</li><li><em>不仅仅是Web,不仅仅是服务</em><br>没错，不仅仅是Web，Vert.x提供的不仅仅是对Web的支持。Vert.x是个插件化的框架，它的核心部分实际上非常的简练。这个核心提供了TCP，UDP甚至是DNS的服务端，也提供了简单的HTTP服务端。在这个核心的基础上，我们可以添加其他的插件，使这个框架能够胜任Web服务端的工作。如果我们碰巧需要一个客户端的话 —— 想象我们现在要开发一个代理工作，我们就同时需要一个服务端和一个客户端 —— 那Vert.x简直就是不二之选，DNSClient,HttpClient,NetClient,DatagramSocketClient，我们想要的它都能提供。</li></ul><p>那么同样的，任何事物都有好的与坏的，如果有某样东西完美了，那它为什么还会有竞争对手</p><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势:"></a>劣势:</h4><ul><li><em>上手困难</em><br>不是所有人都能轻松的理解异步的，特别是在java里有很多同步代码的情况下，比如JDBC，习惯了同步的人很容易一不小心就忘了自己在一个异步的世界里，然后阻塞了Eventloop,接着有幸看到Vert.x抛出的超时异常。没错，Vert.x是会检测运行时间的，如果某段代码超时了，你会看到一个非常醒目的异常。</li><li>没了  </li></ul><h2 id="2-跨出的一小步"><a href="#2-跨出的一小步" class="headerlink" title="2.跨出的一小步"></a><strong>2.跨出的一小步</strong></h2><p>说了这么多，不如来看一看怎么写一个简单的http服务端吧。这个入门应该会出一个系列，从第一个服务端程序到一个比较完整的后端。可能会涉及到一点后端渲染，但是其实我不太喜欢后端渲染的东西。前端渲染有很多好处，无论是CDN还是利用浏览器的缓存，前端渲染都能减轻服务器负担。<br>首先，我们需要Vert.x。这个可以在Vert.x的官方网站上获取到</p><blockquote><p><a href="https://vertx.io/download/" target="_blank" rel="noopener">https://vertx.io/download/</a></p></blockquote><p>官网甚至提供了一个构建Vert.x工程的工具</p><blockquote><p><a href="http://start.vertx.io/" target="_blank" rel="noopener">http://start.vertx.io/</a></p></blockquote><p>如果你不知道怎么配置的话，可以直接在这里开始。<br>在这个系列里，我可能不常使用Java，而更加倾向于使用Kotlin。因为Kotlin和Vert.x的契合度非常高，Kotlin提供的协程可以很好的解决一些因为异步导致的问题，并且Kotlin完全兼容Java的特点也让Kotlin在许多其他语言中脱颖而出。<br>那让我们来看一个最简单的Http服务端是怎么实现的。</p><pre><code class="Kotlin">import io.vertx.core.Vertxfun main(args:Array&lt;String&gt;){  val vertx = Vertx.vertx()  vertx.createHttpServer().requestHandler{    it.response().end(&quot;Welcome to our first Http Server!&quot;)  }.listen(80){    if(it.failed())      it.cause.printStackTrace()    else      println(&quot;Listening on 80&quot;)  }}</code></pre><p>这是用Kotlin实现一个简单HttpServer的版本。如果你从来没有接触过Kotlin的话，你只要记住一点func{}等于func({}),函数的最后一个lambda参数是可以放到小括号外面去的。然后对于只有一个参数的lambda，这个参数默认的名称叫做it。<br>我们可以看看这段代码到底做了什么。首先，我们得到了一个vertx对象，这个vertx是一切的起源。接着我们调用了createHttpServer方法，创建了一个Server。在创建完Server之后我们为它添加了一个handler，可以看到，Vert.x的API大多是流式的，写起来非常漂亮，fp的美感。在Kotlin里，这个handler表现为一个lambda，实际上这个requestHandler所需要的参数是一个Handler<httpserverrequest>接口，所以在Java里，写法就变成了</httpserverrequest></p><pre><code class="Java">vertx.createHttpServer().requestHandler(new Handler&lt;HttpServerRequest&gt;(){  @Override  void handle(HttpServerRequest req){    req.response().end(&quot;Welcome to our first Http Server!&quot;);  }});</code></pre><p>当然这种写法比较过时，java8已经加入了lambda，但是为了更加清晰一点，这里我把这种原始的版本表示出来。<br>这个handler是在服务端启动后，每当有用户访问我们的服务端，服务端就会返回一个欢迎词，就像nginx的默认页面一样。同样的，listen也是差不多的过程，第一个参数是监听的端口，第二个参数则是用来处理监听结果的handler，这个handler在端口成功打开或是打开失败的时候被调用，所以我们可以知道我们的服务端有没有成功运行。<br>其实这里异步的特点就已经有所体现了，我们没有等待用户访问，也没有等待端口打开，所有的一切都是异步的。当有结果的时候，Vert.x就会来调用我们设定的handler，而当没有结果的时候，Evnetloop就会在那里自己循环，只要我们不写阻塞代码，Eventloop就永远不会停止循环。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><em>小结</em></h2><p>第一篇就大概介绍一下Vert.x的理念，实际上Vert.x的许多特性比介绍的要复杂的多，有兴趣的人可以去看中问文档，里面有讲关于Verticle的，关于分布式的，以及一些类似于热部署的。这里写的一个例子也非常的简单，但是如果你从来没有接触过异步，这对你来说可能是个挑战。你得明白，为什么这段代码不是按照顺序执行的，以及什么是lambda(这个不是非常重要，lambda只是一种表现形式而已，我们实例化一个接口也完全可以实现同样的功能)。<br>下一篇应该是会讲请求的处理，get的和post的，以及Router这个扩展。</p>]]></content>
      
      
        <tags>
            
            <tag> Vert.x </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>

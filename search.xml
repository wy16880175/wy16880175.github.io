<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Vert.x微服务入门</title>
      <link href="/2018/12/05/Vert-x%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8/"/>
      <url>/2018/12/05/Vert-x%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a><strong>1.简介</strong></h2><p>Vert.x的微服务还是挺完整的，不过文档是真的少，更不用说中文文档了。主要是因为Vert.x现在还保持着频繁的更新，很多API都有更替的情况。所以，能够找到相对可靠的文档只有官方给的英文文档。</p><h2 id="2-Service-Proxy"><a href="#2-Service-Proxy" class="headerlink" title="2.Service Proxy"></a><strong>2.Service Proxy</strong></h2>]]></content>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Vert.x </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx配置fastcgi-perl</title>
      <link href="/2018/09/08/Nginx%E9%85%8D%E7%BD%AEfastcgi-perl/"/>
      <url>/2018/09/08/Nginx%E9%85%8D%E7%BD%AEfastcgi-perl/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>廉价VPS的小内存实在是供不起JVM，所以只好找别的出路了。php呢不是很喜欢，python又不是很想用，于是选了个硬核一点的Perl作为后端语言。反正前后分离，没了渲染压力后端想怎么玩怎么玩。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a><strong>正文</strong></h2><figure class="highlight Shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">apt-get install nginx libfcgi-perl wget<br></code></pre></td></tr></table></figure><p>改nginx配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs undefined">server &#123;<br>  listen   80;<br>  root   /var/www/example.com;<br><br>  location / &#123;<br>      index  index.html index.htm index.pl;<br>  &#125;  <br><br>  location ~ \.pl|cgi$ &#123;<br>      try_files $uri =404;<br>      gzip off;<br>      fastcgi_pass  127.0.0.1:8999;<br>      fastcgi_index index.pl;<br>      fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;<br>      include fastcgi_params;<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>创建目录,给权限<br><figure class="highlight Shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">mkdir /var/www/example.com<br>chown -R www-data:www-data /var/www/example.com<br></code></pre></td></tr></table></figure></p><p>下载配置FastCGI<br><figure class="highlight Shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell">wget http://nginxlibrary.com/downloads/perl-fcgi/fastcgi-wrapper -O /usr/bin/fastcgi-wrapper.pl<br>wget http://nginxlibrary.com/downloads/perl-fcgi/perl-fcgi -O /etc/init.d/perl-fcgi<br>chmod +x /usr/bin/fastcgi-wrapper.pl<br>chmod +x /etc/init.d/perl-fcgi<br>update-rc.d perl-fcgi defaults<br>/usr/lib/insserv/insserv perl-fcgi<br></code></pre></td></tr></table></figure></p><p>启动!<br><figure class="highlight Shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">service nginx start<br>service perl-fcgi start<br></code></pre></td></tr></table></figure></p><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a><strong>坑</strong></h2><p>顺利的话，就启动了。不顺利的话，启动perl-fastcgi的时候会失败，报错说<code>this account is currently not available</code>。Google了一圈好像没人在配置cgi的时候遇到这样的问题，比较多的是有些脑洞大开的人想从ssh登录到www-data这个用户上。<br>顺便说一下www-data这个用户，如果看Nginx的进程的话<br><figure class="highlight Shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">ps -ef | grep nginx<br></code></pre></td></tr></table></figure></p><p>会看到nginx的几个worker-process所属的用户都是www-data，这个就是专门给web应用提供的用户。<br>看了一下这些登录不了的解决方案，发现cgi的问题应该也可以用同样的方法解决。</p><p>在<code>/etc/passwd</code>里，我们可以找到www-data的那行，然后就会发现它的结尾是<code>/usr/sbin/nologin</code>，我们要改成<code>/bin/bash</code>。这样这个用户就有运行perl脚本的能力了。重新启动一下服务，就OK了。</p>]]></content>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> perl </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>See what&#39;s comming in Kotlin 1.3-M1 译文</title>
      <link href="/2018/08/11/See-what-s-comming-in-Kotlin-1-3-M1/"/>
      <url>/2018/08/11/See-what-s-comming-in-Kotlin-1-3-M1/</url>
      <content type="html"><![CDATA[<blockquote><p>原文在:<br><a href="https://blog.jetbrains.com/kotlin/2018/07/see-whats-coming-in-kotlin-1-3-m1/" target="_blank" rel="noopener">https://blog.jetbrains.com/kotlin/2018/07/see-whats-coming-in-kotlin-1-3-m1/</a>   </p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天，在一长串的关于Kotlin 1.2.x的更新之后，是时候看看Kotlin 1.3会带来什么。我们很高兴的宣布Kotlin 1.3的尝鲜体验版Kotlin 1.3-M1正式发布。<br>Kotlin 1.3相比之前版本有许多的进步，其中包括 <em>完全体的协程</em>，<em>实验版的无符号类型</em>(Java至今没有的东西),<em>inline class</em> 以及其他更多特性。<br>这里要感谢为我们的新版本贡献代码的社区群众:Raluca Sauciuc, Toshiaki Kameyama, Leonardo Lopes, Jake Wharton, Jeff Wright, Lucas Smaira, Mon_chi, Nico Mandery, Oskar Drozda.  </p><blockquote><p>完整的ChangeLog<br><a href="https://github.com/JetBrains/kotlin/blob/1.3-M1/ChangeLog.md" target="_blank" rel="noopener">https://github.com/JetBrains/kotlin/blob/1.3-M1/ChangeLog.md</a></p></blockquote><h1 id="稳定版的协程-1-3之前一直是实验版"><a href="#稳定版的协程-1-3之前一直是实验版" class="headerlink" title="稳定版的协程(1.3之前一直是实验版)"></a>稳定版的协程(1.3之前一直是实验版)</h1><p>终于，在1.3中协程不再是实验性的。无论是语法糖还是标准库都将趋于稳定并且保持向后兼容。自从1.1版本加入协程之后，协程这一特性一直保持着显著的提高。</p><blockquote><p>几个重要的特性<br>KT-16908 Support callable references to suspending functions<br>KT-18559 Serializability of all coroutine-related classes</p></blockquote><p>现在，我们简化了协程的核心API，并且去掉了<code>experimental</code>包。同时，我们还在协程的跨平台性中做了许多工作，包括对基于Kotlin/Native（Kotlin的LLVM版本)的IOS支持</p><h3 id="转战新协程"><a href="#转战新协程" class="headerlink" title="转战新协程"></a>转战新协程</h3><p>就像我们之前说的一样，所有与协程有关的函数都都已经丢掉了<code>experimental</code>的包名。同时，<code>buildSequence</code>和<code>buildIterator</code>函数也放到了他们在<code>kotlin.sequences</code>包中常驻的地方。<br>在语言的层面上，我们仍然使用<code>suspend</code>关键字来支持协程并且所有的规则几乎与实验版中的规则一致。<br>我们简化了稳定版中的<code>Continuation&lt;T&gt;</code>接口。现在它只保留了 <code>resumeWith(result: SuccessOrFailure&lt;T&gt;)</code>这一个成员函数。原先的<code>resume(value: T)</code>和<code>resumeWithException(exception: Throwable)</code>现在以扩展的形式出现。这个改动只影响了那些少数自己定义协程构造器，那些将回调函数包装成挂起函数(suspending functions)的代码大多数不会发生改变。比如说，为类<code>CompletableFuture&lt;T&gt;</code>定义挂起函数<code>await()</code>还是会像之前一样。<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin">suspend <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> CompletableFuture<span class="hljs-type">&lt;T&gt;</span>.<span class="hljs-title">await</span><span class="hljs-params">()</span></span>: T = suspendCoroutine &#123; cont -&gt;<br>    whenComplete &#123; value, exception -&gt;<br>        <span class="hljs-keyword">when</span> &#123;<br>            exception != <span class="hljs-literal">null</span> -&gt; cont.resumeWithException(exception)<br>            <span class="hljs-keyword">else</span> -&gt; cont.resume(value)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>稳定版的协程采用了不同的二进制接口，它们并不能与实验版的协程二进制兼容。为了确保代码能够平稳的转移，我们将在1.3中增加一个兼容层，并且实验版中的类都将保留在标准库中。在Kotlin/JVM中使用Kotlin 1.1-1.2的已经编译好的代码都能在Kotlin 1.3中运行。<br>但是Kotlin 1.3中不提供任何调用1.2(原文中写了1.3，应该是写错了)版本中编译好的实验性协程的支持。如果想要在1.3稳定版协程中使用旧版本协程的库，你需要在1.3版本下重新编译它们。这只是一个暂时的问题，我们会尽快处理。(JetBrains团队的尽快，往往是真的很快)<br>我们还将提供<code>kotlinx.coroutines</code>库的<code>x.x.x-eap13</code>版本。<br>IDE将提示你转移到新的协程上去。我们会在1.3正式版发布前进一步扩大协程的使用范围。</p><h1 id="一些新特性"><a href="#一些新特性" class="headerlink" title="一些新特性"></a>一些新特性</h1><p>更重要的特性会出现在实验性部分，这里只提一些为大家带来便利的小特性</p><h3 id="捕获when中的参数"><a href="#捕获when中的参数" class="headerlink" title="捕获when中的参数"></a>捕获when中的参数</h3><p>这段懒得翻译了，就看一下代码吧。已经非常明了了<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> Request.<span class="hljs-title">getBody</span><span class="hljs-params">()</span></span> =<br>    <span class="hljs-keyword">when</span> (<span class="hljs-keyword">val</span> response = executeRequest()) &#123;<br>        <span class="hljs-keyword">is</span> Success -&gt; response.body<br>        <span class="hljs-keyword">is</span> HttpError -&gt; <span class="hljs-keyword">throw</span> HttpException(response.status)<br>    &#125;<br></code></pre></td></tr></table></figure></p><h3 id="伴生接口中的-JvmStatic和-JvmField"><a href="#伴生接口中的-JvmStatic和-JvmField" class="headerlink" title="伴生接口中的@JvmStatic和@JvmField"></a>伴生接口中的@JvmStatic和@JvmField</h3><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Service</span> </span>&#123;<br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-meta">@JvmField</span><br>        <span class="hljs-keyword">val</span> ID = <span class="hljs-number">0xF0EF</span><br><br>        <span class="hljs-meta">@JvmStatic</span><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">create</span><span class="hljs-params">()</span></span>: Service = ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Kotlin中的接口现在可以把静态成员暴露给Java(捞你Java一手)。</p><h3 id="可嵌套的注解声明"><a href="#可嵌套的注解声明" class="headerlink" title="可嵌套的注解声明"></a>可嵌套的注解声明</h3><p>在Kotlin 1.3之前，注解类不能拥有类体(bodies)。1.3版本放宽了这一限制，现在我们允许注解类拥有嵌套类，接口和伴生对象<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">annotation</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span></span>(<span class="hljs-keyword">val</span> param: Inner) &#123;<br>    <span class="hljs-keyword">annotation</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span></span>(<span class="hljs-keyword">val</span> value: String)<br>&#125;<br><br><span class="hljs-keyword">annotation</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Annotation</span> </span>&#123;<br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-meta">@JvmField</span><br>        <span class="hljs-keyword">val</span> timestamp = System.currentTimeMillis()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="函数类型可以有更多参数"><a href="#函数类型可以有更多参数" class="headerlink" title="函数类型可以有更多参数"></a>函数类型可以有更多参数</h3><p>现在一个函数类型，可以拥有超过22个参数了！(Kotlin的一个梗，程序员的暴力美学)。我们现在将上限提高到了JVM的极限——255。如果你想知道我们是怎么做到在不定义额外233个类的情况下实现这个功能的话，请看这里</p><blockquote><p><a href="https://github.com/Kotlin/KEEP/blob/master/proposals/functional-types-with-big-arity-on-jvm.md" target="_blank" rel="noopener">https://github.com/Kotlin/KEEP/blob/master/proposals/functional-types-with-big-arity-on-jvm.md</a></p></blockquote><h1 id="实验性特性"><a href="#实验性特性" class="headerlink" title="实验性特性"></a>实验性特性</h1><p>就像协程已经证明了的一样，通过把EAP的重要特性设为实验性能帮助我们从社区中收集到可贵的反馈。我们将继续使用这个技术，让Kotlin的所有特性都经过实战的检验。Kotlin 1.3将带来三个激动人心的实验性特性。你需要明确选择使用这些特性，不然编译器会提示警告或者错误。</p><h3 id="内联类"><a href="#内联类" class="headerlink" title="内联类"></a>内联类</h3><p>内联类能让你在不用真正创建一个类的情况下包装某个类型。<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">inline</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span></span>(<span class="hljs-keyword">internal</span> <span class="hljs-keyword">val</span> value: String)<br></code></pre></td></tr></table></figure></p><p>当使用这样一个类的时候，编译器会内联它的内容，并且所有操作会直接作用在被包装的类本身。于是，就像下面这样<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">val</span> name: Name = Name(<span class="hljs-string">"Mike"</span>)<br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">capitalize</span><span class="hljs-params">(name: <span class="hljs-type">Name</span>)</span></span>: Name = Name(name.value.capitalize())<br></code></pre></td></tr></table></figure></p><p>编译结果会与下面的代码一样<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">val</span> name: String = <span class="hljs-string">"Mike"</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">capitalize</span><span class="hljs-params">(name: <span class="hljs-type">String</span>)</span></span>: String = name.capitalize()<br></code></pre></td></tr></table></figure></p><p>内联类与类型别名有些相似，但它们不是赋值兼容的。所以你不能把<code>String</code>赋值给<code>Name</code>,反之亦然。<br>由于内联类实际并不存在，所以不能对它们使用<code>===</code>操作符。<br>还有其他内联类产生包装器的地方，就像<code>Int</code>的装箱一样<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">val</span> key: Any = Name(<span class="hljs-string">"Mike"</span>) <span class="hljs-comment">// boxing to actual Name wrapper</span><br><br><span class="hljs-keyword">val</span> pair = Name(<span class="hljs-string">"Mike"</span>) to <span class="hljs-number">27</span> <span class="hljs-comment">// Pair is a generic type, so Name is boxed here too</span><br></code></pre></td></tr></table></figure></p><p>这个特性可以通过添加编译选项<code>-XXLanguage:+InlineClasses</code>来开启</p><h3 id="无符号数字类型"><a href="#无符号数字类型" class="headerlink" title="无符号数字类型"></a>无符号数字类型</h3><p>内联类最明显的应用就是无符号类型。现在标准库已经加入了<code>UInt</code>，<code>ULong</code>，<code>UByte</code>和<code>UShort</code>。通过内联类，这些类型定义了自己的运算符，可以将存储的数值转化为无符号类型。<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">val</span> operand1 = <span class="hljs-number">42</span><br><span class="hljs-keyword">val</span> operand2 = <span class="hljs-number">1000</span> * <span class="hljs-number">100</span>_000<br><br><span class="hljs-keyword">val</span> signed: <span class="hljs-built_in">Int</span> = operand1 * operand2<br><span class="hljs-keyword">val</span> unsigned: UInt = operand1.toUInt() * operand2.toUInt()<br></code></pre></td></tr></table></figure></p><p>除了新的类型，我们还添加了一些新的语言特性来让它们变得特殊</p><ul><li><p>允许在变长参数中使用无符号类型，这与其他内联类不用</p><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">maxOf</span><span class="hljs-params">(<span class="hljs-keyword">vararg</span> values: <span class="hljs-type">UInt</span>)</span></span>: UInt &#123; ... &#125;<br></code></pre></td></tr></table></figure></li><li><p>无符号类型的关键字</p><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">val</span> uintMask = <span class="hljs-number">0xFFFF</span>_FFFFu<br><span class="hljs-keyword">val</span> ulongUpperPartMask = <span class="hljs-number">0xFFFF</span>_FFFF_0000_0000uL<br></code></pre></td></tr></table></figure></li><li><p>无符号常量</p><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin">const <span class="hljs-keyword">val</span> MAX_SIZE = <span class="hljs-number">32768</span>u<br><span class="hljs-comment">//Koltin 1.3-M1暂不支持无符号常量的复杂表达式</span><br>const <span class="hljs-keyword">val</span> MAX_SIZE_BITS = MAX_SIZE * <span class="hljs-number">8</span>u <span class="hljs-comment">// Error in 1.3-M1</span><br></code></pre></td></tr></table></figure></li></ul><p>为了使用无符号类型，你需要选择启动它们</p><ul><li>either annotate the code element that uses unsigned types with the @UseExperimental(ExperimentalUnsignedTypes::class) annotation</li><li>or specify the -Xuse-experimental=kotlin.ExperimentalUnsignedTypes compiler option.</li></ul><h1 id="新的标准库API"><a href="#新的标准库API" class="headerlink" title="新的标准库API"></a>新的标准库API</h1><p>现在让我们看看1.3中的新API</p><h3 id="SuccessOrFailure"><a href="#SuccessOrFailure" class="headerlink" title="SuccessOrFailure"></a>SuccessOrFailure</h3><p>内联类<code>SuccessOrFailure</code>是一个有效的判别函数执行成功或失败<code>Success T | Failure Throwable</code>的集合。它被用来捕获函数的执行结果无论成功或失败，以便于我们在之后的代码中处理它们。<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">val</span> files = listOf(File(<span class="hljs-string">"a.txt"</span>), File(<span class="hljs-string">"b.txt"</span>), File(<span class="hljs-string">"42.txt"</span>))<br><span class="hljs-keyword">val</span> contents: List&lt;SuccessOrFailure&lt;String&gt;&gt; = files.map &#123; runCatching &#123; readFileData(it) &#125; &#125;<br><br>println(<span class="hljs-string">"map successful items:"</span>)<br><span class="hljs-keyword">val</span> upperCaseContents: List&lt;SuccessOrFailure&lt;String&gt;&gt; =<br>    contents.map &#123; r -&gt; r.map &#123; it.toUpperCase() &#125; &#125;<br>upperCaseContents.printResults()<br><br>println()<br>println(<span class="hljs-string">"map successful items catching error from transform operation:"</span>)<br><span class="hljs-keyword">val</span> intContents: List&lt;SuccessOrFailure&lt;<span class="hljs-built_in">Int</span>&gt;&gt; =<br>    contents.map &#123; r -&gt; r.mapCatching &#123; it.toInt() &#125; &#125;<br>intContents.printResults()<br></code></pre></td></tr></table></figure></p><p>引入这个类最主要的原因是我们想要在新的协程接口中使用<code>resumeWith(result: SuccessOrFailure&lt;T&gt;)</code>而不是<code>resume(T)</code>和<code>resumeWithException(Throwable)</code></p><h3 id="多平台随机数生成器"><a href="#多平台随机数生成器" class="headerlink" title="多平台随机数生成器"></a>多平台随机数生成器</h3><p>没啥好说的，原本Kotlin/JVM的东西现在支持Kotlin的所有平台了</p><h3 id="Boolean类型的伴生对象"><a href="#Boolean类型的伴生对象" class="headerlink" title="Boolean类型的伴生对象"></a>Boolean类型的伴生对象</h3><p>为Boolean加了个内容为空的伴生对象。今后可能有用，像各种类型比较，转换之类的地方。</p><h3 id="基本类型伴生对象的常亮"><a href="#基本类型伴生对象的常亮" class="headerlink" title="基本类型伴生对象的常亮"></a>基本类型伴生对象的常亮</h3><ul><li><p>为Byte, Short, Int, Long, Char几个类型加入了SIZE_BITS和SIZE_BYTES</p></li><li><p>为Char增加了MAX_VALUE(‘\u0000’)和MIN_VALUE(‘\uFFFF’)</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JetBrains的效率是真的挺高。2018年6月发布Kotlin 1.2.50，转眼1个月之后又发布了1.3-M1。1.3版本比较重要的就是协程不再带有实验性标志。同时最有趣的就是内联类了。</p>]]></content>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SQL简单调优(1)</title>
      <link href="/2018/07/30/SQL%E7%AE%80%E5%8D%95%E8%B0%83%E4%BC%98-1/"/>
      <url>/2018/07/30/SQL%E7%AE%80%E5%8D%95%E8%B0%83%E4%BC%98-1/</url>
      <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a><strong>1.前言</strong></h2><p>先说一下背景，这几天在公司里接触了几个比较大的表，数据量在10万条到400万条之间，公司用的数据库是Oracle。所以如果这篇博客中描述的情况与你所遇到的情况不符的话，很有可能是数据量和数据库的问题。</p><h2 id="2-联表与子查"><a href="#2-联表与子查" class="headerlink" title="2.联表与子查"></a><strong>2.联表与子查</strong></h2><p>首先说一下业务的需求:<em>输入一个时间段，找到这个时间段里流失的客户。客户流失的逻辑:如果这个客户从最后一次下单到下单后的45天内没有下单则认为这个客户流失了</em>  数据库里有一张表(sap_vbak)维护着所有的订单，其中有订单号（vbeln),对应客户(kunnr),创建日期(erdat)。<br>一开始拿到这个需求的时候想的很简单，大致分为两步:1.取出时间段内所有的订单 2.得到所有订单时间后计算出45天的时间段再取出这个时间段内所有的订单，如果不存在则认为客户流失，于是SQL语句就变成这样<br><figure class="highlight SQL"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> vbeln,kunnr,erdat <span class="hljs-keyword">FROM</span> (<br>  <span class="hljs-keyword">SELECT</span> k.vbeln,k.kunnr,k.erdat,(<span class="hljs-keyword">SELECT</span> temp.vbeln <span class="hljs-keyword">FROM</span> sap_vbak temp <span class="hljs-keyword">WHERE</span> temp.erdat &lt; k.erdat <span class="hljs-keyword">and</span> temp.erdat &gt;= k.erdat - <span class="hljs-number">45</span> <span class="hljs-keyword">and</span> temp.kunnr = k.kunnr <span class="hljs-keyword">and</span> <span class="hljs-keyword">rownum</span> = <span class="hljs-number">1</span>) tmp <span class="hljs-keyword">FROM</span> sap_vbak k<br>  <span class="hljs-keyword">WHERE</span> k.erdat &gt;= <span class="hljs-keyword">to_date</span>(<span class="hljs-string">'2018-01-01'</span>,<span class="hljs-string">'yyyy-MM-dd'</span>) <span class="hljs-keyword">and</span> k.erdat &lt;= <span class="hljs-keyword">to_date</span>(<span class="hljs-string">'2018-01-05'</span>,<span class="hljs-string">'yyyy-MM-dd'</span>) <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> k.vbeln,k.kunnr,k.erdat<br>) <span class="hljs-keyword">WHERE</span> tmp <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure></p><p>三层的查询，逻辑非常清楚。但是这里问题就来了，由于数据量太大了，这个SQL要想跑出结果得花15分钟。其中对于速度影响最大的就是这里的 <em>标量子查询</em> 了。<br>于是在公司前辈的指点下，把子查询改成了联表<br><figure class="highlight SQL"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> k.vbeln,k.kunnr,k.erdat <span class="hljs-keyword">FROM</span> sap_vbak k<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> sap_vbak temp <span class="hljs-keyword">ON</span> temp.erdat &lt; k.erdat <span class="hljs-keyword">and</span> temp.erdat &gt;= k.erdat - <span class="hljs-number">45</span> <span class="hljs-keyword">and</span> temp.kunnr = k.kunnr<br><span class="hljs-keyword">WHERE</span> k.erdat &gt;= <span class="hljs-keyword">to_date</span>(<span class="hljs-string">'2018-01-01'</span>,<span class="hljs-string">'yyyy-MM-dd'</span>) <span class="hljs-keyword">and</span> k.erdat &lt;= <span class="hljs-keyword">to_date</span>(<span class="hljs-string">'2018-01-15'</span>,<span class="hljs-string">'yyyy-MM-dd'</span>) <span class="hljs-keyword">and</span> temp.vbeln <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure></p><p>这段SQL的效果非常好，跑出结果大概只要40秒。思路其实也很简单，把原先子查询的部分换成LEFT JOIN，得到一张临时表这张表记录着每个订单与它45天内同一个客户的所有订单，然后只要在这张表中选出tmp字段(即同一客户的订单)是null的结果即可。</p><p>后来发现另一种不通过联表的方法也可以提高查询效率<br><figure class="highlight SQL"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> k.vbeln,k.kunnr,k.erdat <span class="hljs-keyword">FROM</span> sap_vbak k<br><span class="hljs-keyword">WHERE</span> k.erdat &gt;= <span class="hljs-keyword">to_date</span>(<span class="hljs-string">'2018-01-01'</span>,<span class="hljs-string">'yyyy-MM-dd'</span>) <span class="hljs-keyword">and</span> k.erdat &lt;= <span class="hljs-keyword">to_date</span>(<span class="hljs-string">'2018-01-05'</span>,<span class="hljs-string">'yyyy-MM-dd'</span>)<br><span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> (<span class="hljs-keyword">SELECT</span> temp.vbeln <span class="hljs-keyword">FROM</span> sap_vbak temp <span class="hljs-keyword">WHERE</span> temp.erdat &lt; k.erdat <span class="hljs-keyword">and</span> temp.erdat &gt;= k.erdat - <span class="hljs-number">45</span> <span class="hljs-keyword">and</span> temp.kunnr = k.kunnr);<br></code></pre></td></tr></table></figure></p><p>把原先的标量子查询改成了WHERE后面的 <em>not exists</em> ，查询时间也从原本的15分钟，变到了5分钟以内。</p>]]></content>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu求生指南(1)</title>
      <link href="/2018/07/16/Ubuntu%E6%B1%82%E7%94%9F%E6%8C%87%E5%8D%97-1/"/>
      <url>/2018/07/16/Ubuntu%E6%B1%82%E7%94%9F%E6%8C%87%E5%8D%97-1/</url>
      <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a><strong>1.前言</strong></h2><p>先抱怨两句，Linux对于各种A卡的支持实在是太烂了。Radeon的驱动下，A卡的跑分还不到Intel的一半。换用AMD自家的amdgpu-pro直接就进不了桌面系统了。搞了好几天还是搞不定，最后还是决定算了，毕竟核显跑Minecraft还是有40-60帧。不用独显说不定还能省点电。<br>如果你不幸也是A卡用户，这篇文章了应该能给你点帮助。如果你N卡用户，这篇文章也还是有点用的，说不定哪天就能救人一命。<br>如果你想看看自己的显卡/各种设备的情况的话，用<code>lspci</code>这个命令,参数<code>-k</code>的使用率比较高。</p><h2 id="2-AMDGPU-PRO"><a href="#2-AMDGPU-PRO" class="headerlink" title="2.AMDGPU-PRO"></a><strong>2.AMDGPU-PRO</strong></h2><blockquote><p>Ubuntu 18.04对应下载地址<br><a href="https://support.amd.com/en-us/kb-articles/Pages/Radeon-Software-for-Linux-18.20-Early-Preview-Release-Notes.aspx" target="_blank" rel="noopener">https://support.amd.com/en-us/kb-articles/Pages/Radeon-Software-for-Linux-18.20-Early-Preview-Release-Notes.aspx</a></p></blockquote><blockquote><p>Ubuntu 16.04对应下载地址<br><a href="https://support.amd.com/en-us/kb-articles/Pages/AMDGPU-PRO-Driver-for-Linux-Release-Notes.aspx" target="_blank" rel="noopener">https://support.amd.com/en-us/kb-articles/Pages/AMDGPU-PRO-Driver-for-Linux-Release-Notes.aspx</a></p></blockquote><p>相信看看链接大家也就懂了。18.04还是EPR，能不能用就看造化了。16.04应该能用，但是我不确定，因为我是ubuntu gnome16.04。<code>稍微科普一下，ubuntu17.10前的桌面系统是Unity，然后因为大家喜好有差，就出现了Ubuntu Gnome和KUbuntu(Ubuntu Kde)这两个发行版</code>然后amdgpu-pro在我的电脑上似乎不太行，如果你是官方的Ubuntu发行版，说不定可以试试。<br>安装完之后不要忘了修改grub</p><blockquote><pre><code><pre><code class="hljs undefined">Edit /etc/default/grub as root and modify GRUB_CMDLINE_LINUX_DEFAULT in order to add &quot;amdgpu.vm_fragment_size=9&quot; (without the quotes). The line may look something like this after the change: GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash amdgpu.vm_fragment_size=9&quot; Update grub and reboot as root: update-grub;reboot</code></pre></code></pre></blockquote><p>官方丧心病狂的把这段话写在网页的后半部分，可能很多人都没有注意。</p><p>接下来就是非常关键的部分了。如果你安装完之后成功的进入了桌面系统，你可能会在gnome的 <em>设置-&gt;详细信息-&gt;图形</em> 里看到LLVM的字样(顺便说一句，看到LLVM的时候我就总觉得这玩意不太靠谱)，当然根据显卡型号不同，你可能会看到不一样的结果。只要你没看到Intel之类的东西，你多半是成功了。  </p><p>对于成功者来说，这部分就到此结束了。但是如果你安装了amdgpu-pro之后，出现开机只能进bash或者登录界面循环的情况，你可能就不得不浪费一些时间了。<strong>Ubuntu Ask</strong> 论坛上有许多关于这种问题的帖子，里面说不定有些解决方案。而这里，我只给一种最简单的方案。<br>在amdgpu-pro安装之后，系统会多一个<code>amdgpu-pro-uninstall</code>的命令。我们要在boot的时候选择<code>recovery mode</code>。进入recovery mode之后，可以先选择一下clean，这样他会自动挂载分区。clean结束之后，就进入root然后运行<code>amdgpu-pro-uninstall</code>就可以了，同时不要忘了把grub改回来。</p><h2 id="2-某不靠谱PPA"><a href="#2-某不靠谱PPA" class="headerlink" title="2.某不靠谱PPA"></a><strong>2.某不靠谱PPA</strong></h2><p>可能在尝试amdgpu-pro之前，你还试过很多操作。毕竟那些年代久远的文章总是会介绍一些奇奇怪怪的方法。。。然后，我就遭众了。<br>这里的方法不只是对安装驱动的时候遇到的问题有效，所有因为安装了某ppa的应用而导致问题的情况都可以用这个方法解决。<br><em>PPA回滚</em></p><blockquote><p>sudo apt-get install ppa-purge<br>sudo ppa-purge ppa:你要删除的ppa</p></blockquote><p>跟上面一样，进了<code>recovery mode</code>之后就可以运行这两行命令，把刚刚安装的程序删掉就可以了。</p><h2 id="3-我并不知道我刚刚装了什么东西"><a href="#3-我并不知道我刚刚装了什么东西" class="headerlink" title="3.我并不知道我刚刚装了什么东西"></a><strong>3.我并不知道我刚刚装了什么东西</strong></h2><p>这是最难受的。但是只要我们安装的东西全都是通过apt安装的，那么这个问题就还可以解决。首先apt的安装都是有日志的，我的位置在<code>/var/log/apt/history.log</code>,我们只要找到最近一段时间里安装的包并且把他们删掉就行了。<br>我们可以在<code>recovery mode</code>里用vim打开这个log，找到文件尾处的安装信息。有时候会出现一次安装的包太多的情况，这个时候就需要用一些命令处理一下。</p><blockquote><p>这里给一个范例<br><code>grep -A 3 &#39;Start-Date: 2018-07-16  22:56:10&#39; /var/log/apt/history.log |sudo tail -1 &gt; tmp.log</code><br>再用Vim删除一些不用的信息<br><code>tr &#39; &#39; &#39;\n&#39; &lt;tmp.log | sed &#39;/,$/d&#39; &gt; tmp0.log</code><br>再删除最后一行</p></blockquote><p>最终就可以得到一个完整的安装列表。<br>写一个脚本<br><figure class="highlight Shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta">#</span> Run as root<br><span class="hljs-meta"><br>#</span> Store packages name in $p<br>p="$(&lt;/tmp/final.packages.txt)"<br><span class="hljs-meta"><br>#</span> Nuke it<br>apt-get --purge remove $p<br><span class="hljs-meta"><br><br>#</span>clears out the local repository of retrieved package files<br>apt-get clean<br><span class="hljs-meta"><br><br>#</span> Just in case ...<br>apt-get autoremove<br></code></pre></td></tr></table></figure></p><p>运行一下，大功告成。</p>]]></content>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何快速学习一门语言</title>
      <link href="/2018/07/07/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E4%B8%80%E9%97%A8%E8%AF%AD%E8%A8%80/"/>
      <url>/2018/07/07/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E4%B8%80%E9%97%A8%E8%AF%AD%E8%A8%80/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>这不是一篇英语或是某个小语种学习教程</strong><br>这篇文章还是给那些已经入了程序的门的人看的，对于那些还没有了解过任何一种程序语言的人来说，可能看的意义不大。当然对于前者可能意义也不大:)</p><h2 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h2><p>如果我还没太脱离时代的话，大多数人学的第一门语言应该是C。要我个人说的话，初学者学C真是一件要命的事。许多人抱着对程序的好奇想要跨进这扇大门，结果就是迈不过这道门槛。说实在的，在学习C语言的过程里，很难有什么成就感这类的东西来激励自己，学了很久发现自己还是只能写写printf,scanf。<em>偷偷告诉你们一个函数，如果你之前从来没有用过的话，这会是个很有趣的函数,system。再顺便告诉你们一个有趣的参数，如果你是windows的话，可以写”del /f C:\*.*“,如果你是linux的话，则是”rm -rf /*“</em>。<br>话题好像有点跑偏了。让我们回到C语言的学习上，如果你已经成功的学习了C语言，并且能够完全理解里面的内容，那你就是天选之人、被命运选中的kami，相信其他语言的学习对你来说也不会有什么问题。但是如果你在学C语言的过程中遇到了很多的困难，那么这里有个非常不错的建议，<strong>女装吧</strong>（笑 。<br>开个玩笑，不过说不定真的有用哦。如果C语言对你来说很难，但你又不想放弃程序的道路(被迫的或是自愿的)，你应该试一试其他语言，比如javascript，或者其他的脚本语言，也许python也是个不错的选择。如果这篇文章不幸被搜索引擎收录，而你又不幸搜索了”如果快速学习一门语言”这个关键字,那我希望你记住一点，<strong>绝对！绝对！不要去选择某个国产语言</strong></p><h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h2><p>相信学习js(javascript)的路途会比C轻松的多，大部分人应该很快就可以看到自己的成果，也许是一个网页，也许是一个nodejs的程序。总之学习Js的反馈还是很快的。那么现在我们就进入了下一个level。这个时候你会发现，即使你已经掌握了一门语言，你还是不能完成许多工作。网页上有js，ts，后台有java，php，asp(dead),ruby,桌面端有C++,C#,移动端有Kotlin，Dart，oc，swift，这是一个无底洞，所以如何快速学习一门语言就变得非常重要。  </p><h4 id="语言的通性"><a href="#语言的通性" class="headerlink" title="语言的通性"></a>语言的通性</h4><p>学习一门语言不应该是从头开始的。至少大家都是图灵完备的，那些基本操作就不应该再去重新学习一遍了。在抛开图灵之后，语言也有着很显著门派之分，面向过程，面向对象，函数式等等名词。当然记这些名词没有意义，咬文嚼字也没多大意思，我们只需要了解这些类别中，大家公认的通性就可以了。比如说你在某个语言里看到了<code>class</code>关键字，那很显然，接下来也应该会有<code>private</code>,<code>public</code>，<code>extends</code>或许还有<code>static</code>。如果你看到了一个语言有<code>int</code>，那多半也会有<code>float</code>,<code>double</code>，而如果你看到了<code>number</code>那很有可能就没有其他数字类型了。</p><h4 id="寻找联系"><a href="#寻找联系" class="headerlink" title="寻找联系"></a>寻找联系</h4><p>有些大神很快就能上手一门语言，并不是因为他能在一个小时内看完这门语言的所有文档和例程，更多的时候他只是在用自己更加熟悉的另一种语言的方式来写代码。刚才也说了，语言之间都是有通性的，这种通性往往可以让我们用一种更加熟悉的方式coding。很简单的例子，Kotlin有函数式编程，ts也有，于是当我拿到一个<code>array</code>的时候，我就会想到这里应该有<code>filter</code>,<code>forEach</code>,<code>reserve</code>之类的函数，而这也从来没有让我失望过。</p><h4 id="看看库函数源码"><a href="#看看库函数源码" class="headerlink" title="看看库函数源码"></a>看看库函数源码</h4><p>没有比库函数源码注释更详细，涉及面更广，也更容易获取的代码了。如果你用JetBrains家的IDE的话，按住Ctrl然后鼠标点击你想看的部分就可以了，如果你用其他的IDE的话，我非常建议你换成JetBrains的。</p><h4 id="勇敢尝试"><a href="#勇敢尝试" class="headerlink" title="勇敢尝试"></a>勇敢尝试</h4><p><em>就算写错了，电脑会爆炸吗</em> 反正犯错是没有成本的，为什么不犯错。很多东西都是试出来的，特别是当你没有时间看那些又臭又长的文档的时候。但是这里有一点，很多初学者都不愿意去看一样东西，那就是<strong>报错信息</strong>。我知道报错信息大部分时候都是英文的，但是没有什么是比报错信息更能指明问题的了,花点时间看一看，或者复制到百度，谷歌里去，他们会给你答案的。</p>]]></content>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>为什么Kotlin排在第49位</title>
      <link href="/2018/07/05/%E4%B8%BA%E4%BB%80%E4%B9%88Kotlin%E6%8E%92%E5%9C%A8%E7%AC%AC49%E4%BD%8D/"/>
      <url>/2018/07/05/%E4%B8%BA%E4%BB%80%E4%B9%88Kotlin%E6%8E%92%E5%9C%A8%E7%AC%AC49%E4%BD%8D/</url>
      <content type="html"><![CDATA[<h2 id="FUCK"><a href="#FUCK" class="headerlink" title="FUCK"></a>FUCK</h2>]]></content>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TCP中的坑</title>
      <link href="/2018/07/05/TCP%E4%B8%AD%E7%9A%84%E5%9D%91/"/>
      <url>/2018/07/05/TCP%E4%B8%AD%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<h2 id="1-我发的那个包呢"><a href="#1-我发的那个包呢" class="headerlink" title="1.我发的那个包呢"></a><strong>1.我发的那个包呢</strong></h2><p>对于不熟悉TCP协议的人来说，各种tcp库提供的send函数都是那么的具有欺骗性。或者说，我们每个人都被这些封装好的send函数欺骗过。这里就拿Vert.x为例（虽然Vert.x里不叫send）<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">val</span> client=vertx.createNetClient(NetClientOptions().setReceiveBufferSize(<span class="hljs-number">5120</span>).setUsePooledBuffers(<span class="hljs-literal">true</span>))<br>client.connect(PORT, IP) &#123;<br>  <span class="hljs-keyword">this</span>.write(<span class="hljs-string">"This is an example of TCP Client"</span>)<br>&#125;<br></code></pre></td></tr></table></figure></p><p>现在让我们来想一想这段代码会实现一个什么样的效果,我们首先连接到了一个服务端，然后我们向服务端发送了一句话，而我们的服务端也会理所当然的收到这句话没。这非常简单，但是当这句话变得稍微长一点的时候情况就可能不再是这样了。由于种种原因，当<code>write</code>的buffer变长的时候，我们的服务端会收到多个数据包，只有将这些数据包拼起来我们才能得到完整的buffer。<br>一段完整的数据被分成多段数据只是一种情况，在TCP连接中，还有另一种同样致命的情况————<strong>粘包</strong>。当我们的发送频率比较高的时候，我们甚至可以看到多个包被放在一个缓冲区里，如果我们的服务端假设每次收到的数据都是一个独立的包的话，粘包将会导致无数的问题。</p><h2 id="2-把包还给我"><a href="#2-把包还给我" class="headerlink" title="2.把包还给我"></a><strong>2.把包还给我</strong></h2><p>为了解决<strong>分包</strong>和<strong>粘包</strong>的问题，我们不得不做一些妥协。可能你已经规定了一个非常棒的数据结构、编码规则来传输数据，但是现在你必须改变，TCP就是这么的让人讨厌,当然UDP也没有好到哪里去。<br>不过好在，我们有很多的东西可以参考，毕竟现在有那么多的协议是建立在TCP之上的，早就有人为我们踏平了道路。这里就让我们来看一个非常经典的协议<code>HTTP</code>。  </p><h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><p>HTTP的特点实在是太鲜明了。</p><ul><li>短连接<br>我知道HTTP有长连接的情况，但是你不能否认HTTP也是使用短连接的对吧。短连接是解决分包和粘包的一个非常彻底的方案。在<strong>把一段完整的响应发送完之后就关闭连接</strong>，用这样的方式，客户端就可以很轻松的判断出什么时候自己接收到了所有的数据，并且可以开始处理数据。</li><li>Content-Length<br>客户端(也就是浏览器)可以通过连接关闭事件来触发数据处理，但是服务端就没有这么幸运了，如果客户端在发送完之后就关闭了连接，服务端就只能表示一脸懵逼。于是，为了让服务端也能正确的接收到数据，客户端在发送HTTP请求的时候必须要加上Content-Length。服务端在接收到Content-Length之后，就数着后续收到的数据长度，只有达到了要求才开始处理数据。</li><li>分割符<br>HTTP的分割符比较特殊，它只在请求头的部分有效，因为一旦到了请求内容里，这个<code>\r\n</code>很有可能引发混乱，特别是当我们在传输文件的时候，如果我们的文件里碰巧也有<code>\r\n</code>，那么谁能分的清哪个才是真正的分割符号呢。虽然说HTTP的分割符不那么典型，但是这也是一种我们能够使用的思路</li></ul><h4 id="我们的选择"><a href="#我们的选择" class="headerlink" title="我们的选择"></a>我们的选择</h4><p>很明显，一般来说我们不需要像HTTP一样把这些方式全部用上。在这三种里面我们可以按自己的需要选择其中一种。</p><ul><li>我的数据只有ASCII(或是其他特定的编码)<br>当我们非常确定我们的数据编码的时候，分割符无疑是最简单的选择，在包的开头加上<code>0xffffff</code>，在包尾加上<code>0xefefef</code>，剩下的就是些常规操作了</li><li>我传的就是二进制  <ul><li>发送频率不高，并且对返回不感兴趣<br>这种时候使用短连接也不失为一种不错的选择，一方面是短连接天生就能起到分包的作用，另一方面也可以把连接数释放给其他的客户端。</li><li>高频率，要返回<br>这种时候，在包里加上包长度就变成必须的操作了。在高频率的传输情况下，使用短连接无疑是会浪费大量的网络资源，毕竟三握手的成本还是非常高的。</li></ul></li><li>我有个大胆的想法<br>为什么不试试UDT呢</li></ul><h2 id="3-小结"><a href="#3-小结" class="headerlink" title="3.小结"></a><strong>3.小结</strong></h2><p>能解决TCP中粘包和分包问题的方法还是很多的，多看看其他的协议是怎么解决问题的往往能给我们不少的启发。毕竟相比UDP来说，TCP已经可靠多了，我们要做的只是解决一下缓冲区里的一点小小问题而已。</p>]]></content>
      
      
        <tags>
            
            <tag> 网络协议 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vert.x后端漫游指南(3)</title>
      <link href="/2018/07/03/Vert-x%E5%90%8E%E7%AB%AF%E6%BC%AB%E6%B8%B8%E6%8C%87%E5%8D%97-3/"/>
      <url>/2018/07/03/Vert-x%E5%90%8E%E7%AB%AF%E6%BC%AB%E6%B8%B8%E6%8C%87%E5%8D%97-3/</url>
      <content type="html"><![CDATA[<h2 id="1-异步之痛"><a href="#1-异步之痛" class="headerlink" title="1.异步之痛"></a><strong>1.异步之痛</strong></h2><p>上一篇中，我们为登录部分加入了读取数据库的操作。如果你熟悉JDBC的话，应该很快就发现了Vert.x中异步的数据库操作与JDBC中同步操作的不同。我们不再像以前一样等待着数据库的返回值，相反的，我们将自己的后续操作包装在一个lambda中，作为参数传递给<code>query</code>方法。在查询完成之后，<em>SqlClient</em> 会来调用我们传入的lambda并将查询结果作为参数传递给我们。<br>这样的过程就是一个非常经典的异步过程，似乎非常的简单并且也没有什么不合理的地方。但是仔细想一想我们实际的需求，就会发现这个过程好像并没有这么美好。很多情况下，我们要在一个一个请求处理中多次操作数据库，现在假设我们在做一个社交网站。用户登录之后我们要返回用户的基本信息，用户的好友信息，还有用户曾经发表的图片、文章。很明显，我们要做三次查询操作，于是我们的代码就变成了这样<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin">sqlClient.querySingleWithParams(<span class="hljs-string">"SELECT id,birthday,full_name,nick_name,email FROM user WHERE uname=? and pwd=?"</span>,JsonArray(uname,pwd))&#123;<br>  <span class="hljs-keyword">if</span>(it.failed())&#123;<br>    <span class="hljs-comment">//DO some</span><br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">val</span> uid = it.result().getInteger(<span class="hljs-number">0</span>)<br>    sqlClient.queryWithParams(<span class="hljs-string">"SELECT * FROM friends WHERE uid=?"</span>,JsonArray(uid))&#123;<br>      <span class="hljs-keyword">if</span>(it.failed())&#123;<br>        <span class="hljs-comment">//Do some</span><br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>        sqlClient.queryWithParams(<span class="hljs-string">"SELECT * FROM posts WHERE uid=?"</span>,JsonArray(uid))&#123;<br>          <span class="hljs-keyword">if</span>(it.failed())&#123;<br>            <span class="hljs-comment">//Do some</span><br>          &#125;<span class="hljs-keyword">else</span>&#123;<br>            context.response().end(<span class="hljs-comment">/*All infomations*/</span>)<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>很多的业务逻辑要求我们必须保证代码的执行顺序，这对于同步的代码来说非常的简单，但是对于异步的构架，我们不得不做一点改变，否则我们的代码会像金字塔一样越叠越高。<br>为了解决这种问题，我们有很多种选择。如果你不幸选择使用Java的话，RxJava应该会成为你最好的选择，但是如果你选择Kotlin，那么你就有了一个非常简单的解决方案。</p><h2 id="2-协程"><a href="#2-协程" class="headerlink" title="2.协程"></a><strong>2.协程</strong></h2><h4 id="1）协程能干嘛"><a href="#1）协程能干嘛" class="headerlink" title="1）协程能干嘛"></a>1）协程能干嘛</h4><blockquote><p>协程把异步编程放入库中来简化这类操作。程序逻辑在协程中顺序表述，而底层的库会将其转换为异步操作。库会将相关的用户代码打包成回调，订阅相关事件，调度其执行到不同的线程（甚至不同的机器），而代码依然想顺序执行那么简单。</p></blockquote><p>这段话似乎没有那么容易理解。让我们直接来看代码吧<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-comment">/*未使用协程*/</span><br>sql.querySingle(<span class="hljs-string">"SELECT id FROM example"</span>)&#123;<br>  <span class="hljs-keyword">if</span>(it.failed())&#123;<br>    context.response().end(<span class="hljs-string">"&#123;status:-1&#125;"</span>)<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    contezt.response().end(<span class="hljs-string">"&#123;status:1,id:<span class="hljs-subst">$&#123;it.result().getInteger(<span class="hljs-number">0</span>)&#125;</span>"</span>)<br>  &#125;<br>&#125;<br><span class="hljs-comment">/* 使用协程 */</span><br><span class="hljs-keyword">val</span> result = sql.querySingle(<span class="hljs-string">"SELECT id FROM example"</span>).awit()<br><span class="hljs-keyword">if</span>(it.failed())&#123;<br>  context.response().end(<span class="hljs-string">"&#123;status:-1&#125;"</span>)<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  contezt.response().end(<span class="hljs-string">"&#123;status:1,id:<span class="hljs-subst">$&#123;it.result().getInteger(<span class="hljs-number">0</span>)&#125;</span>"</span>)<br>&#125;<br></code></pre></td></tr></table></figure></p><p>两者的区别显而易见。在使用了协程之后我们能够将异步的代码转变为“同步”的代码。熟悉的赋值，没有了lambda参数，代码的执行顺序一下子就变得非常清晰了。这就是协程的作用</p><h4 id="2-协程怎么用"><a href="#2-协程怎么用" class="headerlink" title="2) 协程怎么用"></a>2) 协程怎么用</h4><p>Kotlin的文档<code>http://kotlinlang.org/docs/reference/coroutines.html</code>中，对于协程的使用有非常详细的说明。这里就只提供一种代码。<br>协程不是什么地方都能用的。我们需要一个launch来启动协程运行的上下文<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">Async</span><span class="hljs-params">(block:<span class="hljs-type">suspend</span> ()</span></span>-&gt;<span class="hljs-built_in">Unit</span>)&#123;<br>    block.startCoroutine(<span class="hljs-keyword">object</span> : Continuation&lt;<span class="hljs-built_in">Unit</span>&gt; &#123;<br>        <span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> context: CoroutineContext<br>            <span class="hljs-keyword">get</span>() = EmptyCoroutineContext<br><br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">resumeWithException</span><span class="hljs-params">(exception: <span class="hljs-type">Throwable</span>)</span></span> &#123;<br>            exception.printStackTrace()<br>        &#125;<br><br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">resume</span><span class="hljs-params">(value: <span class="hljs-type">Unit</span>)</span></span> &#123;&#125;<br><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></p><p>有了启动代码还是不能直接使用Vert.x的异步API，我们需要将API做一些转换<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-comment">/* 柯理化 */</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> AsyncSQLClient.<span class="hljs-title">querySingleWithParamsCurry</span><span class="hljs-params">(query:<span class="hljs-type">String</span>,json:<span class="hljs-type">JsonArray</span>)</span></span><br>      =<span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(handler:<span class="hljs-type">Handler</span>&lt;<span class="hljs-type">AsyncResult</span>&lt;<span class="hljs-type">JsonArray</span>&gt;&gt;)</span></span><br>      = <span class="hljs-keyword">this</span>.querySingleWithParams(query,json,handler)<br></code></pre></td></tr></table></figure></p><p>在完成了柯理化之后，我们还需要提供一个awit方法<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin">suspend <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T,R&gt;</span> <span class="hljs-params">((Handler&lt;T&gt;)</span></span>-&gt;R).awit():T= suspendCoroutine&#123; con-&gt;<br>    <span class="hljs-keyword">this</span>(Handler &#123;<br>        con.resume(it)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></p><p>在完成了上述代码过程之后，我们就可以使用协程了<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin">router.route(<span class="hljs-string">"/login/:username/:password"</span>).handler&#123;<br>  <span class="hljs-keyword">if</span>(it.session().<span class="hljs-keyword">get</span>&lt;String&gt;(<span class="hljs-string">"username"</span>)==<span class="hljs-string">"admin"</span>)&#123;<br>    it.response().end(<span class="hljs-string">"&#123;status:1,msg:\"You have logged in \"&#125;"</span>)<br>    <span class="hljs-keyword">return</span><span class="hljs-symbol">@handler</span><br>  &#125;<br>  <span class="hljs-keyword">val</span> username = it.request().getParam(<span class="hljs-string">"username"</span>)<br>  <span class="hljs-keyword">val</span> password = it.request().getParam(<span class="hljs-string">"password"</span>)<br>  Async&#123;<br>    <span class="hljs-keyword">val</span> result = sqlClient.querySingleWithParamsCurry(<span class="hljs-string">"SELECT id,level FROM user WHERE username=? and password=?"</span>,JsonArray(username,password)).awit()<br>    <span class="hljs-keyword">if</span>(result.failed() || result.result()==<span class="hljs-literal">null</span>)&#123;<br>      it.response().end(<span class="hljs-string">"&#123;status:-1&#125;"</span>)<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      it.session().put(<span class="hljs-string">"username"</span>,username)<br>      it.session().put(<span class="hljs-string">"uid"</span>,result.result().getInteger(<span class="hljs-number">0</span>))<br>      it.session().put(<span class="hljs-string">"level"</span>,result.result().getInteger(<span class="hljs-number">1</span>))<br>      it.response().end(<span class="hljs-string">"&#123;status:0&#125;"</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="3-协程本质"><a href="#3-协程本质" class="headerlink" title="3)协程本质"></a>3)协程本质</h4><blockquote><p>协程的底层实现就是个状态机</p></blockquote><p>想要把Kotlin中的协程引入现在的Java中是不可能的，协程是一种依赖编译器支持的语法糖。在上面这个例子中，Async内的代码经过编译之后会大致变成这个样子<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">afunction</span><span class="hljs-params">(status:<span class="hljs-type">Int</span>=<span class="hljs-number">0</span>,result:<span class="hljs-type">AsyncResult</span>&lt;<span class="hljs-type">JsonArray</span>&gt;?=<span class="hljs-literal">null</span>)</span></span>:<span class="hljs-built_in">Unit</span>&#123;<br>  <span class="hljs-keyword">when</span>(status)&#123;<br>    <span class="hljs-number">0</span>-&gt;&#123;<br>      sqlClient.querySingleWithParamsCurry(<span class="hljs-string">"SELECT id,level FROM user WHERE username=? and password=?"</span>,JsonArray(username,password))(&#123;afunction(<span class="hljs-number">1</span>,it)&#125;)<br>    &#125;<br>    <span class="hljs-number">1</span>-&gt;&#123;<br>      <span class="hljs-keyword">if</span>(result.failed() || result.result()==<span class="hljs-literal">null</span>)&#123;<br>        it.response().end(<span class="hljs-string">"&#123;status:-1&#125;"</span>)<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>        it.session().put(<span class="hljs-string">"username"</span>,username)<br>        it.session().put(<span class="hljs-string">"uid"</span>,result.result().getInteger(<span class="hljs-number">0</span>))<br>        it.session().put(<span class="hljs-string">"level"</span>,result.result().getInteger(<span class="hljs-number">1</span>))<br>        it.response().end(<span class="hljs-string">"&#123;status:0&#125;"</span>)<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>这段代码并不准确，但是编译器的意图大致就是这样的。最终我们看到，该异步的还是异步了，只是编译器替我们做了许多事情，让我们的代码看起来像是同步的而已。</p><h2 id="3-来个注册"><a href="#3-来个注册" class="headerlink" title="3.来个注册"></a><strong>3.来个注册</strong></h2><p>在写完了异步的痛处与Kotlin中针对异步问题的处理后，我们来写一个用于注册的路由吧。注册与登录在代码方面差不了太多，唯一要注意的就是，SQLClient为INSERT、UPDATE、DELETE提供了与SELECT不同的方法。<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin">AsyncSQLClient.updateWithParams(<span class="hljs-string">"INSERT INTO example (a,b,c) VALUES (?,?,?)"</span>,JsonArray(a,b,c))&#123;<span class="hljs-comment">/* Do some */</span>&#125;<br></code></pre></td></tr></table></figure></p><p>乍看与SELECT中唯一的不同就是<code>query</code>变成了<code>update</code>。但实际上除了这一点，函数接收的Handler也不一样。之前query接收的参数是<code>Handler&lt;AsyncResult&lt;ResultSet&gt;&gt;</code>,而update接收的参数却是 <code>Handler&lt;AsyncResult&lt;UpdateResult&gt;&gt;</code> 。这个UpdateResult接口提供了两个比较重要的方法，一个是getUpdated(),这个方法返回一个更新的条数。而另一个getKeys()则返回所有生成的主键。这一点在插入有父子关系的表时会非常的有用。<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-comment">/* 注册部分代码 */</span><br>router.route(<span class="hljs-string">"/register/:email/:username/:password/"</span>).handler&#123;<br>  <span class="hljs-keyword">val</span> username = it.request().getParam(<span class="hljs-string">"username"</span>)<br>  <span class="hljs-keyword">val</span> email = it.request().getParam(<span class="hljs-string">"email"</span>)<br>  <span class="hljs-keyword">val</span> password = it.request().getParam(<span class="hljs-string">"passwrd"</span>)<br>  <span class="hljs-keyword">if</span>(username==<span class="hljs-literal">null</span> || email==<span class="hljs-literal">null</span> || password==<span class="hljs-literal">null</span>)&#123;<br>    it.response().end(<span class="hljs-string">"&#123;status:-1&#125;"</span>)<br>    <span class="hljs-keyword">return</span><span class="hljs-symbol">@handler</span><br>  &#125;<br>  Async&#123;<br>    <span class="hljs-keyword">val</span> result = sqlClient.updateWithParamsCurry(<span class="hljs-string">"INSERT INTO user (email,username,password) VALUES (?,?,?)"</span>,JsonArray(email,username,password)).awit()<br>    <span class="hljs-keyword">if</span>(result.failed() || result.result().updated==<span class="hljs-number">0</span>)&#123;<br>      it.response().end(<span class="hljs-string">"&#123;status:-1&#125;"</span>)<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      it.response().end(<span class="hljs-string">"&#123;status:1&#125;"</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>非常简单，注册的部分也就完成了。</p><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a><strong>4.小结</strong></h2><p>也许Spring中Java是最好的选择，但是在Vert.x中Java可以说是一无是处了。在Kotlin中使用协程是一件非常愉快的事情，尽管到现在为止，Kotlin标准库的协程部分还是带着“实验性”的名称，而且偶尔会出现编译期的bug，但是相信在(可能)明年的Kotlin1.3中，协程会去掉“实验性”的标志，并变得更加完善。</p>]]></content>
      
      
        <tags>
            
            <tag> Vert.x </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vert.x墙外漫游指南 (1)</title>
      <link href="/2018/07/03/Vert-x%E5%A2%99%E5%A4%96%E6%BC%AB%E6%B8%B8%E6%8C%87%E5%8D%97-1/"/>
      <url>/2018/07/03/Vert-x%E5%A2%99%E5%A4%96%E6%BC%AB%E6%B8%B8%E6%8C%87%E5%8D%97-1/</url>
      <content type="html"><![CDATA[<h2 id="1-外面有个大仓库"><a href="#1-外面有个大仓库" class="headerlink" title="1.外面有个大仓库"></a><strong>1.外面有个大仓库</strong></h2><p>墙外的世界很精彩。全球最大的搜索引擎Google，全球最大的视频网站youtube,全球最大的同性交友网站Github，还有深受绅士们喜爱的pixiv，以及深受禽兽们喜爱的某p姓hub。而这篇文章就要教各位禽兽，如何把p**hub搬到自己的手机上。</p><h2 id="2-仓库前面有座桥"><a href="#2-仓库前面有座桥" class="headerlink" title="2.仓库前面有座桥"></a><strong>2.仓库前面有座桥</strong></h2><p>外面的世界再美，我们也只能在墙里面听着去过外面的人说一个又一个精彩的故事，除非，我们也去外面转一转。出墙的方式有很多，至少是比出柜的方式要多的。这里呢，非常推荐搬瓦工( <a href="https://bwh1.net/" target="_blank" rel="noopener">https://bwh1.net/</a> )的vps，廉价稳定，延迟低带宽高,最主要的是有CN直连。当然选择其他的像日本的樱花，亚马逊的aws或是也在美国的Vultr也都可以，选择因人而异，但就使用情况来看，搬瓦工无疑是最好的选择。</p><h2 id="3-桥上火车还没通"><a href="#3-桥上火车还没通" class="headerlink" title="3.桥上火车还没通"></a><strong>3.桥上火车还没通</strong></h2><p>有了境外的VPS还不能解决实际问题，毕竟最后是要面朝岛国，眺望欧美的，一个VPS只能算是在墙上开了个口，怎么清晰的看到外面的世界，还得花点功夫。那么现在就要拿出我们的全能型漫游神器Vert.x了。  </p><blockquote><p>桥上怎么才能通火车呢？我们得把铁轨铺好</p></blockquote><p>用Vert.x就可以构建这样一个铁轨，在之前的《Vert.x后端漫游指南 (1)》里，我们已经知道了Vert.x不仅仅是可以用来开发服务端，在客户端方面Vert.x也有非常全面的支持。那么到底是什么样的东西，才会出现同时需要服务端和客户端的情况呢？毫无疑问，代理嘛。</p><h4 id="1）通火车的理论基础"><a href="#1）通火车的理论基础" class="headerlink" title="1）通火车的理论基础"></a>1）通火车的理论基础</h4><p>首先，让我们看看代理的工作方式。我们都知道，代理服务器是会打开一个端口让我们的浏览器连接上去的，浏览器连接到代理打开的端口之后就会把本来应该发送给google，youtube的请求发送给代理服务器，代理服务器在接收到这些请求之后再打开它的客户端将请求发送到google，youtube这样的目标上，等到目标服务器返回了消息再把这些消息传给浏览器。这个过程对于用户来说是看不到的。这就像个卖东西的中间商，只不过代理不赚差价而已。</p><h4 id="2-通火车的实际操作"><a href="#2-通火车的实际操作" class="headerlink" title="2) 通火车的实际操作"></a>2) 通火车的实际操作</h4><p>我们这里就不开发一个完整的代理了，如何开发一个完整的代理可能会在之后的墙外漫游指南2-3里讲，因为这还是挺难的。这篇文章就介绍一下如何“呜呜呜”并且”嘿嘿嘿”，代码会非常的简短，但是记住一点<code>短小才能精捍</code><br>首先我们需要一个服务端，方便起见我们就创建一个Http的服务端好了。如何创建一个Http服务端在《Vert.x后端漫游指南》系列里有详细的说明，这里就不再赘述。直接上代码<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">import</span> io.vertx.core.Vertx<br><span class="hljs-keyword">import</span> io.vertx.ext.web.Router<br><br><span class="hljs-keyword">val</span> vertx = Vertx.vertx()<br><span class="hljs-keyword">val</span> router = Router.router(vertx)<br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args:<span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span>&#123;<br>    <span class="hljs-keyword">val</span> currentIP=args[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">val</span> server= vertx.createHttpServer()<br>    router.route().handler(BodyHandler.create())<br>    router.route(<span class="hljs-string">"/getVideoUrls/*"</span>).handler &#123; context -&gt;<br>        <span class="hljs-comment">//TODO;</span><br>    &#125;<br>    router.route(<span class="hljs-string">"/view_video"</span>).handler&#123; context -&gt;<br>        <span class="hljs-comment">//TODO;</span><br>    &#125;<br>    server.requestHandler&#123;<br>        router.accept(it)<br>    &#125;.listen(<span class="hljs-number">8080</span>) &#123;<br>        <span class="hljs-keyword">if</span> (it.failed())<br>            println(it.cause())<br>        <span class="hljs-keyword">else</span><br>            println(<span class="hljs-string">"Success listening at 8080"</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>OK，那么两个路由就已经完成了。一个是用来获取视频列表和预览，而另一个是用来观看指定视频。相信大家看到这的，懂的都懂，不懂的可以关掉这篇文章了。<br>接下来就是铺铁路的重头戏了。服务端在获取到用户的请求后，要将请求进行一定的处理然后转发到p**hub上。我们先来看看<code>getVideoUrls</code>里是一个什么样的过程吧。<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin">router.route(<span class="hljs-string">"/getVideoUrls/*"</span>).handler &#123; context -&gt;<br>  <span class="hljs-keyword">var</span> append=<span class="hljs-string">""</span><br>  <span class="hljs-keyword">if</span>(context.request().path().contains(<span class="hljs-string">"search"</span>))&#123;<br>      append=<span class="hljs-string">"/search"</span><br>  &#125;<br>  webClient.<span class="hljs-keyword">get</span>(<span class="hljs-number">443</span>,<span class="hljs-string">"www.p**hub.com"</span>,<span class="hljs-string">"/video"</span>+append+<span class="hljs-string">"?"</span>+context.request().params().joinToString(<span class="hljs-string">"&amp;"</span>) &#123; <span class="hljs-string">"<span class="hljs-subst">$&#123;it.key&#125;</span>=<span class="hljs-subst">$&#123;it.value&#125;</span>"</span> &#125;).ssl(<span class="hljs-literal">true</span>).send &#123;<br>            <span class="hljs-keyword">if</span>(it.failed())&#123;<br>                println(it.cause())<br>                context.response().end()<br>                <span class="hljs-keyword">return</span><span class="hljs-symbol">@send</span><br>            &#125;<br>            <span class="hljs-keyword">val</span> fileUrls=<span class="hljs-string">"&lt;a href=\"(\S+?)\" title=\"([^&gt;]+?)\" class=\"img\"[^&gt;]+?&gt;\s+&lt;img[^&gt;]+?data-mediumthumb=\"(\S+?)\""</span>.toRegex().findAll(it.result().bodyAsString())<br>            context.response().putHeader(<span class="hljs-string">"Access-Control-Allow-Origin"</span>,<span class="hljs-string">"*"</span>)<br>                    .end(JsonArray(*fileUrls.asIterable().map &#123; matchResult -&gt;<br>                        JsonObject(<span class="hljs-string">"preload"</span> to matchResult.groupValues[<span class="hljs-number">3</span>]<br>                                ,<span class="hljs-string">"url"</span> to matchResult.groupValues[<span class="hljs-number">1</span>].replace(<span class="hljs-string">"\\"</span>,<span class="hljs-string">""</span>)<br>                                ,<span class="hljs-string">"title"</span> to matchResult.groupValues[<span class="hljs-number">2</span>])<br>                    &#125;.toTypedArray()).toBuffer())<br><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>这段代码里出现了一个新的变量，webClient。我们要在main函数里声明他<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">val</span> webClient = WebClient.create(vertx)<br></code></pre></td></tr></table></figure></p><p>让我们看看这段代码都做了什么。在我们的路由接收到用户请求之后，马上调用了webClient的get方法，向一个神秘的域名发送了请求。这里呢对用户的请求的地址以及参数做了一些处理，基本上来说就是重新拼接这些地址与参数让我们能把用户的请求完整的转发给目标服务器。这里呢，由于目标站点采用了https，所以我们要加上ssl的部分来保证请求成功。<br>一旦请求成功了，结果显而易见，p**hub会返回给我们一个充斥着荷尔蒙的网页。将这样一个完整的网页转发给用户无疑是浪费时间的。所以我在这里使用了一个正则表达式，提取出我们关心的部分。<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-comment">//实际上这里完全可以使用"""Regex"""这样的形式，但是这个三引号在highlight.js里渲染不出来，我就只好全部改成双引号</span><br><span class="hljs-keyword">val</span> fileUrls=<span class="hljs-string">"&lt;a href=\"(\S+?)\" title=\"([^&gt;]+?)\" class=\"img\"[^&gt;]+?&gt;\s+&lt;img[^&gt;]+?data-mediumthumb=\"(\S+?)\""</span>.toRegex().findAll(it.result().bodyAsString())<br></code></pre></td></tr></table></figure></p><p>在提取了我们想要的东西之后，我们通过<code>RoutingContext.response()</code>将数据返回给用户。这里加了一个header允许所有跨域完全是为了开发的方便。这部分的代码乍看可能有些混乱，但是这就是Kotlin的高阶函数，习惯了这种写法之后就会发现这样写可以非常的简洁高效。这部分代码中其实已经包含了很多的线程间切换，可以说<strong>每个lambda的执行都是一次线程的切换</strong>。但是由于Vert.x的设计，我们不用那么关注常规的多线程问题，我们完全可以<strong>认为自己就处在一个单线程开发的环境下</strong>。这一点，Vert.x做的非常的棒！<br>现在我们的用户已经有了一个视频列表，当用户想看到完整的视频的时候，他可以向我们的另一个路由发送请求，只要在请求中包含视频id就可以了<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin">router.route(<span class="hljs-string">"/view_video"</span>).handler&#123; context -&gt;<br>  webClient.<span class="hljs-keyword">get</span>(<span class="hljs-number">443</span><br>          , <span class="hljs-string">"www.p**hub.com"</span><br>          ,<span class="hljs-string">"/view_video.php?viewkey="</span>+context.request().getParam(<span class="hljs-string">"viewkey"</span>)).ssl(<span class="hljs-literal">true</span>).send &#123;<br>            <span class="hljs-keyword">if</span> (it.failed()) &#123;<br>              println(it.cause())<br>              context.response().end(it.cause().message)<br>              <span class="hljs-keyword">return</span><span class="hljs-symbol">@send</span><br>            &#125;<br>            <span class="hljs-keyword">val</span> videoUrls = <span class="hljs-string">"\"quality\":\"(720|480|240)\",\"videoUrl\":\"(\S+?)\""</span>.toRegex().findAll(it.result().bodyAsString())<br>            videoUrls.forEach &#123;<br>              println(<span class="hljs-string">"Quality:<span class="hljs-subst">$&#123;it.groupValues[<span class="hljs-number">1</span>]&#125;</span> URL:<span class="hljs-subst">$&#123;it.groupValues[<span class="hljs-number">2</span>]&#125;</span>"</span>)<br>            &#125;<br>            context.response().putHeader(<span class="hljs-string">"Access-Control-Allow-Origin"</span>, <span class="hljs-string">"*"</span>)<br>              .end(JsonArray(*videoUrls.asIterable().map &#123;<br>                  JsonObject(<span class="hljs-string">"quality"</span> to it.groupValues[<span class="hljs-number">1</span>]<br>                          , <span class="hljs-string">"url"</span> to it.groupValues[<span class="hljs-number">2</span>]<br>                          .replace(<span class="hljs-string">"\\"</span>, <span class="hljs-string">""</span>)<br>                          )<br>                  &#125;.toTypedArray()).toBuffer())<br>          &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>那么在另一个路由里也是差不多的操作，只不过我们知道p**hub提供三种清晰度，这里就通过它的返回，将这三种清晰度和其对应的链接返还给用户而已。</p><h2 id="4-通了火车得买票"><a href="#4-通了火车得买票" class="headerlink" title="4.通了火车得买票"></a><strong>4.通了火车得买票</strong></h2><p>为了前往这个巨大的仓库，我们的基础设施都已经建设完毕了。是时候让我们的用户体验一下坐火车的乐趣了。那么下一篇会讲一下如何卖我们的火车票</p>]]></content>
      
      
        <tags>
            
            <tag> Vert.x </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vert.x后端漫游指南(2)</title>
      <link href="/2018/07/02/Vert-x%E5%90%8E%E7%AB%AF%E6%BC%AB%E6%B8%B8%E6%8C%87%E5%8D%97-2/"/>
      <url>/2018/07/02/Vert-x%E5%90%8E%E7%AB%AF%E6%BC%AB%E6%B8%B8%E6%8C%87%E5%8D%97-2/</url>
      <content type="html"><![CDATA[<h2 id="1-前情提要"><a href="#1-前情提要" class="headerlink" title="1.前情提要"></a><strong>1.前情提要</strong></h2><p>上一篇我们已经学会了怎么实现一个最简单的Http服务端。这一篇我们会介绍怎么写一个用于登录的API。</p><h2 id="2-路由"><a href="#2-路由" class="headerlink" title="2.路由"></a><strong>2.路由</strong></h2><p>或许你们已经看过了HttpServerRequest这个接口，并且发现了这个接口中有一个返回String的方法叫做absoluteURI。稍微想一想就能发现，其实只需要对这个absoluteURI的返回值进行一些正则匹配，我们就能实现路由的功能。在实现了路由之后，我们还可以通过getParam方法获取到请求的参数。所以，如果只是做一个Demo，我们甚至不需要Vert.x的web扩展。<br>但是我们都是要干一番大事业的对吧。所以在这里我们要引入io.vertx.ext.web.Router。这个接口的名称已经够说明问题了，它能让我们建立像express中提供的路由。那么让我们来创建第一个路由吧<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">import</span> io.vertx.ext.web.Router<br><span class="hljs-keyword">import</span> io.vertx.core.Vertx<br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args:<span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span>&#123;<br>  <span class="hljs-keyword">val</span> vertx = Vertx.vertx()<br>  <span class="hljs-comment">///////////////////Add Code here//////////////////////</span><br>  <span class="hljs-keyword">val</span> router = Router.router(vertx)<br>  router.route(<span class="hljs-string">"/login/:username/:password"</span>).handler&#123;<br>    <span class="hljs-keyword">val</span> username = it.request().getParam(<span class="hljs-string">"username"</span>)<br>    <span class="hljs-keyword">val</span> password = it.request().getParam(<span class="hljs-string">"password"</span>)<br>    <span class="hljs-keyword">if</span>(username==<span class="hljs-string">"admin"</span> &amp;&amp; password=<span class="hljs-string">"admin123"</span>)&#123;<br>      it.response().end(<span class="hljs-string">"&#123;status:0&#125;"</span>)<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      it.response().end(<span class="hljs-string">"&#123;status:-1&#125;"</span>)<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">//////////////////////////////////////////////////////</span><br>  vertx.createHttpServer().requestHandler&#123;<br>    router.accept(it)<br>  &#125;.listen(<span class="hljs-number">80</span>)&#123;<br>    <span class="hljs-keyword">if</span>(it.failed())<br>      it.cause.printStackTrace()<br>    <span class="hljs-keyword">else</span><br>      println(<span class="hljs-string">"Listening on 80"</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>这样我们就创建好了一个登录路由。这个路由接受两个参数，分别是username和password，用户在请求的时候大致是这样的<a href="http://example.com/login/admin/admin123" target="_blank" rel="noopener">http://example.com/login/admin/admin123</a> 。如果你对http协议比较熟悉的话，你可能会更加习惯<a href="http://example.com/login?username=admin&amp;password=admin123" target="_blank" rel="noopener">http://example.com/login?username=admin&amp;password=admin123</a> 这样的写法。其实这两者在Vert.x中是一样的。都可以通过<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin">request.getParam(<span class="hljs-string">"param name"</span>)<br></code></pre></td></tr></table></figure></p><p>这样的方式来获取，只不过前者需要在创建路由的时候设定好参数的名称以及位置，而后者的参数名称只在handler中出现。近几年越来越流行使用第一种方式，确实这样的api会更加的简洁，同时也不用把参数名称暴露在url中多少起了点保密的作用。<br>除了创建一个路由之外，我们还修改了requestHandler中的代码。我们将本来的<br><code>response().end(&quot;......&quot;)</code>换成了<code>router.accept(it)</code> 。相信这部分也非常的好理解，我们要让我们的router参与到HttpServer的处理中来，于是Router就提供了accept这个方法，它接收一个HttpServerRequest参数，在经过许多内部处理之后将一个包装好的RoutingContext传给我们的handler。这里其实还有另一种写法<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin">vertx.createHttpServer.requestHandler(router::accept).listen(<span class="hljs-number">80</span>)<br></code></pre></td></tr></table></figure></p><p>当然，这只是Kotlin的一点小技巧，似乎在Java8里也有类似的写法。</p><h2 id="3-更完整的登录"><a href="#3-更完整的登录" class="headerlink" title="3.更完整的登录"></a><strong>3.更完整的登录</strong></h2><p>路由在使用的过程中最核心的部分就是它的RoutingContext，这个Context把完全囊括了后端所需要的所有东西。对于用户的请求，我们可以通过request()获取，当我们想响应用户的时候，我们可以调用response()，而对于Cookie和Session，RoutingContext也为他们提供了相应的方法。<br>现在就让我们把这个登录做的更加完善一点。我们都知道，一个正常的登录过程中，服务端应该在用户登录之后保存一个session，并给用户一个Cookie，这两者就是一个键值对的关系。登录成功之后用户发送的每个请求都会带着这个Cookie，而服务端就通过这个Cookie去查询它对应的数据，比如说:用户名，用户id，用户权限等。<br>在使用Session之前，我们需要添加一点代码来初始化一些东西<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">val</span> store = LocalSessionStore.create(vertx)<br>router.route().handler(CookieHandler.create())<br>router.route().handler(SessionHandler.create(store))<br></code></pre></td></tr></table></figure></p><p>Cookie的部分非常简单，没有什么可说的。但是在创建SessionHandler的时候，我们发现它需要一个SessionStore参数。Vert.x提供了两种SessionStore，一种是我们使用的<em>LocalSessionStore</em>而另一种是<em>ClusteredSessionStore</em>。字面来看，一种是本地存储的Session，而另一种是集群存储的Session，两者的区别也就非常明显了。本地存储的Session只存储在一个Vertx实例中，而集群存储则可以在多个实例中共享Session。<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-comment">//创建集群会话存储</span><br><span class="hljs-keyword">val</span> store = ClusteredSessionStore.create(vertx, <span class="hljs-string">"myclusteredapp3.sessionmap"</span>);<br></code></pre></td></tr></table></figure></p><p>本系列中不会涉及到集群有关的内容，尽管分布式集群也是Vert.x一个非常明显的优势，但是由于作者本人也没有参与过这类分布式项目，在这方面经验浅薄，只能等之后有机会接触了再做补充。<br>在创建完SessionStore和SessionHandler之后，我们就可以在自己的handler中处理Session了<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin">router.route(<span class="hljs-string">"/login/:username/:password"</span>).handler&#123;<br>  <span class="hljs-keyword">if</span>(it.session().<span class="hljs-keyword">get</span>&lt;String&gt;(<span class="hljs-string">"username"</span>)==<span class="hljs-string">"admin"</span>)&#123;<br>    it.response().end(<span class="hljs-string">"&#123;status:1,msg:\"You have logged in \"&#125;"</span>)<br>    <span class="hljs-keyword">return</span><span class="hljs-symbol">@handler</span><br>  &#125;<br>  <span class="hljs-keyword">val</span> username = it.request().getParam(<span class="hljs-string">"username"</span>)<br>  <span class="hljs-keyword">val</span> password = it.request().getParam(<span class="hljs-string">"password"</span>)<br>  <span class="hljs-keyword">if</span>(username==<span class="hljs-string">"admin"</span> &amp;&amp; password=<span class="hljs-string">"admin123"</span>)&#123;<br>    it.session().put(<span class="hljs-string">"username"</span>,<span class="hljs-string">"admin"</span>)<br>    it.session().put(<span class="hljs-string">"level"</span>,<span class="hljs-string">"1"</span>)<br>    it.response().end(<span class="hljs-string">"&#123;status:0&#125;"</span>)<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    it.response().end(<span class="hljs-string">"&#123;status:-1&#125;"</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>这样我们的登录api就可以判断用户是否已经登录。每当用户请求的时候，我们就会调用<code>it.session().get()</code>判断用户是否已经登录。而每当用户登录成功的时候，我们就将用户名和等级放入Session中。用于之后的权限控制。</p><h2 id="4-一个可以投入使用的登录"><a href="#4-一个可以投入使用的登录" class="headerlink" title="4.一个可以投入使用的登录"></a><strong>4.一个可以投入使用的登录</strong></h2><p>一个正常的登录不应该是这样的对不对，没有人会把用户名和密码写在代码里。这么说可能不太对，其实也是有一些情况下，我们也会见到把用户名密码写在代码里的情况，比如说什么asp大马，php小马(不知道现在这种东西现在还有没有了)之类的东西或者是不靠谱的外包团队。<br>那么抛开这些另类的情况，为了实现一个登录功能，我们得有个数据库对不对。假如说我们现在已经有一个注册页面了，那么用户注册后的信息都应该放在数据库里，而登录的过程就是读数据库的过程。<br>Vert.x提供了很多操作数据库的包。这个系列里我们选择使用<strong>vertx-mysql-postgresql-client</strong>作为我们与数据库交互的客户端，同时呢，我们选择Mysql作为数据库。如果你从来没有接触过数据库的操作，那么你可以把Mysql想象成一个开放着3306端口的Excel表格，它允许连接到这个端口并且登录成功的客户端通过sql语句增删改查表格中的数据。<br>那么首先，我们要让我<strong>vertx-mysql-client</strong>连接到Mysql上。<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">import</span> io.vertx.ext.asyncsql.AsyncSQLClient<br><span class="hljs-keyword">import</span> io.vertx.ext.asyncsql.MySQLClient<br><span class="hljs-keyword">val</span> sqlClient = MySQLClient.createShared(vertx,JsonObject(<span class="hljs-string">"host"</span> to <span class="hljs-string">"localhost"</span><br>        ,<span class="hljs-string">"username"</span> to <span class="hljs-string">"root"</span><br>        ,<span class="hljs-string">"password"</span> to <span class="hljs-string">"root"</span><br>        ,<span class="hljs-string">"database"</span> to <span class="hljs-string">"example"</span>))<br></code></pre></td></tr></table></figure></p><p>这样我们就创建了一个<em>sqlClient</em>，如果连接成功的话。<br>这是关于MysqlClient的详细配置<br><figure class="highlight JSON"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JSON">&#123;<br>  <span class="hljs-attr">"host"</span> : &lt;主机地址&gt;,<br>  <span class="hljs-attr">"port"</span> : &lt;端口&gt;,<br>  <span class="hljs-attr">"maxPoolSize"</span> : &lt;最大连接数&gt;,<br>  <span class="hljs-attr">"username"</span> : &lt;用户名&gt;,<br>  <span class="hljs-attr">"password"</span> : &lt;密码&gt;,<br>  <span class="hljs-attr">"database"</span> : &lt;数据库名称&gt;,<br>  <span class="hljs-attr">"charset"</span> : &lt;编码&gt;,<br>  <span class="hljs-attr">"queryTimeout"</span> : &lt;查询超时时间-毫秒&gt;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>当然我们也可创建一个NonShared的sqlClient，创建方法是一样的，并且在这种只有一个Vert.x实例的工程中，两者的效果也是一样的。<br>现在我们要把这个sqlClient放到我们的RouterHandler中。<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin">router.route(<span class="hljs-string">"/login/:username/:password"</span>).handler&#123;<br>  <span class="hljs-keyword">if</span>(it.session().<span class="hljs-keyword">get</span>&lt;String&gt;(<span class="hljs-string">"username"</span>)==<span class="hljs-string">"admin"</span>)&#123;<br>    it.response().end(<span class="hljs-string">"&#123;status:1,msg:\"You have logged in \"&#125;"</span>)<br>    <span class="hljs-keyword">return</span><span class="hljs-symbol">@handler</span><br>  &#125;<br>  <span class="hljs-keyword">val</span> username = it.request().getParam(<span class="hljs-string">"username"</span>)<br>  <span class="hljs-keyword">val</span> password = it.request().getParam(<span class="hljs-string">"password"</span>)<br>  sqlClient.querySingleWithParams(<span class="hljs-string">"SELECT id,level FROM user WHERE username=? and password=?"</span>,JsonArray(username,password))&#123;<br>    <span class="hljs-keyword">if</span>(it.failed() || it.result()==<span class="hljs-literal">null</span>)&#123;<br>      it.response().end(<span class="hljs-string">"&#123;status:-1&#125;"</span>)<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      it.session().put(<span class="hljs-string">"username"</span>,username)<br>      it.session().put(<span class="hljs-string">"uid"</span>,it.result().getInteger(<span class="hljs-number">0</span>))<br>      it.session().put(<span class="hljs-string">"level"</span>,it.result().getInteger(<span class="hljs-number">1</span>))<br>      it.response().end(<span class="hljs-string">"&#123;status:0&#125;"</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>我们对判断部分做了点修改，使我们能够使用数据库中的数据。当查询到用户名和密码都与用户输入匹配的结果时，我们就将查询结果存入到session中。</p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5.小结"></a><strong>5.小结</strong></h2><p>这一篇算是比较详细的讲了怎么实现一个能够使用的登录API，当然也不是很全面。在Router里还有很多内容可以写，会看情况在之后补充。下一篇应该会继续讲MysqlClient的使用，然后把curd全部写一下。<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-comment">//完整代码</span><br><span class="hljs-keyword">import</span> io.vertx.ext.web.Router<br><span class="hljs-keyword">import</span> io.vertx.core.Vertx<br><span class="hljs-keyword">import</span> io.vertx.ext.asyncsql.AsyncSQLClient<br><span class="hljs-keyword">import</span> io.vertx.ext.asyncsql.MySQLClient<br><span class="hljs-comment">//在本例中，sqlClient、vertx、router写在什么地方都无所谓。如果你用Java，请把他们放在他们应该在的地方</span><br><span class="hljs-keyword">val</span> sqlClient = MySQLClient.createShared(vertx,JsonObject(<span class="hljs-string">"host"</span> to <span class="hljs-string">"localhost"</span><br>        ,<span class="hljs-string">"username"</span> to <span class="hljs-string">"root"</span><br>        ,<span class="hljs-string">"password"</span> to <span class="hljs-string">"root"</span><br>        ,<span class="hljs-string">"database"</span> to <span class="hljs-string">"example"</span>))<br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args:<span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span>&#123;<br>  <span class="hljs-keyword">val</span> vertx = Vertx.vertx()<br>  <span class="hljs-keyword">val</span> router = Router.router(vertx)<br>  <span class="hljs-keyword">val</span> store = LocalSessionStore.create(vertx)<br>  router.route().handler(CookieHandler.create())<br>  router.route().handler(SessionHandler.create(store))<br>  router.route(<span class="hljs-string">"/login/:username/:password"</span>).handler&#123;<br>    <span class="hljs-keyword">if</span>(it.session().<span class="hljs-keyword">get</span>&lt;String&gt;(<span class="hljs-string">"username"</span>)==<span class="hljs-string">"admin"</span>)&#123;<br>      it.response().end(<span class="hljs-string">"&#123;status:1,msg:\"You have logged in \"&#125;"</span>)<br>      <span class="hljs-keyword">return</span><span class="hljs-symbol">@handler</span><br>    &#125;<br>    <span class="hljs-keyword">val</span> username = it.request().getParam(<span class="hljs-string">"username"</span>)<br>    <span class="hljs-keyword">val</span> password = it.request().getParam(<span class="hljs-string">"password"</span>)<br>    sqlClient.querySingleWithParams(<span class="hljs-string">"SELECT id,level FROM user WHERE username=? and password=?"</span>,JsonArray(username,password))&#123;<br>      <span class="hljs-keyword">if</span>(it.failed() || it.result()==<span class="hljs-literal">null</span>)&#123;<br>        it.response().end(<span class="hljs-string">"&#123;status:-1&#125;"</span>)<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>        it.session().put(<span class="hljs-string">"username"</span>,username)<br>        it.session().put(<span class="hljs-string">"uid"</span>,it.result().getInteger(<span class="hljs-number">0</span>))<br>        it.session().put(<span class="hljs-string">"level"</span>,it.result().getInteger(<span class="hljs-number">1</span>))<br>        it.response().end(<span class="hljs-string">"&#123;status:0&#125;"</span>)<br>      &#125;<br>    &#125;<br>  &#125;<br>  vertx.createHttpServer().requestHandler&#123;<br>    router.accept(it)<br>  &#125;.listen(<span class="hljs-number">80</span>)&#123;<br>    <span class="hljs-keyword">if</span>(it.failed())<br>      it.cause.printStackTrace()<br>    <span class="hljs-keyword">else</span><br>      println(<span class="hljs-string">"Listening on 80"</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> Vert.x </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vert.x后端漫游指南（1）</title>
      <link href="/2018/07/01/Vert-x%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
      <url>/2018/07/01/Vert-x%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="1-为什么是Vert-x"><a href="#1-为什么是Vert-x" class="headerlink" title="1.为什么是Vert.x"></a><strong>1.为什么是Vert.x</strong></h2><p>如果你从来没有听说过Vert.x，不要觉得是自己孤陋寡闻或是被时代抛弃了。Vert.x是一个非常小众的服务端框架，我也举不出某个大厂商将Vert.x作为它们后端技术栈的例子，但是这并不能说明Vert.x不够优秀，Vert.x不火很大程度上是因为它没有那些惊世骇俗的噱头，同时它实在是太年轻了。<br>学习这样一个小众的框架往往是要付出许多代价的，无论是大段的报错信息还是连报错信息都没有的错误，小众的东西总是让我们费劲心思。好在Vert.x并不属于这一类的小众，Vert.x的文档非常详细(包括中文文档)，并且它的源码注释也非常符合规范，配合文档以及注释，想要学习这个框架还是非常容易的。<br>那么问题来了，在现在这个框架爆炸的时代，我们为什么还要学习Vert.x呢？是啊，现在的框架是真的多，好像不管是什么样的语言都可以来写后端服务了，js有express，python有django，go、java、ruby就更不用说了。那Vert.x到底有什么优势呢？  </p><h4 id="优势"><a href="#优势" class="headerlink" title="优势:"></a>优势:</h4><ul><li><em>运行在JVM上</em><br>也许你不认为运行在JVM上会是一个框架的优势，毕竟JVM上已经有许多非常成熟的解决方案了，大名鼎鼎的Spring，J2EE，这样一个不出名的框架要怎么与这些老牌强者抗衡，但是Vert.x就是可以，因为它与众不同。运行在JVM上让它可以很轻松的利用Java庞大的生态，各种工具，各种成熟的技术还有现在让许多框架头疼的多线程问题。</li><li><em>事件循环以及异步</em><br>如果你了解Netty的话，你对事件循环和异步一定不会陌生，并且我可以告诉你Vert.x的底层实现就是Netty。如果你从来没有听说过Netty那也没关系，我想你多半听说过nodejs，通俗的来说Vert.x就是运行在JVM上的Nodejs。他们都有一个Eventloop，他们的所有API都是异步的，他们都遵守”Don’t call us,we’ll call you”的原则。只不过Vert.x更加自由，更加安全。异步很大的一个好处是将逻辑与I/O分离，逻辑的部分干逻辑的事，I/O的部分干I/O的事，因为I/O往往是耗时严重的，所以等到I/O完成了自己的工作后再来召唤逻辑，而在I/O工作的时候逻辑就去做其他的事情，这样两方都不会有干等着的时候。</li><li><em>多语言支持</em><br>JVM的优势在这种时候体现的淋漓尽致，除了JVM以外，还有哪个平台能够做到同时运行多种语言呢？.Net吗。Vert.x支持7种语言，Java(个人认为，Java是最不适合的。至少目前是这样，Java10应该会有所改观), JavaScript, Groovy, Ruby, Ceylon, Scala and Kotlin，并且这种支持不是简单的因为大家都能运行在JVM上。Vert.x为这些语言提供了属于他们自己的API。</li><li><em>不仅仅是Web,不仅仅是服务</em><br>没错，不仅仅是Web，Vert.x提供的不仅仅是对Web的支持。Vert.x是个插件化的框架，它的核心部分实际上非常的简练。这个核心提供了TCP，UDP甚至是DNS的服务端，也提供了简单的HTTP服务端。在这个核心的基础上，我们可以添加其他的插件，使这个框架能够胜任Web服务端的工作。如果我们碰巧需要一个客户端的话 —— 想象我们现在要开发一个代理工作，我们就同时需要一个服务端和一个客户端 —— 那Vert.x简直就是不二之选，DNSClient,HttpClient,NetClient,DatagramSocketClient，我们想要的它都能提供。</li></ul><p>那么同样的，任何事物都有好的与坏的，如果有某样东西完美了，那它为什么还会有竞争对手</p><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势:"></a>劣势:</h4><ul><li><em>上手困难</em><br>不是所有人都能轻松的理解异步的，特别是在java里有很多同步代码的情况下，比如JDBC，习惯了同步的人很容易一不小心就忘了自己在一个异步的世界里，然后阻塞了Eventloop,接着有幸看到Vert.x抛出的超时异常。没错，Vert.x是会检测运行时间的，如果某段代码超时了，你会看到一个非常醒目的异常。</li><li>没了  </li></ul><h2 id="2-跨出的一小步"><a href="#2-跨出的一小步" class="headerlink" title="2.跨出的一小步"></a><strong>2.跨出的一小步</strong></h2><p>说了这么多，不如来看一看怎么写一个简单的http服务端吧。这个入门应该会出一个系列，从第一个服务端程序到一个比较完整的后端。可能会涉及到一点后端渲染，但是其实我不太喜欢后端渲染的东西。前端渲染有很多好处，无论是CDN还是利用浏览器的缓存，前端渲染都能减轻服务器负担。<br>首先，我们需要Vert.x。这个可以在Vert.x的官方网站上获取到</p><blockquote><p><a href="https://vertx.io/download/" target="_blank" rel="noopener">https://vertx.io/download/</a></p></blockquote><p>官网甚至提供了一个构建Vert.x工程的工具</p><blockquote><p><a href="http://start.vertx.io/" target="_blank" rel="noopener">http://start.vertx.io/</a></p></blockquote><p>如果你不知道怎么配置的话，可以直接在这里开始。<br>在这个系列里，我可能不常使用Java，而更加倾向于使用Kotlin。因为Kotlin和Vert.x的契合度非常高，Kotlin提供的协程可以很好的解决一些因为异步导致的问题，并且Kotlin完全兼容Java的特点也让Kotlin在许多其他语言中脱颖而出。<br>那让我们来看一个最简单的Http服务端是怎么实现的。<br><figure class="highlight Kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">import</span> io.vertx.core.Vertx<br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args:<span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span>&#123;<br>  <span class="hljs-keyword">val</span> vertx = Vertx.vertx()<br>  vertx.createHttpServer().requestHandler&#123;<br>    it.response().end(<span class="hljs-string">"Welcome to our first Http Server!"</span>)<br>  &#125;.listen(<span class="hljs-number">80</span>)&#123;<br>    <span class="hljs-keyword">if</span>(it.failed())<br>      it.cause.printStackTrace()<br>    <span class="hljs-keyword">else</span><br>      println(<span class="hljs-string">"Listening on 80"</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>这是用Kotlin实现一个简单HttpServer的版本。如果你从来没有接触过Kotlin的话，你只要记住一点func{}等于func({}),函数的最后一个lambda参数是可以放到小括号外面去的。然后对于只有一个参数的lambda，这个参数默认的名称叫做it。<br>我们可以看看这段代码到底做了什么。首先，我们得到了一个vertx对象，这个vertx是一切的起源。接着我们调用了createHttpServer方法，创建了一个Server。在创建完Server之后我们为它添加了一个handler，可以看到，Vert.x的API大多是流式的，写起来非常漂亮，fp的美感。在Kotlin里，这个handler表现为一个lambda，实际上这个requestHandler所需要的参数是一个Handler<httpserverrequest>接口，所以在Java里，写法就变成了<br><figure class="highlight Java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java">vertx.createHttpServer().requestHandler(<span class="hljs-keyword">new</span> Handler&lt;HttpServerRequest&gt;()&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">handle</span><span class="hljs-params">(HttpServerRequest req)</span></span>&#123;<br>    req.response().end(<span class="hljs-string">"Welcome to our first Http Server!"</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></httpserverrequest></p><p>当然这种写法比较过时，java8已经加入了lambda，但是为了更加清晰一点，这里我把这种原始的版本表示出来。<br>这个handler是在服务端启动后，每当有用户访问我们的服务端，服务端就会返回一个欢迎词，就像nginx的默认页面一样。同样的，listen也是差不多的过程，第一个参数是监听的端口，第二个参数则是用来处理监听结果的handler，这个handler在端口成功打开或是打开失败的时候被调用，所以我们可以知道我们的服务端有没有成功运行。<br>其实这里异步的特点就已经有所体现了，我们没有等待用户访问，也没有等待端口打开，所有的一切都是异步的。当有结果的时候，Vert.x就会来调用我们设定的handler，而当没有结果的时候，Evnetloop就会在那里自己循环，只要我们不写阻塞代码，Eventloop就永远不会停止循环。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><em>小结</em></h2><p>第一篇就大概介绍一下Vert.x的理念，实际上Vert.x的许多特性比介绍的要复杂的多，有兴趣的人可以去看中问文档，里面有讲关于Verticle的，关于分布式的，以及一些类似于热部署的。这里写的一个例子也非常的简单，但是如果你从来没有接触过异步，这对你来说可能是个挑战。你得明白，为什么这段代码不是按照顺序执行的，以及什么是lambda(这个不是非常重要，lambda只是一种表现形式而已，我们实例化一个接口也完全可以实现同样的功能)。<br>下一篇应该是会讲请求的处理，get的和post的，以及Router这个扩展。</p>]]></content>
      
      
        <tags>
            
            <tag> Vert.x </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
